arXiv:cs/9809024v2  [cs.CL]  18 Sep 1998
A Lexicalized Tree Adjoining Grammar for English
The XTAG Research Group
Institute for Research in Cognitive Science
University of Pennsylvania
3401 Walnut St., Suite 400A
Philadelphia, PA 19104-6228
http://www.cis.upenn.edu/~xtag
31 August 1998


Contents
I
General Information
1
1
Getting Around
3
2
Feature-Based, Lexicalized Tree Adjoining Grammars
5
2.1
TAG formalism . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
5
2.2
Lexicalization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
7
2.3
Uniﬁcation-based features . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
8
3
Overview of the XTAG System
11
3.1
System Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
11
3.1.1
Tree Selection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
11
3.1.2
Tree Database
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
13
3.1.3
Tree Grafting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
14
3.1.4
The Grammar Development Environment . . . . . . . . . . . . . . . . . .
15
3.2
Computer Platform . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
17
4
Underview
19
4.1
Subcategorization Frames . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
19
4.2
Complements and Adjuncts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
20
4.3
Non-S constituents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
21
4.4
Case Assignment . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
21
4.4.1
Approaches to Case
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
21
4.4.1.1
Case in GB theory . . . . . . . . . . . . . . . . . . . . . . . . . .
21
4.4.1.2
Minimalism and Case . . . . . . . . . . . . . . . . . . . . . . . .
22
4.4.2
Case in XTAG . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
22
4.4.3
Case Assigners . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
22
4.4.3.1
Prepositions
. . . . . . . . . . . . . . . . . . . . . . . . . . . . .
23
4.4.3.2
Verbs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
23
4.4.4
PRO in a uniﬁcation based framework . . . . . . . . . . . . . . . . . . . .
25
II
Verb Classes
28
5
Where to Find What
30
i

6
Verb Classes
37
6.1
Intransitive: Tnx0V
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
37
6.2
Transitive: Tnx0Vnx1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
38
6.3
Ditransitive: Tnx0Vnx1nx2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
39
6.4
Ditransitive with PP: Tnx0Vnx1pnx2
. . . . . . . . . . . . . . . . . . . . . . . .
40
6.5
Ditransitive with PP shift: Tnx0Vnx1tonx2 . . . . . . . . . . . . . . . . . . . . .
41
6.6
Sentential Complement with NP: Tnx0Vnx1s2
. . . . . . . . . . . . . . . . . . .
42
6.7
Intransitive Verb Particle: Tnx0Vpl
. . . . . . . . . . . . . . . . . . . . . . . . .
43
6.8
Transitive Verb Particle: Tnx0Vplnx1 . . . . . . . . . . . . . . . . . . . . . . . .
44
6.9
Ditransitive Verb Particle: Tnx0Vplnx1nx2 . . . . . . . . . . . . . . . . . . . . .
45
6.10 Intransitive with PP: Tnx0Vpnx1 . . . . . . . . . . . . . . . . . . . . . . . . . . .
46
6.11 Predicative Multi-word with Verb, Prep anchors: Tnx0VPnx1 . . . . . . . . . . .
47
6.12 Sentential Complement: Tnx0Vs1
. . . . . . . . . . . . . . . . . . . . . . . . . .
48
6.13 Intransitive with Adjective: Tnx0Vax1 . . . . . . . . . . . . . . . . . . . . . . . .
49
6.14 Transitive Sentential Subject: Ts0Vnx1
. . . . . . . . . . . . . . . . . . . . . . .
49
6.15 Light Verbs: Tnx0lVN1
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
50
6.16 Ditransitive Light Verbs with PP Shift: Tnx0lVN1Pnx2 . . . . . . . . . . . . . .
51
6.17 NP It-Cleft: TItVnx1s2
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
52
6.18 PP It-Cleft: TItVpnx1s2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
53
6.19 Adverb It-Cleft: TItVad1s2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
53
6.20 Adjective Small Clause Tree: Tnx0Ax1 . . . . . . . . . . . . . . . . . . . . . . . .
54
6.21 Adjective Small Clause with Sentential Complement: Tnx0A1s1
. . . . . . . . .
54
6.22 Adjective Small Clause with Sentential Subject: Ts0Ax1 . . . . . . . . . . . . . .
55
6.23 Equative BE: Tnx0BEnx1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
56
6.24 NP Small Clause: Tnx0N1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
56
6.25 NP Small Clause with Sentential Complement: Tnx0N1s1 . . . . . . . . . . . . .
57
6.26 NP Small Clause with Sentential Subject: Ts0N1 . . . . . . . . . . . . . . . . . .
57
6.27 PP Small Clause: Tnx0Pnx1
. . . . . . . . . . . . . . . . . . . . . . . . . . . . .
58
6.28 Exhaustive PP Small Clause: Tnx0Px1
. . . . . . . . . . . . . . . . . . . . . . .
59
6.29 PP Small Clause with Sentential Subject: Ts0Pnx1 . . . . . . . . . . . . . . . . .
59
6.30 Intransitive Sentential Subject: Ts0V . . . . . . . . . . . . . . . . . . . . . . . . .
60
6.31 Sentential Subject with ‘to’ complement: Ts0Vtonx1 . . . . . . . . . . . . . . . .
61
6.32 PP Small Clause, with Adv and Prep anchors: Tnx0ARBPnx1 . . . . . . . . . .
61
6.33 PP Small Clause, with Adj and Prep anchors: Tnx0APnx1
. . . . . . . . . . . .
62
6.34 PP Small Clause, with Noun and Prep anchors: Tnx0NPnx1
. . . . . . . . . . .
63
6.35 PP Small Clause, with Prep anchors: Tnx0PPnx1
. . . . . . . . . . . . . . . . .
64
6.36 PP Small Clause, with Prep and Noun anchors: Tnx0PNaPnx1 . . . . . . . . . .
64
6.37 PP Small Clause with Sentential Subject, and Adv and Prep anchors: Ts0ARBPnx1 65
6.38 PP Small Clause with Sentential Subject, and Adj and Prep anchors: Ts0APnx1
66
6.39 PP Small Clause with Sentential Subject, and Noun and Prep anchors: Ts0NPnx1 66
6.40 PP Small Clause with Sentential Subject, and Prep anchors: Ts0PPnx1 . . . . .
68
6.41 PP Small Clause with Sentential Subject, and Prep and Noun anchors: Ts0PNaPnx1 68
6.42 Predicative Adjective with Sentential Subject and Complement: Ts0A1s1 . . . .
69
6.43 Locative Small Clause with Ad anchor: Tnx0nx1ARB . . . . . . . . . . . . . . .
69
6.44 Exceptional Case Marking: TXnx0Vs1 . . . . . . . . . . . . . . . . . . . . . . . .
71
ii

6.45 Idiom with V, D, and N anchors: Tnx0VDN1 . . . . . . . . . . . . . . . . . . . .
72
6.46 Idiom with V, D, A, and N anchors: Tnx0VDAN1
. . . . . . . . . . . . . . . . .
72
6.47 Idiom with V and N anchors: Tnx0VN1 . . . . . . . . . . . . . . . . . . . . . . .
73
6.48 Idiom with V, A, and N anchors: Tnx0VAN1 . . . . . . . . . . . . . . . . . . . .
74
6.49 Idiom with V, D, A, N, and Prep anchors: Tnx0VDAN1Pnx2 . . . . . . . . . . .
75
6.50 Idiom with V, A, N, and Prep anchors: Tnx0VAN1Pnx2 . . . . . . . . . . . . . .
75
6.51 Idiom with V, N, and Prep anchors: Tnx0VN1Pnx2
. . . . . . . . . . . . . . . .
76
6.52 Idiom with V, D, N, and Prep anchors: Tnx0VDN1Pnx2 . . . . . . . . . . . . . .
77
7
Ergatives
79
8
Sentential Subjects and Sentential Complements
81
8.1
S or VP complements? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
81
8.2
Complementizers and Embedded Clauses in English: The Data . . . . . . . . . .
82
8.3
Features Required
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
84
8.4
Distribution of Complementizers
. . . . . . . . . . . . . . . . . . . . . . . . . . .
84
8.5
Case assignment, for and the two to’s
. . . . . . . . . . . . . . . . . . . . . . . .
85
8.6
Sentential Complements of Verbs . . . . . . . . . . . . . . . . . . . . . . . . . . .
86
8.6.1
Exceptional Case Marking Verbs . . . . . . . . . . . . . . . . . . . . . . .
89
8.7
Sentential Subjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
91
8.8
Nouns and Prepositions taking Sentential Complements
. . . . . . . . . . . . . .
92
8.9
PRO control . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
93
8.9.1
Types of control
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
93
8.9.2
A feature-based analysis of PRO control . . . . . . . . . . . . . . . . . . .
94
8.9.3
The nature of the control feature . . . . . . . . . . . . . . . . . . . . . . .
94
8.9.4
Long-distance transmission of control features . . . . . . . . . . . . . . . .
94
8.9.5
Locality constraints on control
. . . . . . . . . . . . . . . . . . . . . . . .
95
8.10 Reported speech
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
97
9
The English Copula, Raising Verbs, and Small Clauses
98
9.1
Usages of the copula, raising verbs, and small clauses . . . . . . . . . . . . . . . .
98
9.1.1
Copula
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
98
9.1.2
Raising Verbs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
99
9.1.3
Small Clauses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100
9.1.4
Raising Adjectives . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100
9.2
Various Analyses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
9.2.1
Main Verb Raising to INFL + Small Clause . . . . . . . . . . . . . . . . . 101
9.2.2
Auxiliary + Null Copula . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
9.2.3
Auxiliary + Predicative Phrase . . . . . . . . . . . . . . . . . . . . . . . . 101
9.2.4
Auxiliary + Small Clause . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
9.3
XTAG analysis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102
9.4
Non-predicative BE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107
10 Ditransitive constructions and dative shift
109
11 It-clefts
112
iii

III
Sentence Types
114
12 Passives
116
13 Extraction
118
13.1 Topicalization and the value of the <inv> feature
. . . . . . . . . . . . . . . . . 120
13.2 Extracted subjects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 121
13.3 Wh-moved NP complement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 122
13.4 Wh-moved object of a P . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123
13.5 Wh-moved PP
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123
13.6 Wh-moved S complement
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 124
13.7 Wh-moved Adjective complement . . . . . . . . . . . . . . . . . . . . . . . . . . . 125
14 Relative Clauses
126
14.1 Complementizers and clauses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 129
14.1.1 Further constraints on the null Comp ǫC . . . . . . . . . . . . . . . . . . . 131
14.2 Reduced Relatives
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 132
14.2.1 Restrictive vs. Non-restrictive relatives . . . . . . . . . . . . . . . . . . . . 133
14.3 External syntax . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133
14.4 Other Issues . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133
14.4.1 Interaction with adjoined Comps . . . . . . . . . . . . . . . . . . . . . . . 133
14.4.2 Adjunction on PRO
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 134
14.4.3 Adjunct relative clauses . . . . . . . . . . . . . . . . . . . . . . . . . . . . 134
14.4.4 ECM . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 135
14.5 Cases not handled
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 135
14.5.1 Partial treatment of free-relatives . . . . . . . . . . . . . . . . . . . . . . . 135
14.5.2 Adjunct P-stranding . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 136
14.5.3 Overgeneration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 136
14.5.3.1 how as wh-NP
. . . . . . . . . . . . . . . . . . . . . . . . . . . . 136
14.5.3.2 for-trace eﬀects . . . . . . . . . . . . . . . . . . . . . . . . . . . . 136
14.5.3.3 Internal head constraint . . . . . . . . . . . . . . . . . . . . . . . 136
14.5.3.4 Overt Comp constraint on stacked relatives . . . . . . . . . . . . 137
15 Adjunct Clauses
138
15.0.4 Multi-word Subordinating Conjunctions . . . . . . . . . . . . . . . . . . . 139
15.1 “Bare” Adjunct Clauses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 139
15.2 Discourse Conjunction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 141
16 Imperatives
143
17 Gerund NP’s
145
17.1 Determiner Gerunds . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 146
17.2 NP Gerunds . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 148
17.3 Gerund Passives
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 149
iv

IV
Other Constructions
151
18 Determiners and Noun Phrases
153
18.1 The Wh-Feature
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 158
18.2 Multi-word Determiners . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 158
18.3 Genitive Constructions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 160
18.4 Partitive Constructions
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 161
18.5 Adverbs, Noun Phrases, and Determiners
. . . . . . . . . . . . . . . . . . . . . . 163
19 Modiﬁers
167
19.1 Adjectives . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 167
19.2 Noun-Noun Modiﬁers
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 169
19.3 Time Noun Phrases
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 171
19.4 Prepositions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 173
19.5 Adverbs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 175
19.6 Locative Adverbial Phrases . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 182
20 Auxiliaries
185
20.1 Non-inverted sentences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 186
20.2 Inverted Sentences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 189
20.3 Do-Support . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 191
20.3.1 In negated sentences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 192
20.3.2 In inverted yes/no questions . . . . . . . . . . . . . . . . . . . . . . . . . . 193
20.4 Inﬁnitives . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 193
20.5 Semi-Auxiliaries
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 194
20.5.1 Marginal Modal dare . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 194
20.5.2 Other semi-auxiliaries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 195
20.5.3 Other Issues . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 196
21 Conjunction
197
21.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 197
21.2 Adjective, Adverb, Preposition and PP Conjunction
. . . . . . . . . . . . . . . . 197
21.3 Noun Phrase and Noun Conjunction . . . . . . . . . . . . . . . . . . . . . . . . . 197
21.4 Determiner Conjunction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 198
21.5 Sentential Conjunction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 198
21.6 Comma as a conjunction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 199
21.7 But-not, not-but, and-not and ǫ-not . . . . . . . . . . . . . . . . . . . . . . . . . . 202
21.8 To as a Conjunction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 203
21.9 Predicative Coordination
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 203
21.10Pseudo-coordination . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 207
22 Comparatives
208
22.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 208
22.2 Metalinguistic Comparatives
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 209
22.3 Propositional Comparatives . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 211
22.3.1 Nominal Comparatives . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 211
v

22.3.2 Adjectival Comparatives . . . . . . . . . . . . . . . . . . . . . . . . . . . . 216
22.3.3 Adverbial Comparatives . . . . . . . . . . . . . . . . . . . . . . . . . . . . 219
22.4 Future Work
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 221
23 Punctuation Marks
222
23.1 Appositives, parentheticals and vocatives
. . . . . . . . . . . . . . . . . . . . . . 223
23.1.1 βnxPUnxPU
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 223
23.1.2 βnPUnxPU . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 224
23.1.3 βnxPUnx . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 224
23.1.4 βPUpxPUvx
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 225
23.1.5 βpuARBpuvx . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 227
23.1.6 βsPUnx . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 227
23.1.7 βnxPUs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 228
23.2 Bracketing punctuation
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 228
23.2.1 Simple bracketing
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 228
23.2.2 βsPUsPU . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 230
23.3 Punctuation trees containing no lexical material . . . . . . . . . . . . . . . . . . . 230
23.3.1 αPU . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 230
23.3.2 βPUs
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 231
23.3.3 βsPUs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 232
23.3.4 βsPU
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 233
23.3.5 βvPU . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 234
23.3.6 βpPU . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 234
23.4 Other trees
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 234
23.4.1 βspuARB . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 234
23.4.2 βspuPnx . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 235
23.4.3 βnxPUa . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 235
V
Appendices
236
A Future Work
238
A.1 Adjective ordering
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 238
A.2 More work on Determiners . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 238
A.3 -ing adjectives . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 239
A.4 Verb selectional restrictions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 239
A.5 Thematic Roles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 240
B Metarules
241
B.1
Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 241
B.2
The deﬁnition of a metarule in XTAG . . . . . . . . . . . . . . . . . . . . . . . . 242
B.2.1
Node names, variable instantiation, and matches . . . . . . . . . . . . . . 242
B.2.2
Structural Matching . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 243
B.2.3
Output Generation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 245
B.2.4
Feature Matching . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 246
B.3
Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 247
vi

B.4
The Access to the Metarules through the XTAG Interface . . . . . . . . . . . . . 248
C Lexical Organization
253
C.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 253
C.2 System Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 253
C.2.1
Subcategorization frames
. . . . . . . . . . . . . . . . . . . . . . . . . . . 254
C.2.2
Blocks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 254
C.2.3
Lexical Redistribution Rules (LRRs) . . . . . . . . . . . . . . . . . . . . . 256
C.2.4
Tree generation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 256
C.3 Implementation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 257
C.4 Generating grammars
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 257
C.5 Summary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 260
D Tree Naming conventions
261
D.1 Tree Families . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 261
D.2 Trees within tree families
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 261
D.3 Assorted Initial Trees
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 262
D.4 Assorted Auxiliary Trees . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 262
D.4.1
Relative Clause Trees
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 263
E Features
264
E.1
Agreement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 264
E.1.1
Agreement and Movement . . . . . . . . . . . . . . . . . . . . . . . . . . . 266
E.2
Case . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 266
E.2.1
ECM . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 267
E.2.2
Agreement and Case . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 267
E.3
Extraction and Inversion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 267
E.3.1
Inversion, Part 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 268
E.3.2
Inversion, Part 2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 269
E.4
Clause Type . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 269
E.4.1
Auxiliary Selection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 270
E.5
Relative Clauses
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 270
E.6
Complementizer Selection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 272
E.6.1
Verbs with object sentential complements . . . . . . . . . . . . . . . . . . 272
E.6.2
Verbs with sentential subjects . . . . . . . . . . . . . . . . . . . . . . . . . 273
E.6.3
That-trace and for-trace eﬀects . . . . . . . . . . . . . . . . . . . . . . . . 274
E.7
Determiner ordering . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 274
E.8
Punctuation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 274
E.9
Conjunction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 275
E.10 Comparatives . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 275
E.11 Control
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 275
E.12 Other Features . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 275
vii

F Evaluation and Results
277
F.1
Parsing Corpora
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 277
F.2
TSNLP
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 277
F.3
Chunking and Dependencies in XTAG Derivations
. . . . . . . . . . . . . . . . . 279
F.4
Comparison with IBM . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 281
F.5
Comparison with Alvey
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 282
F.6
Comparison with CLARE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 282
viii

List of Figures
2.1
Elementary trees in TAG
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
6
2.2
Substitution in TAG . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
6
2.3
Adjunction in TAG . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
7
2.4
Lexicalized Elementary trees
. . . . . . . . . . . . . . . . . . . . . . . . . . . . .
7
2.5
Substitution in FB-LTAG . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
8
2.6
Adjunction in FB-LTAG . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
9
2.7
Lexicalized Elementary Trees with Features . . . . . . . . . . . . . . . . . . . . .
10
3.1
XTAG system diagram . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
12
3.2
Output Structures from the Parser . . . . . . . . . . . . . . . . . . . . . . . . . .
15
3.3
Interfaces database . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
16
3.4
XTAG Interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
17
4.1
Diﬀerent subcategorization frames for the verb buy . . . . . . . . . . . . . . . . .
20
4.2
Trees illustrating the diﬀerence between Complements and Adjuncts . . . . . . .
21
4.3
Lexicalized NP trees with case markings . . . . . . . . . . . . . . . . . . . . . . .
23
4.4
Assigning case in prepositional phrases . . . . . . . . . . . . . . . . . . . . . . . .
24
4.5
Case assignment to NP arguments
. . . . . . . . . . . . . . . . . . . . . . . . . .
24
4.6
Assigning case according to verb form
. . . . . . . . . . . . . . . . . . . . . . . .
25
4.7
Proper case assignment with auxiliary verbs . . . . . . . . . . . . . . . . . . . . .
26
6.1
Declarative Intransitive Tree: αnx0V . . . . . . . . . . . . . . . . . . . . . . . . .
38
6.2
Declarative Transitive Tree: αnx0Vnx1 . . . . . . . . . . . . . . . . . . . . . . . .
38
6.3
Declarative Ditransitive Tree: αnx0Vnx1nx2
. . . . . . . . . . . . . . . . . . . .
39
6.4
Declarative Ditransitive with PP Tree: αnx0Vnx1pnx2 . . . . . . . . . . . . . . .
40
6.5
Declarative Ditransitive with PP shift Trees: αnx0Vnx1Pnx2 (a) and αnx0Vnx2nx1 (b) 41
6.6
Declarative Sentential Complement with NP Tree: βnx0Vnx1s2 . . . . . . . . . .
43
6.7
Declarative Intransitive Verb Particle Tree: αnx0Vpl . . . . . . . . . . . . . . . .
44
6.8
Declarative Transitive Verb Particle Tree: αnx0Vplnx1 (a) and αnx0Vnx1pl (b) .
44
6.9
Declarative Ditransitive Verb Particle Tree: αnx0Vplnx1nx2 (a), αnx0Vnx1plnx2 (b)
and αnx0Vnx1nx2pl (c) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
45
6.10 Declarative Intransitive with PP Tree: αnx0Vpnx1 . . . . . . . . . . . . . . . . .
46
6.11 Declarative PP Complement Tree: αnx0VPnx1 . . . . . . . . . . . . . . . . . . .
47
6.12 Declarative Sentential Complement Tree: βnx0Vs1 . . . . . . . . . . . . . . . . .
48
6.13 Declarative Intransitive with Adjective Tree: αnx0Vax1
. . . . . . . . . . . . . .
49
6.14 Declarative Sentential Subject Tree: αs0Vnx1 . . . . . . . . . . . . . . . . . . . .
50
ix

6.15 Declarative Light Verb Tree: αnx0lVN1 . . . . . . . . . . . . . . . . . . . . . . .
51
6.16 Declarative Light Verbs with PP Tree: αnx0lVN1Pnx2 (a), αnx0lVnx2N1 (b) . .
52
6.17 Declarative NP It-Cleft Tree: αItVpnx1s2 . . . . . . . . . . . . . . . . . . . . . .
52
6.18 Declarative PP It-Cleft Tree: αItVnx1s2 . . . . . . . . . . . . . . . . . . . . . . .
53
6.19 Declarative Adverb It-Cleft Tree: αItVad1s2 . . . . . . . . . . . . . . . . . . . . .
54
6.20 Declarative Adjective Small Clause Tree: αnx0Ax1 . . . . . . . . . . . . . . . . .
54
6.21 Declarative Adjective Small Clause with Sentential Complement Tree: αnx0A1s1
55
6.22 Declarative Adjective Small Clause with Sentential Subject Tree: αs0Ax1 . . . .
56
6.23 Declarative Equative BE Tree: αnx0BEnx1 . . . . . . . . . . . . . . . . . . . . .
56
6.24 Declarative NP Small Clause Trees: αnx0N1
. . . . . . . . . . . . . . . . . . . .
57
6.25 Declarative NP with Sentential Complement Small Clause Tree: αnx0N1s1
. . .
58
6.26 Declarative NP Small Clause with Sentential Subject Tree: αs0N1
. . . . . . . .
58
6.27 Declarative PP Small Clause Tree: αnx0Pnx1 . . . . . . . . . . . . . . . . . . . .
59
6.28 Declarative Exhaustive PP Small Clause Tree: αnx0Px1 . . . . . . . . . . . . . .
60
6.29 Declarative PP Small Clause with Sentential Subject Tree: αs0Pnx1 . . . . . . .
60
6.30 Declarative Intransitive Sentential Subject Tree: αs0V . . . . . . . . . . . . . . .
61
6.31 Sentential Subject Tree with ‘to’ complement: αs0Vtonx1 . . . . . . . . . . . . .
61
6.32 Declarative PP Small Clause tree with two-word preposition, where the ﬁrst word
is an adverb, and the second word is a preposition: αnx0ARBPnx1 . . . . . . . .
62
6.33 Declarative PP Small Clause tree with two-word preposition, where the ﬁrst word
is an adjective, and the second word is a preposition: αnx0APnx1
. . . . . . . .
63
6.34 Declarative PP Small Clause tree with two-word preposition, where the ﬁrst word
is a noun, and the second word is a preposition: αnx0NPnx1
. . . . . . . . . . .
63
6.35 Declarative PP Small Clause tree with two-word preposition, where both words
are prepositions: αnx0PPnx1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
64
6.36 Declarative PP Small Clause tree with three-word preposition, where the middle
noun is marked for null adjunction: αnx0PNaPnx1 . . . . . . . . . . . . . . . . .
65
6.37 Declarative PP Small Clause with Sentential Subject Tree, with two-word prepo-
sition, where the ﬁrst word is an adverb, and the second word is a preposition:
αs0ARBPnx1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
66
6.38 Declarative PP Small Clause with Sentential Subject Tree, with two-word prepo-
sition, where the ﬁrst word is an adjective, and the second word is a preposition:
αs0APnx1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
67
6.39 Declarative PP Small Clause with Sentential Subject Tree, with two-word prepo-
sition, where the ﬁrst word is a noun, and the second word is a preposition:
αs0NPnx1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
67
6.40 Declarative PP Small Clause with Sentential Subject Tree, with two-word prepo-
sition, where both words are prepositions: αs0PPnx1 . . . . . . . . . . . . . . . .
68
6.41 Declarative PP Small Clause with Sentential Subject Tree, with three-word
preposition, where the middle noun is marked for null adjunction: αs0PNaPnx1 .
69
6.42 Predicative Adjective with Sentential Subject and Complement: αs0A1s1
. . . .
70
6.43 Declarative Locative Adverbial Small Clause Tree: αnx0nx1ARB . . . . . . . . .
70
6.44 Wh-moved Locative Small Clause Tree: αW1nx0nx1ARB . . . . . . . . . . . . .
71
6.45 ECM Tree: βXnx0Vs1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
71
6.46 Declarative Transitive Idiom Tree: αnx0VDN1
. . . . . . . . . . . . . . . . . . .
72
x

6.47 Declarative Idiom with V, D, A, and N Anchors Tree: αnx0VDAN1
. . . . . . .
73
6.48 Declarative Idiom with V and N Anchors Tree: αnx0VN1 . . . . . . . . . . . . .
74
6.49 Declarative Idiom with V, A, and N Anchors Tree: αnx0VAN1 . . . . . . . . . .
74
6.50 Declarative Idiom with V, D, A, N, and Prep Anchors Tree: αnx0VDAN1Pnx2 .
75
6.51 Declarative Idiom with V, A, N, and Prep Anchors Tree: αnx0VAN1Pnx2 . . . .
76
6.52 Declarative Idiom with V, N, and Prep Anchors Tree: αnx0VN1Pnx2
. . . . . .
77
6.53 Declarative Idiom with V, D, N, and Prep Anchors Tree: αnx0VDN1Pnx2 . . . .
77
7.1
Ergative Tree: αEnx1V
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
80
8.1
Tree βCOMPs, anchored by that
. . . . . . . . . . . . . . . . . . . . . . . . . . .
85
8.2
Sentential complement tree: βnx0Vs1
. . . . . . . . . . . . . . . . . . . . . . . .
87
8.3
Trees for The emu thinks that the aardvark smells terrible. . . . . . . . . . . . . .
87
8.4
Tree for Who smells terrible? . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
88
8.5
ECM tree: βXnx0Vs1
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
89
8.6
Sample ECM parse . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
90
8.7
ECM passive
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
91
8.8
Comparison of <assign-comp> values for sentential subjects: αs0Vnx1 (a) and
sentential complements: βnx0Vs1 (b) . . . . . . . . . . . . . . . . . . . . . . . . .
92
8.9
Sample trees for preposition: βPss (a) and noun: αNXNs (b) taking sentential
complements
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
93
8.10 Tree for persuaded
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
95
8.11 Tree for leave . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
95
8.12 Derived tree for Srini persuaded Mickey to leave . . . . . . . . . . . . . . . . . . .
96
8.13 Derivation tree for Srini persuaded Mickey to leave . . . . . . . . . . . . . . . . .
96
9.1
Predicative trees: αnx0N1 (a), αnx0Ax1 (b) and αnx0Pnx1 (c) . . . . . . . . . . 102
9.2
Copula auxiliary tree: βVvx . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104
9.3
Predicative AP tree with features: αnx0Ax1 . . . . . . . . . . . . . . . . . . . . . 105
9.4
Consider tree for embedded small clauses
. . . . . . . . . . . . . . . . . . . . . . 106
9.5
Raising verb with experiencer tree: βVpxvx . . . . . . . . . . . . . . . . . . . . . 106
9.6
Raising adjective tree: βVvx-adj
. . . . . . . . . . . . . . . . . . . . . . . . . . . 106
9.7
Equative BE trees: αnx0BEnx1 (a) and αInvnx0BEnx1 (b) . . . . . . . . . . . . 108
10.1 Dative shift trees: αnx0Vnx1Pnx2 (a) and αnx0Vnx2nx1 (b) . . . . . . . . . . . 110
11.1 It-cleft with PP clefted element: αItVpnx1s2 (a) and αInvItVpnx1s2 (b) . . . . . 113
12.1 Passive trees in the Sentential Complement with NP tree family: βnx1Vs2 (a),
βnx1Vbynx0s2 (b) and βnx1Vs2bynx0 (c) . . . . . . . . . . . . . . . . . . . . . . 116
13.1 Transitive tree with object extraction: αW1nx0Vnx1 . . . . . . . . . . . . . . . . 119
13.2 Intransitive tree with subject extraction: αW0nx0V
. . . . . . . . . . . . . . . . 122
13.3 Ditransitive trees with direct object: αW1nx0Vnx1nx2 (a) and indirect object
extraction: αW2nx0Vnx1nx2 (b) . . . . . . . . . . . . . . . . . . . . . . . . . . . 123
13.4 Ditransitive with PP tree with the object of the PP extracted: αW2nx0Vnx1pnx2124
13.5 Ditransitive with PP with PP extraction tree: αpW2nx0Vnx1pnx2 . . . . . . . . 124
xi

13.6 Predicative Adjective tree with extracted adjective: αWA1nx0Vax1 . . . . . . . . 125
14.1 Relative clause trees in the transitive tree family: βNc1nx0Vnx1 (a) and βN0nx0Vnx1
(b) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127
14.2 Adjunct relative clause tree with PP-pied-piping in the transitive tree family:
βNpxnx0Vnx1
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 129
14.3 Determiner tree with <rel-clause> feature: βDnx . . . . . . . . . . . . . . . . . 134
15.1 Auxiliary Trees for Subordinating Conjunctions . . . . . . . . . . . . . . . . . . . 138
15.2 Trees Anchored by Subordinating Conjunctions: βvxPARBPs and βvxParbPs . . 140
15.3 Sample Participial Adjuncts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 141
15.4 Example of discourse conjunction, from Seuss’ The Lorax
. . . . . . . . . . . . . 142
16.1 Transitive imperative tree: αInx0Vnx1 . . . . . . . . . . . . . . . . . . . . . . . . 144
17.1 Determiner Gerund tree from the transitive tree family: αDnx0Vnx1 . . . . . . . 147
17.2 NP Gerund tree from the transitive tree family: αGnx0Vnx1
. . . . . . . . . . . 149
17.3 Passive Gerund trees from the transitive tree family: αGnx1Vbynx0 (a) and
αGnx1V (b) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 150
18.1 NP Tree . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 154
18.2 Determiner Trees with Features . . . . . . . . . . . . . . . . . . . . . . . . . . . . 155
18.3 Multi-word Determiner tree: βDDnx . . . . . . . . . . . . . . . . . . . . . . . . . 160
18.4 Genitive Determiner Tree
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 162
18.5 Genitive NP tree for substitution: αDnxG . . . . . . . . . . . . . . . . . . . . . . 162
18.6 Partitive Determiner Tree . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 164
18.7 (a) Adverb modifying a determiner; (b) Adverb modifying a noun phrase
. . . . 165
19.1 Standard Tree for Adjective modifying a Noun: βAn . . . . . . . . . . . . . . . . 168
19.2 Multiple adjectives modifying a noun . . . . . . . . . . . . . . . . . . . . . . . . . 169
19.3 Noun-noun compounding tree: βNn (not all features displayed) . . . . . . . . . . 170
19.4 Time Phrase Modiﬁer trees: βNs, βNvx, βvxN, βnxN
. . . . . . . . . . . . . . . 172
19.5 Time NPs with and without a determiner . . . . . . . . . . . . . . . . . . . . . . 172
19.6 Time NP trees: Two diﬀerent attachments . . . . . . . . . . . . . . . . . . . . . . 173
19.7 Time NPs in diﬀerent positions (βvxN, βnxN and βNs)
. . . . . . . . . . . . . . 173
19.8 Time NPs: Derived tree and Derivation (βNvx position) . . . . . . . . . . . . . . 174
19.9 Selected Prepositional Phrase Modiﬁer trees: βPss, βnxPnx, βvxP and βvxPPnx 175
19.10Adverb Trees for pre-modiﬁcation of S: βARBs (a) and post-modiﬁcation of a
VP: βvxARB (b) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 177
19.11Derived tree for How did you fall?
. . . . . . . . . . . . . . . . . . . . . . . . . . 178
19.12Complex adverb phrase modiﬁer: βARBarbs
. . . . . . . . . . . . . . . . . . . . 179
19.13Selected Focus and Multi-word Adverb Modiﬁer trees: βARBnx, βPARBd and
βPaPd . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 181
19.14Selected Multi-word Adverb Modiﬁer trees (for adverbs like sort of, kind of):
βNPax, βNPvx, βvxNP. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 181
xii

19.15Selected Multi-word Adverb Modiﬁer trees (for adverbs like a little, a bit): βvxDA,
βDAax, βDNpx.
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 183
19.16Locative Modiﬁer Trees: βnxnxARB, βnxARB . . . . . . . . . . . . . . . . . . . 183
19.17Locative Phrases featuring NP and Adverb Degree Speciﬁcations . . . . . . . . . 184
20.1 Auxiliary verb tree for non-inverted sentences: βVvx
. . . . . . . . . . . . . . . 187
20.2 Auxiliary trees for The music should have been being played . . . . . . . . . . . . 188
20.3 The music should have been being played . . . . . . . . . . . . . . . . . . . . . . . 189
20.4 Trees for auxiliary verb inversion: βVs (a) and βVvx (b) . . . . . . . . . . . . . . 190
20.5 will John buy a backpack ? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 191
21.1 Tree for adjective conjunction: βa1CONJa2 and a resulting parse tree . . . . . . 198
21.2 Tree for NP conjunction: βCONJnx1CONJnx2 and a resulting parse tree
. . . . 199
21.3 Tree for determiner conjunction: βd1CONJd2.ps . . . . . . . . . . . . . . . . . . 200
21.4 Tree for sentential conjunction: βs1CONJs2 . . . . . . . . . . . . . . . . . . . . . 201
21.5
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 201
21.6 βa1CONJa2 (a) anchored by comma and (b) anchored by and . . . . . . . . . . . 202
21.7 Tree for conjunction with but-not: βpx1CONJARBpx2 . . . . . . . . . . . . . . . 203
21.8 Tree for conjunction with not-but: βARBnx1CONJnx2
. . . . . . . . . . . . . . 204
21.9 Example of conjunction with to . . . . . . . . . . . . . . . . . . . . . . . . . . . . 205
21.10Coordination schema . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 205
21.11An example of the conjoin operation. {1} denotes a shared dependency. . . . . . 206
21.12Coordination as adjunction. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 206
22.1 Tree for Metalinguistic Adjective Comparative: βARBaPa . . . . . . . . . . . . . 210
22.2 Tree for Adjective-Extreme Comparative: βARBPa . . . . . . . . . . . . . . . . . 211
22.3 Nominal comparative trees
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 212
22.4 Tree for Lone Comparatives: αCARB
. . . . . . . . . . . . . . . . . . . . . . . . 213
22.5 Comparative conjunctions. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 214
22.6 Comparative conjunctions. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 215
22.7 Adjunction of βnxPnx to NP modiﬁed by comparative adjective. . . . . . . . . . 216
22.8 Elliptical adjectival comparative trees
. . . . . . . . . . . . . . . . . . . . . . . . 217
22.9 Comparativized adjective triggering βCnxPnx.
. . . . . . . . . . . . . . . . . . . 218
22.10Adjunction of βaxPnx to comparative adjective.
. . . . . . . . . . . . . . . . . . 219
22.11Adverbial comparative trees . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 220
23.1 The βnxPUnxPU tree, anchored by parentheses . . . . . . . . . . . . . . . . . . . 224
23.2 An N-level modiﬁer, using the βnPUnx tree . . . . . . . . . . . . . . . . . . . . . 225
23.3 The derived trees for an NP with (a) a peripheral, dash-separated appositive
and (b) an NP colon expansion (uttered by the Mouse in Alice’s Adventures in
Wonderland)
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 226
23.4 The βPUpxPUvx tree, anchored by commas . . . . . . . . . . . . . . . . . . . . . 226
23.5 Tree illustrating the use of βPUpxPUvx . . . . . . . . . . . . . . . . . . . . . . . 227
23.6 A tree illustrating the use of sPUnx for a colon expansion attached at S. . . . . . 228
23.7 βPUsPU anchored by parentheses, and in a derivation, along with βPUnxPU . . 229
23.8 βPUs, with features displayed . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 231
xiii

23.9 βsPUs, with features displayed
. . . . . . . . . . . . . . . . . . . . . . . . . . . . 233
B.1
Metarule for wh-movement of subject
. . . . . . . . . . . . . . . . . . . . . . . . 248
B.2
Metarule for wh-movement of object . . . . . . . . . . . . . . . . . . . . . . . . . 248
B.3
Metarule for general wh movement of an NP
. . . . . . . . . . . . . . . . . . . . 249
B.4
Application of wh-movement rule to Tnx0Vnx1Pnx2 . . . . . . . . . . . . . . . . 249
B.5
Parallel application of metarules
. . . . . . . . . . . . . . . . . . . . . . . . . . . 250
B.6
Sequential application of metarules . . . . . . . . . . . . . . . . . . . . . . . . . . 251
B.7
Cumulative application of metarules . . . . . . . . . . . . . . . . . . . . . . . . . 251
C.1 Lexical Organization: System Overview
. . . . . . . . . . . . . . . . . . . . . . . 254
C.2 Some subcategorization blocks
. . . . . . . . . . . . . . . . . . . . . . . . . . . . 255
C.3 Transformation blocks for extraction . . . . . . . . . . . . . . . . . . . . . . . . . 255
C.4 Elementary trees generated from combining blocks . . . . . . . . . . . . . . . . . 256
C.5 Partial inheritance lattice in English . . . . . . . . . . . . . . . . . . . . . . . . . 257
C.6 Implementation of the system . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 258
C.7 Interface for creating a grammar
. . . . . . . . . . . . . . . . . . . . . . . . . . . 258
C.8 Part of the Interface for creating blocks
. . . . . . . . . . . . . . . . . . . . . . . 259
xiv

Abstract
This document describes a sizable grammar of English written in the TAG formalism and
implemented for use with the XTAG system. This report and the grammar described herein
supersedes the TAG grammar described in [XTAG-Group, 1995]. The English grammar de-
scribed in this report is based on the TAG formalism developed in [Joshi et al., 1975], which has
been extended to include lexicalization ([Schabes et al., 1988]), and uniﬁcation-based feature
structures ([Vijay-Shanker and Joshi, 1991]). The range of syntactic phenomena that can be
handled is large and includes auxiliaries (including inversion), copula, raising and small clause
constructions, topicalization, relative clauses, inﬁnitives, gerunds, passives, adjuncts, it-clefts,
wh-clefts, PRO constructions, noun-noun modiﬁcations, extraposition, determiner sequences,
genitives, negation, noun-verb contractions, sentential adjuncts and imperatives. This techni-
cal report corresponds to the XTAG Release 8/31/98. The XTAG grammar is continuously
updated with the addition of new analyses and modiﬁcation of old ones, and an online version
of this report can be found at the XTAG web page: http://www.cis.upenn.edu/~xtag/.


Acknowledgements
We are immensely grateful to Aravind Joshi for supporting this project.
The following people have contributed to the development of grammars in the project: Anne
Abeille, Jason Baldridge, Rajesh Bhatt, Kathleen Bishop, Raman Chandrasekar, Sharon Cote,
Beatrice Daille, Christine Doran, Dania Egedi, Tim Farrington, Jason Frank, Caroline Heycock,
Beth Ann Hockey, Roumyana Izvorski, Karin Kipper, Daniel Karp, Seth Kulick, Young-Suk
Lee, Heather Matayek, Patrick Martin, Megan Moser, Sabine Petillon, Rashmi Prasad, Laura
Siegel, Yves Schabes, Victoria Tredinnick and Raﬀaella Zanuttini.
The XTAG system has been developed by: Tilman Becker, Richard Billington, Andrew
Chalnick, Dania Egedi, Devtosh Khare, Albert Lee, David Magerman, Alex Mallet, Patrick
Paroubek, Rich Pito, Gilles Prigent, Carlos Prolo, Anoop Sarkar, Yves Schabes, William
Schuler, B. Srinivas, Fei Xia, Yuji Yoshiie and Martin Zaidel.
We would also like to thank Michael Hegarty, Lauri Karttunen, Anthony Kroch, Mitchell
Marcus, Martha Palmer, Owen Rambow, Philip Resnik, Beatrice Santorini and Mark Steedman.
In addition, JeﬀAaronson, Douglas DeCarlo, Mark-Jason Dominus, Mark Foster, Gaylord
Holder, David Magerman, Ken Noble, Steven Shapiro and Ira Winston have provided technical
support. Adminstrative support was provided by Susan Deysher, Carolyn Elken, Jodi Kerper,
Christine Sandy and Trisha Yannuzzi.
This work was partially supported by NSF Grant SBR8920230 and ARO Grant DAAH0404-
94-G-0426.


Part I
General Information
1


Chapter 1
Getting Around
This technical report presents the English XTAG grammar as implemented by the XTAG
Research Group at the University of Pennsylvania. The technical report is organized into four
parts, plus a set of appendices. Part 1 contains general information about the XTAG system
and some of the underlying mechanisms that help shape the grammar. Chapter 2 contains
an introduction to the formalism behind the grammar and parser, while Chapter 3 contains
information about the entire XTAG system. Linguists interested solely in the grammar of the
XTAG system may safely skip Chapters 2 and 3. Chapter 4 contains information on some of
the linguistic principles that underlie the XTAG grammar, including the distinction between
complements and adjuncts, and how case is handled.
The actual description of the grammar begins with Part 2, and is contained in the following
three parts. Parts 2 and 3 contains information on the verb classes and the types of trees
allowed within the verb classes, respectively, while Part 4 contains information on trees not
included in the verb classes (e.g.
NP’s, PP’s, various modiﬁers, etc). Chapter 5 of Part 2
contains a table that attempts to provide an overview of the verb classes and tree types by
providing a graphical indication of which tree types are allowed in which verb classes. This has
been cross-indexed to tree ﬁgures shown in the tech report. Chapter 6 contains an overview
of all of the verb classes in the XTAG grammar. The rest of Part 2 contains more details on
several of the more interesting verb classes, including ergatives, sentential subjects, sentential
complements, small classes, ditransitives, and it-clefts.
Part 3 contains information on some of the tree types that are available within the verb
classes. These tree types correspond to what would be transformations in a movement based
approach. Not all of these types of trees are contained in all of the verb classes. The table
(previously mentioned) in Part 2 contains a list of the tree types and indicates which verb
classes each occurs in.
Part 4 focuses on the non-verb class trees in the grammar.
NP’s and determiners are
presented in Chapter 18, while the various modiﬁer trees are presented in Chapter 19. Auxiliary
verbs, which are classed separate from the verb classes, are presented in Chapter 20, while
certain types of conjunction are shown in Chapter 21. The XTAG treatment of comparatives
is presented in Chapter 22, and our treatment of punctuation is discussed in Chapter 23.
Throughout the technical report, mention is occasionally made of changes or analyses that
we hope to incorporate in the future.
Appendix A details a list of these and other future
work.
The appendices also contain information on some of the nitty gritty details of the
3

4
CHAPTER 1. GETTING AROUND
XTAG grammar, including a system of metarules which can be used for grammar development
and maintenance in Appendix B, a system for the organization of the grammar in terms of
an inheritance hierarchy is in Appendix C, the tree naming conventions used in XTAG are
explained in detail in Appendix D, and a comprehensive list of the features used in the grammar
is given in Appendix E. Appendix F contains an evaluation of the XTAG grammar, including
comparisons with other wide coverage grammars.

Chapter 2
Feature-Based, Lexicalized Tree
Adjoining Grammars
The English grammar described in this report is based on the TAG formalism ([Joshi et
al., 1975]), which has been extended to include lexicalization ([Schabes et al., 1988]), and
uniﬁcation-based feature structures ([Vijay-Shanker and Joshi, 1991]).
Tree Adjoining Lan-
guages (TALs) fall into the class of mildly context-sensitive languages, and as such are more
powerful than context free languages. The TAG formalism in general, and lexicalized TAGs
in particular, are well-suited for linguistic applications. As ﬁrst shown by [Joshi, 1985] and
[Kroch and Joshi, 1987], the properties of TAGs permit us to encapsulate diverse syntactic
phenomena in a very natural way. For example, TAG’s extended domain of locality and its
factoring of recursion from local dependencies lead, among other things, to a localization of
so-called unbounded dependencies.
2.1
TAG formalism
The primitive elements of the standard TAG formalism are known as elementary trees. Ele-
mentary trees are of two types: initial trees and auxiliary trees (see Figure 2.1). In describing
natural language, initial trees are minimal linguistic structures that contain no recursion,
i.e. trees containing the phrasal structure of simple sentences, NP’s, PP’s, and so forth. Initial
trees are characterized by the following: 1) all internal nodes are labeled by non-terminals, 2)
all leaf nodes are labeled by terminals, or by non-terminal nodes marked for substitution. An
initial tree is called an X-type initial tree if its root is labeled with type X.
Recursive structures are represented by auxiliary trees, which represent constituents that
are adjuncts to basic structures (e.g. adverbials). Auxiliary trees are characterized as follows:
1) all internal nodes are labeled by non-terminals, 2) all leaf nodes are labeled by terminals,
or by non-terminal nodes marked for substitution, except for exactly one non-terminal node,
called the foot node, which can only be used to adjoin the tree to another node1, 3) the foot
node has the same label as the root node of the tree.
1A null adjunction constraint (NA) is systematically put on the foot node of an auxiliary tree. This disallows
adjunction of a tree onto the foot node itself.
5

6
CHAPTER 2. FEATURE-BASED, LEXICALIZED TREE ADJOINING GRAMMARS
X
X
X
Initial Tree:
Auxiliary Tree:
Figure 2.1: Elementary trees in TAG
There are two operations deﬁned in the TAG formalism, substitution2 and adjunction. In
the substitution operation, the root node on an initial tree is merged into a non-terminal leaf
node marked for substitution in another initial tree, producing a new tree. The root node and
the substitution node must have the same name. Figure 2.2 shows two initial trees and the tree
resulting from the substitution of one tree into the other.
2
2
Y
Y
X
=>
1
X
Y
Figure 2.2: Substitution in TAG
In an adjunction operation, an auxiliary tree is grafted onto a non-terminal node anywhere
in an initial tree. The root and foot nodes of the auxiliary tree must match the node at which
the auxiliary tree adjoins. Figure 2.3 shows an auxiliary tree and an initial tree, and the tree
resulting from an adjunction operation.
A TAG G is a collection of ﬁnite initial trees, I, and auxiliary trees, A. The tree set of
a TAG G, T (G) is deﬁned to be the set of all derived trees starting from S-type initial trees
in I whose frontier consists of terminal nodes (all substitution nodes having been ﬁlled). The
string language generated by a TAG, L(G), is deﬁned to be the set of all terminal strings
on the frontier of the trees in T (G).
2Technically, substitution is a specialized version of adjunction, but it is useful to make a distinction between
the two.

2.2. LEXICALIZATION
7
3
X
2
2
Y
Y
Y
Y
3
1
X
Y
=>
Figure 2.3: Adjunction in TAG
2.2
Lexicalization
‘Lexicalized’ grammars systematically associate each elementary structure with a lexical anchor.
This means that in each structure there is a lexical item that is realized. It does not mean simply
adding feature structures (such as head) and uniﬁcation equations to the rules of the formalism.
These resultant elementary structures specify extended domains of locality (as compared to
CFGs) over which constraints can be stated.
Following [Schabes et al., 1988] we say that a grammar is lexicalized if it consists of 1)
a ﬁnite set of structures each associated with a lexical item, and 2) an operation or operations
for composing the structures. Each lexical item will be called the anchor of the corresponding
structure, which deﬁnes the domain of locality over which constraints are speciﬁed. Note then,
that constraints are local with respect to their anchor.
Not every grammar is in a lexicalized form.3 In the process of lexicalizing a grammar, the
lexicalized grammar is required to be strongly equivalent to the original grammar, i.e. it must
produce not only the same language, but the same structures or tree set as well.
NP
N
John
Sr
NP0↓
VP
V
walked
VPr
VP*
NA
PP
P
to
NP↓
NP
N
Philadelphia
(a)
(b)
(c)
(d)
Figure 2.4: Lexicalized Elementary trees
3Notice the similarity of the deﬁnition of a lexicalized grammar with the oﬀline parsability constraint ([Kaplan
and Bresnan, 1983]). As consequences of our deﬁnition, each structure has at least one lexical item (its anchor)
attached to it and all sentences are ﬁnitely ambiguous.

8
CHAPTER 2. FEATURE-BASED, LEXICALIZED TREE ADJOINING GRAMMARS
In Figure 2.4, which shows sample initial and auxiliary trees, substitution sites are marked
by a ↓, and foot nodes are marked by an ∗. This notation is standard and is followed in the
rest of this report.
2.3
Uniﬁcation-based features
In a uniﬁcation framework, a feature structure is associated with each node in an elementary
tree.
This feature structure contains information about how the node interacts with other
nodes in the tree. It consists of a top part, which generally contains information relating to the
supernode, and a bottom part, which generally contains information relating to the subnode.
Substitution nodes, however, have only the top features, since the tree substituting in logically
carries the bottom features.
Y
tr
br
X
Y
t U tr
br
X
Y
t =>
Figure 2.5: Substitution in FB-LTAG
The notions of substitution and adjunction must be augmented to ﬁt within this new frame-
work. The feature structure of a new node created by substitution inherits the union of the
features of the original nodes. The top feature of the new node is the union of the top features
of the two original nodes, while the bottom feature of the new node is simply the bottom feature
of the top node of the substituting tree (since the substitution node has no bottom feature).
Figure 2.54 shows this more clearly.
Adjunction is only slightly more complicated. The node being adjoined into splits, and its
top feature uniﬁes with the top feature of the root adjoining node, while its bottom feature uni-
ﬁes with the bottom feature of the foot adjoining node. Again, this is easier shown graphically,
as in Figure 2.65.
The embedding of the TAG formalism in a uniﬁcation framework allows us to dynamically
specify local constraints that would have otherwise had to have been made statically within
the trees. Constraints that verbs make on their complements, for instance, can be implemented
through the feature structures. The notions of Obligatory and Selective Adjunction, crucial
4abbreviations in the ﬁgure: t=top feature structure, tr=top feature structure of the root, br=bottom feature
structure of the root, U=uniﬁcation
5abbreviations in the ﬁgure: t=top feature structure, b=bottom feature structure, tr=top feature structure
of the root, br=bottom feature structure of the root, tf=top feature structure of the foot, bf=bottom feature
structure of the foot, U=uniﬁcation

2.3. UNIFICATION-BASED FEATURES
9
X
>
t
Y
b
Y
Y*
br
tf
bf
tr
X
t U tr
b U bf
tf
br
Y
Y
Figure 2.6: Adjunction in FB-LTAG
to the formation of lexicalized grammars, can also be handled through the use of features.6
Perhaps more important to developing a grammar, though, is that the trees can serve as a
schemata to be instantiated with lexical-speciﬁc features when an anchor is associated with the
tree. To illustrate this, Figure 2.7 shows the same tree lexicalized with two diﬀerent verbs, each
of which instantiates the features of the tree according to its lexical selectional restrictions.
In Figure 2.7, the lexical item thinks takes an indicative sentential complement, as in the
sentence John thinks that Mary loves Sally. Want takes a sentential complement as well, but an
inﬁnitive one, as in John wants to love Mary. This distinction is easily captured in the features
and passed to other nodes to constrain which trees this tree can adjoin into, both cutting down
the number of separate trees needed and enforcing conceptual Selective Adjunctions (SA).
6The remaining constraint, Null Adjunction (NA), must still be speciﬁed directly on a node.

10
CHAPTER 2. FEATURE-BASED, LEXICALIZED TREE ADJOINING GRAMMARS
Sr assign-comp : inf_nil/ind_nil
displ-const :
set1 : -
tense : <1>
assign-case : <2>
agr : <3>
assign-comp : <4>
mode : <5>
inv : -
comp : nil
displ-const :
set1 : <6>
wh : <7> -
extracted : -
NP0↓case : <2>
agr : <3>
wh : <7>
VP assign-case : <2>
agr : <3>
tense : <1>
assign-comp : <4>
mode : <5>
displ-const :
set1 : <6>
mainv : <8>
tense : <9>
mode : <10>
assign-comp : <11>
assign-case : <12>
agr : <13>
passive : <14> -
displ-const :
set1 : -
V mainv : <8>
tense : <9>
mode : <10>
assign-comp : <11>
assign-case : <12>
agr : <13>
passive : <14>
mode : ind
tense : pres
mainv : -
assign-comp : ind_nil/that/rel/if/whether
assign-case : nom
agr :
3rdsing : +
num : sing
pers : 3
thinks
S1*
displ-const :
set1 : -
assign-comp : inf_nil/ind_nil
inv : -
comp : that/whether/if/nil
mode : ind/sbjnct
Sr assign-comp : inf_nil/ind_nil
displ-const :
set1 : -
tense : <1>
assign-case : <2>
agr : <3>
assign-comp : <4>
mode : <5>
inv : -
comp : nil
displ-const :
set1 : <6>
wh : <7> -
extracted : -
NP0↓case : <2>
agr : <3>
wh : <7>
VP assign-case : <2>
agr : <3>
tense : <1>
assign-comp : <4>
mode : <5>
displ-const :
set1 : <6>
mainv : <8>
tense : <9>
mode : <10>
assign-comp : <11>
assign-case : <12>
agr : <13>
passive : <14> -
displ-const :
set1 : -
V mainv : <8>
tense : <9>
mode : <10>
assign-comp : <11>
assign-case : <12>
agr : <13>
passive : <14>
mode : ind
tense : pres
mainv : -
assign-comp : ind_nil/that/rel/if/whether
assign-case : nom
agr :
3rdsing : +
num : sing
pers : 3
wants
S1*
displ-const :
set1 : -
assign-comp : inf_nil/ind_nil
inv : -
comp : whether/for/nil
mode : inf
think tree
want tree
Figure 2.7: Lexicalized Elementary Trees with Features

Chapter 3
Overview of the XTAG System
This section focuses on the various components that comprise the parser and English grammar
in the XTAG system. Persons interested only in the linguistic analyses in the grammar may
skip this section without loss of continuity, although a quick glance at the tagset used in XTAG
and the set of non-terminal labels used will be useful. We may occasionally refer back to the
various components mentioned in this section.
3.1
System Description
Figure 3.1 shows the overall ﬂow of the system when parsing a sentence; a summary of each
component is presented in Table 3.1. At the heart of the system is a parser for lexicalized
TAGs ([Schabes and Joshi, 1988; Schabes, 1990]) which produces all legitimate parses for the
sentence. The parser has two phases: Tree Selection and Tree Grafting.
3.1.1
Tree Selection
Since we are working with lexicalized TAGs, each word in the sentence selects at least one
tree. The advantage of a lexicalized formalism like LTAGs is that rather than parsing with all
the trees in the grammar, we can parse with only the trees selected by the words in the input
sentence.
In the XTAG system, the selection of trees by the words is done in several steps. Each
step attempts to reduce ambiguity, i.e. reduce the number of trees selected by the words in the
sentence.
Morphological Analysis and POS Tagging The input sentence is ﬁrst submitted to the
Morphological Analyzer and the Tagger. The morphological analyzer ([Karp et al.,
1992]) consists of a disk-based database (a compiled version of the derivational rules)
which is used to map an inﬂected word into its stem, part of speech and feature equations
corresponding to inﬂectional information. These features are inserted at the anchor node
of the tree eventually selected by the stem. The POS Tagger can be disabled in which
case only information from the morphological analyzer is used. The morphology data
was originally extracted from the Collins English Dictionary ([Hanks, 1979]) and Oxford
11

12
CHAPTER 3. OVERVIEW OF THE XTAG SYSTEM
Derivation Structure
Input Sentence
Morph Analyzer
Parser
Morph DB
Tree Grafting
Tree Selection
Syn DB
Trees DB
Stat DB
P.O.S Blender
Tagger
Lex Prob DB
Figure 3.1: Overview of XTAG system
Advanced Learner’s Dictionary ([Hornby, 1974]) available through ACL-DCI ([Liberman,
1989]), and then cleaned up and augmented by hand ([Karp et al., 1992]).
POS Blender The output from the morphological analyzer and the POS tagger go into the
POS Blender which uses the output of the POS tagger as a ﬁlter on the output of the
morphological analyzer. Any words that are not found in the morphological database are
assigned the POS given by the tagger.
Syntactic Database The syntactic database contains the mapping between particular stem(s)
and the tree templates or tree-families stored in the Tree Database (see Table 3.1). The
syntactic database also contains a list of feature equations that capture lexical idiosyn-
crasies. The output of the POS Blender is used to search the Syntactic Database to
produce a set of lexicalized trees with the feature equations associated with the word(s)
in the syntactic database uniﬁed with the feature equations associated with the trees.
Note that the features in the syntactic database can be assigned to any node in the tree
and not just to the anchor node. The syntactic database entries were originally extracted
from the Oxford Advanced Learner’s Dictionary ([Hornby, 1974]) and Oxford Dictionary
for Contemporary Idiomatic English ([Cowie and Mackin, 1975]) available through ACL-
DCI ([Liberman, 1989]), and then modiﬁed and augmented by hand ([Egedi and Martin,
1994]). There are more than 31,000 syntactic database entries.1 Selected entries from
this database are shown in Table 3.2.
Default Assignment For words that are not found in the syntactic database, default trees
and tree-families are assigned based on their POS tag.
Filters Some of the lexicalized trees chosen in previous stages can be eliminated in order to
1This number does not include trees assigned by default based on the part-of-speech of the word.

3.1. SYSTEM DESCRIPTION
13
Component
Details
Morphological
Consists of approximately 317,000 inﬂected items
Analyzer and
derived from over 90000 stems.
Morph Database
Entries are indexed on the inﬂected form and return
the root form, POS, and inﬂectional information.
POS Tagger
Wall Street Journal-trained trigram tagger ([Church, 1988])
and Lex Prob
extended to output N-best POS sequences
Database
([Soong and Huang, 1990]). Decreases the time to parse
a sentence by an average of 93%.
Syntactic
More than 30,000 entries.
Database
Each entry consists of: the uninﬂected form of the word,
its POS, the list of trees or tree-families associated with
the word, and a list of feature equations that capture
lexical idiosyncrasies.
Tree Database
1094 trees, divided into 52 tree families and 218 individual
trees. Tree families represent subcategorization frames;
the trees in a tree family would be related to each other
transformationally in a movement-based approach.
X-Interface
Menu-based facility for creating and modifying tree ﬁles.
User controlled parser parameters: parser’s start category,
enable/disable/retry on failure for POS tagger.
Storage/retrieval facilities for elementary and parsed trees.
Graphical displays of tree and feature data structures.
Hand combination of trees by adjunction or substitution
for grammar development.
Ability to manually assign POS tag
and/or Supertag before parsing
Table 3.1: System Summary
reduce ambiguity. Two methods are currently used: structural ﬁlters which eliminate
trees which have impossible spans over the input sentence and a statistical ﬁlter based on
unigram probabilities of non-lexicalized trees (from a hand corrected set of approximately
6000 parsed sentences). These methods speed the runtime by approximately 87%.
Supertagging Before parsing, one can avail of an optional step of supertagging the sentence.
This step uses statistical disambiguation to assign a unique elementary tree (or supertag)
to each word in the sentence.
These assignments can then be hand-corrected. These
supertags are used as a ﬁlter on the tree assignments made so far. More information on
supertagging can be found in ([Srinivas, 1997a; Srinivas, 1997b]).
3.1.2
Tree Database
The Tree Database contains the tree templates that are lexicalized by following the various
steps given above. The lexical items are inserted into distinguished nodes in the tree template
called the anchor nodes. The part of speech of each word in the sentence corresponds to the
label of the anchor node of the trees. Hence the tagset used by the POS Tagger corresponds
exactly to the labels of the anchor nodes in the trees. The tagset used in the XTAG system is

14
CHAPTER 3. OVERVIEW OF THE XTAG SYSTEM
<<INDEX>>porousness<<ENTRY>>porousness<<POS>>N
<<TREES>>^BNXN ^BN ^CNn
<<FEATURES>>#N_card- #N_const- #N_decreas- #N_definite- #N_gen-
#N_quan- #N_refl-
<<INDEX>>coo<<ENTRY>>coo<<POS>>V<<FAMILY>>Tnx0V
<<INDEX>>engross<<ENTRY>>engross<<POS>>V<<FAMILY>>Tnx0Vnx1
<<FEATURES>>#TRANS+
<<INDEX>>forbear<<ENTRY>>forbear<<POS>>V<<FAMILY>>Tnx0Vs1
<<FEATURES>>#S1_WH- #S1_inf_for_nil
<<INDEX>>have<<ENTRY>>have<<POS>>V<<ENTRY>>out<<POS>>PL
<<FAMILY>>Tnx0Vplnx1
Table 3.2: Example Syntactic Database Entries.
given in Table 3.3. The tree templates are subdivided into tree families (for verbs and other
predicates), and tree ﬁles which are simply collections of trees for lexical items like prepositions,
determiners, etc2.
3.1.3
Tree Grafting
Once a particular set of lexicalized trees for the sentence have been selected, XTAG uses an
Earley-style predictive left-to-right parsing algorithm for LTAGs ([Schabes and Joshi, 1988;
Schabes, 1990]) to ﬁnd all derivations for the sentence. The derivation trees and the associated
derived trees can be viewed using the X-interface (see Table 3.1). The X-interface can also be
used to save particular derivations to disk.
The output of the parser for the sentence I had a map yesterday is illustrated in Figure 3.2.
The parse tree3 represents the surface constituent structure, while the derivation tree represents
the derivation history of the parse. The nodes of the derivation tree are the tree names anchored
by the lexical items4. The composition operation is indicated by the nature of the arcs: a dashed
line is used for substitution and a bold line for adjunction. The number beside each tree name
is the address of the node at which the operation took place. The derivation tree can also be
interpreted as a dependency graph with unlabeled arcs between words of the sentence.
2 The nonterminals in the tree database are A, AP, Ad, AdvP, Comp, Conj, D, N, NP, P, PP, Punct, S,
V, VP.
3The feature structures associated with each note of the parse tree are not shown here.
4Appendix D explains the conventions used in naming the trees.

3.1. SYSTEM DESCRIPTION
15
Sr
NP
N
I
VPr
VP
NA
V
had
NPr
D
a
NPf
NA
N
map
PP
P
on
NPr
D
my
NPf
NA
N
desk
αnx0Vnx1[had]
αNXN[I] (1)
βvxPnx[on] (2)
αNXN[desk] (2.2)
βDnx[my] (0)
αNXN[map] (2.2)
βDnx[a] (0)
Parse Tree
Derivation Tree
Figure 3.2: Output Structures from the Parser
Part of Speech
Description
A
Adjective
Ad
Adverb
Comp
Complementizer
D
Determiner
G
Genitive Noun
I
Interjection
N
Noun
P
Preposition
PL
Particle
Punct
Punctuation
V
Verb
Table 3.3: XTAG tagset
3.1.4
The Grammar Development Environment
Working with and developing a large grammar is a challenging process, and the importance of
having good visualization tools cannot be over-emphasized. Currently the XTAG system has
X-windows based tools for viewing and updating the morphological and syntactic databases
([Karp et al., 1992; Egedi and Martin, 1994]). These are available in both ASCII and binary-
encoded database format. The ASCII format is well-suited for various UNIX utilities (awk,
sed, grep) while the database format is used for fast access during program execution. However
even the ASCII formatted representation is not well-suited for human readability.
An X-
windows interface for the databases allows users to easily examine them. Searching for speciﬁc
information on certain ﬁelds of the syntactic database is also available. Also, the interface allows
a user to insert, delete and update any information in the databases. Figure 3.3(a) shows the

16
CHAPTER 3. OVERVIEW OF THE XTAG SYSTEM
interface for the morphology database and Figure 3.3(b) shows the interface for the syntactic
database.
(a) Morphology database
(b) Syntactic database
Figure 3.3: Interfaces to the database maintenance tools
XTAG also has a parsing and grammar development interface ([Paroubek et al., 1992]). This
interface includes a tree editor, the ability to vary parameters in the parser, work with multiple
grammars and/or parsers, and use metarules for more eﬃcient tree editing and construction
([Becker, 1994]). The interface is shown in Figure 3.4. It has the following features:
• Menu-based facility for creating and modifying tree ﬁles and loading grammar ﬁles.
• User controlled parser parameters, including the root category (main S, embedded S, NP,
etc.), and the use of the tagger (on/oﬀ/retry on failure).
• Storage/retrieval facilities for elementary and parsed trees.
• The production of postscript ﬁles corresponding to elementary and parsed trees.
• Graphical displays of tree and feature data structures, including a scroll ‘web’ for large
tree structures.
• Mouse-based tree editor for creating and modifying trees and feature structures.
• Hand combination of trees by adjunction or substitution for use in diagnosing grammar
problems.
• Metarule tool for automatic aid to the generation of trees by using tree-based transfor-
mation rules

3.2. COMPUTER PLATFORM
17
Figure 3.4: Interface to the XTAG system
3.2
Computer Platform
XTAG was developed on the Sun SPARC station series. It has been tested on various Sun
platforms including Ultra-1, Ultra-Enterprise. XTAG is freely available from the XTAG web
page at http://www.cis.upenn.edu/~xtag/. It requires 75 MB of disk space (once all binaries
and databases are created after the install). XTAG requires the following software to run:
• A machine running UNIX and X11R4 (or higher). Previous releases of X will not work.
X11R4 is free software which usually comes bundled with your OS. It is also freely available
for various platforms at http://www.xfree86.org/
• A Common Lisp compiler which supports the latest deﬁnition of Common Lisp (Steele’s
Common Lisp, second edition). XTAG has been tested on Lucid Common Lisp/SPARC
Solaris, Version: 4.2.1. Allegro CL is no longer directly supported, however there have
been third party ports to recent versions of Allegro CL.
• CLX version 4 or higher. CLX is the Lisp equivalent to the Xlib package written in C.
• Mark Kantrowitz’s Lisp Utilities from CMU: logical-pathnames and defsystem.
A patched version of CLX (Version 5.02) for SunOS 5.5.1 and the CMU Lisp Utilities are
provided in our ftp directory for your convenience.
However, we ask that you refer to the
appropriate sources for updates.
The morphology database component ([Karp et al., 1992]), no longer under licensing re-
strictions, is available as a separate download from the XTAG web page (see above for URL).
The syntactic database component is also available as part of the XTAG system ([Egedi
and Martin, 1994]).

18
CHAPTER 3. OVERVIEW OF THE XTAG SYSTEM
More information can be obtained on the XTAG web page at
http://www.cis.upenn.edu/~xtag/.

Chapter 4
Underview
The morphology, syntactic, and tree databases together comprise the English grammar.
A
lexical item that is not in the databases receives a default tree selection and features for its
part of speech and morphology. In designing the grammar, a decision was made early on to
err on the side of acceptance whenever there are conﬂicting opinions as to whether or not a
construction is grammatical. In this sense, the XTAG English grammar is intended to function
primarily as an acceptor rather than a generator of English sentences. The range of syntactic
phenomena that can be handled is large and includes auxiliaries (including inversion), cop-
ula, raising and small clause constructions, topicalization, relative clauses, inﬁnitives, gerunds,
passives, adjuncts, it-clefts, wh-clefts, PRO constructions, noun-noun modiﬁcations, extrapo-
sition, determiner sequences, genitives, negation, noun-verb contractions, clausal adjuncts and
imperatives.
4.1
Subcategorization Frames
Elementary trees for non-auxiliary verbs are used to represent the linguistic notion of subcate-
gorization frames. The anchor of the elementary tree subcategorizes for the other elements that
appear in the tree, forming a clausal or sentential structure. Tree families group together trees
belonging to the same subcategorization frame. Consider the following uses of the verb buy:
(1) Srini bought a book.
(2) Srini bought Beth a book.
In sentence (1), the verb buy subcategorizes for a direct object NP. The elementary tree
anchored by buy is shown in Figure 4.1(a) and includes nodes for the NP complement of buy and
for the NP subject. In addition to this declarative tree structure, the tree family also contains
the trees that would be related to each other transformationally in a movement based approach,
i.e passivization, imperatives, wh-questions, relative clauses, and so forth. Sentence (2) shows
that buy also subcategorizes for a double NP object.
This means that buy also selects the
double NP object subcategorization frame, or tree family, with its own set of transformationally
related sentence structures. Figure 4.1(b) shows the declarative structure for this set of sentence
structures.
19

20
CHAPTER 4. UNDERVIEW
Sr
NP0↓
VP
V
bought
NP1↓
Sr
NP0↓
VP
V
bought
NP1↓
NP2↓
(a)
(b)
Figure 4.1: Diﬀerent subcategorization frames for the verb buy
4.2
Complements and Adjuncts
Complements and adjuncts have very diﬀerent structures in the XTAG grammar. Complements
are included in the elementary tree anchored by the verb that selects them, while adjuncts do
not originate in the same elementary tree as the verb anchoring the sentence, but are instead
added to a structure by adjunction. The contrasts between complements and adjuncts have been
extensively discussed in the linguistics literature and the classiﬁcation of a given element as one
or the other remains a matter of debate (see [Rizzi, 1990], [Larson, 1988], [Jackendoﬀ, 1990],
[Larson, 1990], [Cinque, 1990], [Obernauer, 1984], [Lasnik and Saito, 1984], and [Chomsky,
1986]). The guiding rule used in developing the XTAG grammar is whether or not the sentence
is ungrammatical without the questioned structure.1 Consider the following sentences:
(3) Srini bought a book.
(4) Srini bought a book at the bookstore.
(5) Srini arranged for a ride.
(6) ∗Srini arranged.
Prepositional phrases frequently occur as adjuncts, and when they are used as adjuncts
they have a tree structure such as that shown in Figure 4.2(a). This adjunction tree would
adjoin into the tree shown in Figure 4.1(a) to generate sentence (4). There are verbs, however,
such as arrange, hunger and diﬀerentiate, that take prepositional phrases as complements.
Sentences (5) and (6) clearly show that the prepositional phrase are not optional for arrange.
For these sentences, the prepositional phrase will be an initial tree (as shown in Figure 4.2(b))
that substitutes into an elementary tree, such as the one anchored by the verb arrange in
Figure 4.2(c).
1Iteration of a structure can also be used as a diagnostic: Srini bought a book at the bookstore on Walnut
Street for a friend.

4.3. NON-S CONSTITUENTS
21
VPr
VP*
PP
P
at
NP↓
PP
P
for
NP↓
Sr
NP0↓
VP
V
arranged
PP ↓
(a)
(b)
(c)
Figure 4.2: Trees illustrating the diﬀerence between Complements and Adjuncts
Virtually all parts of speech, except for main verbs, function as both complements and
adjuncts in the grammar.
More information is available in this report on various parts of
speech as complements: adjectives (e.g. section 6.13), nouns (e.g. section 6.2), and prepositions
(e.g. section 6.10); and as adjuncts: adjectives (section 19.1), adverbs (section 19.5), nouns
(section 19.2), and prepositions (section 19.4).
4.3
Non-S constituents
Although sentential trees are generally considered to be special cases in any grammar, insofar
as they make up a ‘starting category’, it is the case that any initial tree constitutes a phrasal
constituent. These initial trees may have substitution nodes that need to be ﬁlled (by other
initial trees), and may be modiﬁed by adjunct trees, exactly as the trees rooted in S. Although
grouping is possible according to the heads or anchors of these trees, we have not found any
classiﬁcation similar to the subcategorization frames for verbs that can be used by a lexical
entry to ‘group select’ a set of trees. These trees are selected one by one by each lexical item,
according to each lexical item’s idiosyncrasies. The grammar described by this technical report
places them into several ﬁles for ease of use, but these ﬁles do not constitute tree families in
the way that the subcategorization frames do.
4.4
Case Assignment
4.4.1
Approaches to Case
4.4.1.1
Case in GB theory
GB (Government and Binding) theory proposes the following ‘case ﬁlter’ as a requirement on
S-structure.2
Case Filter Every overt NP must be assigned abstract case. [Haegeman, 1991]
2There are certain problems with applying the case ﬁlter as a requirement at the level of S-structure. These
issues are not crucial to the discussion of the English XTAG implementation of case and so will not be discussed
here. Interested readers are referred to [Lasnik and Uriagereka, 1988].

22
CHAPTER 4. UNDERVIEW
Abstract case is taken to be universal. Languages with rich morphological case marking,
such as Latin, and languages with very limited morphological case marking, like English, are all
presumed to have full systems of abstract case that diﬀer only in the extent of morphological
realization.
In GB, abstract case is argued to be assigned to NP’s by various case assigners, namely
verbs, prepositions, and INFL. Verbs and prepositions are said to assign accusative case to NP’s
that they govern, and INFL assigns nominative case to NP’s that it governs. These governing
categories are constrained as to where they can assign case by means of ‘barriers’ based on
‘minimality conditions’, although these are relaxed in ‘exceptional case marking’ situations.
The details of the GB analysis are beyond the scope of this technical report, but see [Chomsky,
1986] for the original analysis or [Haegeman, 1991] for an overview. Let it suﬃce for us to say
that the notion of abstract case and the case ﬁlter are useful in accounting for a number of
phenomena including the distribution of nominative and accusative case, and the distribution
of overt NP’s and empty categories (such as PRO).
4.4.1.2
Minimalism and Case
A major conceptual diﬀerence between GB theories and Minimalism is that in Minimalism,
lexical items carry their features with them rather than being assigned their features based on
the nodes that they end up at. For nouns, this means that they carry case with them, and that
their case is ‘checked’ when they are in SPEC position of AGRs or AGRo, which subsequently
disappears [Chomsky, 1992].
4.4.2
Case in XTAG
The English XTAG grammar adopts the notion of case and the case ﬁlter for many of the same
reasons argued in the GB literature. However, in some respects the English XTAG grammar’s
implementation of case more closely resembles the treatment in Chomsky’s Minimalism frame-
work [Chomsky, 1992] than the system outlined in the GB literature [Chomsky, 1986]. As in
Minimalism, nouns in the XTAG grammar carry case with them, which is eventually ‘checked’.
However in the XTAG grammar, noun cases are checked against the case values assigned by
the verb during the uniﬁcation of the feature structures. Unlike Chomsky’s Minimalism, there
are no separate AGR nodes; the case checking comes from the verbs directly. Case assignment
from the verb is more like the GB approach than the requirement of a SPEC-head relationship
in Minimalism.
Most nouns in English do not have separate forms for nominative and accusative case, and
so they are ambiguous between the two. Pronouns, of course, are morphologically marked for
case, and each carries the appropriate case in its feature. Figures 4.3(a) and 4.3(b) show the NP
tree anchored by a noun and a pronoun, respectively, along with the feature values associated
with each word. Note that books simply gets the default case nom/acc, while she restricts the
case to be nom.
4.4.3
Case Assigners

4.4. CASE ASSIGNMENT
23
NP
pron : <1>
wh : <2>
case : <3> nom/acc
agr : <4>
N pron : <1>
wh : <2>
case : <3>
agr : <4>
agr : 3rdsing : -
num : plur
pers : 3
wh : -
books
NP
pron : <1>
wh : <2> -
case : <3> nom/acc
agr : <4>
N agr : <4>
case : <3>
pron : <1>
wh : <2>
pron : +
refl : -
case : nom
poss : -
agr : gen : fem
3rdsing : +
num : sing
pers : 3
she
(a)
(b)
Figure 4.3: Lexicalized NP trees with case markings
4.4.3.1
Prepositions
Case is assigned in the XTAG English grammar by two lexical categories - verbs and preposi-
tions.3 Prepositions assign accusative case (acc) through their <assign-case> feature, which
is linked directly to the <case> feature of their objects.
Figure 4.4(a) shows a lexicalized
preposition tree, while Figure 4.4(b) shows the same tree with the NP tree from Figure 4.3(a)
substituted into the NP position. Figure 4.4(c) is the tree in Figure 4.4(b) after uniﬁcation has
taken place. Note that the case ambiguity of books has been resolved to accusative case.
4.4.3.2
Verbs
Verbs are the other part of speech in the XTAG grammar that can assign case. Because XTAG
does not distinguish INFL and VP nodes, verbs must provide case assignment on the subject
position in addition to the case assigned to their NP complements.
Assigning case to NP complements is handled by building the case values of the complements
directly into the tree that the case assigner (the verb) anchors. Figures 4.5(a) and 4.5(b) show
an S tree4 that would be anchored5 by a transitive and ditransitive verb, respectively. Note
that the case assignments for the NP complements are already in the tree, even though there
is not yet a lexical item anchoring the tree. Since every verb that selects these trees (and other
trees in each respective subcategorization frame) assigns the same case to the complements,
3For also assigns case as a complementizer. See section 8.5 for more details.
4Features not pertaining to this discussion have been taken out to improve readability and to make the trees
easier to ﬁt onto the page.
5The diamond marker (⋄) indicates the anchor(s) of a structure if the tree has not yet been lexicalized.

24
CHAPTER 4. UNDERVIEW
PP
assign-case : <1>
wh : <2>
P assign-case : <1>
assign-case : acc
of
NP↓case : <1>
wh : <2>
PP
assign-case : <5>
wh : <6>
P assign-case : <5>
assign-case : acc
of
NP case : <5>
wh : <6>
pron : <1>
wh : <2>
case : <3>
agr : <4>
N pron : <1>
wh : <2>
case : <3> nom/acc
agr : <4>
agr :
3rdsing : -
num : plur
pers : 3
wh : -
books
PP assign-case : <1> acc
wh : <2> -
P assign-case : <1>
of
NP agr : <3> 3rdsing : -
num : plur
pers : 3
pron : <4>
case : <1>
wh : <2>
N pron : <4>
wh : <2>
case : <1>
agr : <3>
books
(a)
(b)
(c)
Figure 4.4: Assigning case in prepositional phrases
building case features into the tree has exactly the same result as putting the case feature value
in each verb’s lexical entry.
Sr
assign-case : <3>
agr : <4>
NP0↓wh : -
case : <3>
agr : <4>
VP assign-case : <3>
agr : <4>
assign-case : <1>
agr : <2>
V◊assign-case : <1>
agr : <2>
NP1↓case : acc
Sr
assign-case : <3>
agr : <4>
NP0↓wh : -
case : <3>
agr : <4>
VP assign-case : <3>
agr : <4>
assign-case : <1>
agr : <2>
V◊assign-case : <1>
agr : <2>
NP1↓case : acc
NP2↓case : acc
(a)
(b)
Figure 4.5: Case assignment to NP arguments
The case assigned to the subject position varies with verb form. Since the XTAG grammar
treats the inﬂected verb as a single unit rather than dividing it into INFL and V nodes, case,
along with tense and agreement, is expressed in the features of verbs, and must be passed in the
appropriate manner. The trees in Figure 4.6 show the path of linkages that joins the <assign-
case> feature of the V to the <case> feature of the subject NP. The morphological form of

4.4. CASE ASSIGNMENT
25
the verb determines the value of the <assign-case> feature. Figures 4.6(a) and 4.6(b) show
the same tree6 anchored by diﬀerent morphological forms of the verb sing, which give diﬀerent
values for the <assign-case> feature.
Sr
assign-case : <3>
agr : <4>
NP0↓wh : -
case : <3>
agr : <4>
VP assign-case : <3>
agr : <4>
assign-case : <1>
agr : <2>
V assign-case : <1>
agr : <2>
agr :
pers : 3
num : sing
3rdsing : +
assign-case : nom
mode : ind
sings
NP1↓case : acc
Sr
assign-case : <3>
agr : <4>
NP0↓wh : -
case : <3>
agr : <4>
VP assign-case : <3>
agr : <4>
assign-case : <1>
agr : <2>
V assign-case : <1>
agr : <2>
assign-case : none
mode : ger
singing
NP1↓case : acc
(a)
(b)
Figure 4.6: Assigning case according to verb form
The adjunction of an auxiliary verb onto the VP node breaks the <assign-case> link from
the main V, replacing it with a link from the auxiliary verb instead.7 The progressive form of
the verb in Figure 4.6(b) has the feature-value <assign-case>=none, but this is overridden
by the adjunction of the appropriate form of the auxiliary word be. Figure 4.7(a) shows the
lexicalized auxiliary tree, while Figure 4.7(b) shows it adjoined into the transitive tree shown
in Figure 4.6(b). The case value passed to the subject NP is now nom (nominative).
4.4.4
PRO in a uniﬁcation based framework
Tensed forms of a verb assign nominative case, and untensed forms assign case none, as the
progressive form of the verb sing does in Figure 4.6(b). This is diﬀerent than assigning no case
at all, as one form of the inﬁnitive marker to does. See Section 8.5 for more discussion of this
special case.) The distinction of a case none from no case is indicative of a divergence from the
standard GB theory. In GB theory, the absence of case on an NP means that only PRO can
ﬁll that NP. With feature uniﬁcation as is used in the FB-LTAG grammar, the absence of case
on an NP means that any NP can ﬁll it, regardless of its case. This is due to the mechanism
of uniﬁcation, in which if something is unspeciﬁed, it can unify with anything. Thus we have
a speciﬁc case none to handle verb forms that in GB theory do not assign case. PRO is the
6Again, the feature structures shown have been restricted to those that pertain to the V/NP interaction.
7See section 20.1 for a more complete explanation of how this relinking occurs.

26
CHAPTER 4. UNDERVIEW
VPr
agr : <1>
assign-case : <2>
V agr : <1>
assign-case : <2>
agr :
pers : 3
num : sing
3rdsing : +
assign-case : nom
is
VP*
Sr
assign-case : <3>
agr : <4>
NP0↓wh : -
case : <3>
agr : <4>
VPr assign-case : <3>
agr : <4>
agr : <1>
assign-case : <2>
V agr : <1>
assign-case : <2>
agr :
pers : 3
num : sing
3rdsing : +
assign-case : nom
is
VP
assign-case : <5>
agr : <6>
V assign-case : <5>
agr : <6>
assign-case : none
mode : ger
singing
NP1↓case : acc
(a)
(b)
Figure 4.7: Proper case assignment with auxiliary verbs

4.4. CASE ASSIGNMENT
27
only NP with case none. Note that although we are drawn to this treatment by our use of
uniﬁcation for feature manipulation, our treatment is very similar to the assignment of null
case to PRO in [Chomsky and Lasnik, 1993]. [Watanabe, 1993] also proposes a very similar
approach within Chomsky’s Minimalist framework.8
8See Sections 8.1 and 8.9 for additional discussion of PRO.

Part II
Verb Classes
28


Chapter 5
Where to Find What
The two page table that follows gives an overview of what types of trees occur in various tree
families with pointers to discussion in this report. An entry in a cell of the table indicates that
the tree(s) for the construction named in the row header are included in the tree family named
in the column header. Entries are of two types. If the particular tree(s) are displayed and/or
discussed in this report the entry gives a page number reference to the relevant discussion or
ﬁgure.1 Otherwise, a √indicates inclusion in the tree family but no ﬁgure or discussion related
speciﬁcally to that tree in this report.
Blank cells indicate that there are no trees for the
construction named in the row header in the tree family named in the column header. Two
tables are given below. The ﬁrst one gives the expansion of abbreviations in the table headers.
The second table gives the name given to each tree family in the actual XTAG grammar. This
makes it easier to ﬁnd the description of each tree family in Chapter 6 and to compare the
description with the online XTAG grammar.
1Since Chapter 6 has a brief discussion and a declarative tree for every tree family, page references are given
only for other sections in which discussion or tree diagrams appear.
30

31
Abbreviation
Full Name
Sent. Subj. w. to
Sentential Subject with to PP complement
Pred. Mult-wd. ARB, P
Predicative Multi-word PP with Adv, Prep anchors
Pred. Mult-wd. A, P
Predicative Multi-word PP with Adj, Prep anchors
Pred. Mult-wd. N, P
Predicative Multi-word PP with Noun, Prep anchors
Pred. Mult-wd. P, P
Predicative Multi-word PP with two Prep anchors
Pred. Mult-wd. no int. mod.
Predicative Multi-word PP with no internal modiﬁcation
Pred. Sent. Subj., ARB, P
Predicative PP with Sentential Subject, and Adv, Prep anchors
Pred. Sent. Subj., A, P
Predicative PP with Sentential Subject, and Adj, Prep anchors
Pred. Sent. Subj., Conj, P
Predicative PP with Sentential Subject, and Conj, Prep anchors
Pred. Sent. Subj., N, P
Predicative PP with Sentential Subject, and Noun, Prep anchors
Pred. Sent. Subj., P, P
Predicative PP with Sentential Subject, and two Prep anchors
Pred. Sent. Subj., no int-mod
Predicative PP with Sentential Subject, no internal modiﬁcation
Pred. Locative
Predicative anchored by a Locative Adverb
Pred. A Sent. Subj., Comp.
Predicative Adjective with Sentential Subject and Complement
Sentential Comp. with NP
Sentential Complement with NP
Pred. Mult wd. V, P
Predicative Multi-word with Verb, Prep anchors
Adj. Sm. Cl. w. Sentential Subj.
Adjective Small Clause with Sentential Subject
NP Sm. Clause w. Sentential Subj.
NP Small Clause with Sentential Subject
PP Sm. Clause w. Sentential Subj.
PP Small Clause with Sentential Subject
NP Sm. Cl. w. Sent. Comp.
NP Small Clause with Sentential Complement
Adj. Sm. Cl. w. Sent. Comp.
Adjective Small Clause with Sentential Complement
Exhaustive PP Sm. Cl.
Exhaustive PP Small Clause
Ditrans. Light Verbs w. PP Shift
Ditransitive Light Verbs with PP Shift
Ditrans. Light Verbs w/o PP Shift
Ditransitive Light Verbs without PP Shift
Y/N question
Yes/No question
Wh-mov. NP complement
Wh-moved NP complement
Wh-mov. S comp.
Wh-moved S complement
Wh-mov. Adj comp.
Wh-moved Adjective complement
Wh-mov. object of a P
Wh-moved object of a P
Wh-mov. PP
Wh-moved PP
Topic. NP complement
Topicalized NP complement
Det. gerund
Determiner gerund
Rel. cl. on NP comp.
Relative clause on NP complement
Rel. cl. on PP comp.
Relative clause on PP complement
Rel. cl. on NP object of P
Relative clause on NP object of P
Pass. with wh-moved subj.
Passive with wh-moved subject (with and without by phrase)
Pass. w. wh-mov. ind. obj.
Passive with wh-moved indirect object (with and without by phrase)
Pass. w. wh-mov. obj. of the by phrase
Passive with wh-moved object of the by phrase
Pass. w. wh-mov. by phrase
Passive with wh-moved by phrase
Trans. Idiom with V, D and N
Transitive Idiom with Verb, Det and Noun anchors
Idiom with V, D, N
Idiom with V, D, and N anchors
Idiom with V, D, A, N
Idiom with V, D, A, and N anchors
Idiom with V, N
Idiom with V, and N anchor
Idiom with V, A, N
Idiom with V, A, and N anchors
Idiom with V, D, N, P
Idiom with V, D, N, and Prep anchors
Idiom with V, D, A, N, P
Idiom with V, D, A, N, and Prep anchors
Idiom with V, N, P
Idiom with V, N, and Prep anchors
Idiom with V, A, N, P
Idiom with V, A, N, and Prep anchors

32
CHAPTER 5. WHERE TO FIND WHAT
Full Name
XTAG Name
Intransitive Sentential Subject
Ts0V
Sentential Subject with ‘to’ complement
Ts0Vtonx1
PP Small Clause, with Adv and Prep anchors
Tnx0ARBPnx1
PP Small Clause, with Adj and Prep anchors
Tnx0APnx1
PP Small Clause, with Noun and Prep anchors
Tnx0NPnx1
PP Small Clause, with Prep anchors
Tnx0PPnx1
PP Small Clause, with Prep and Noun anchors
Tnx0PNaPnx1
PP Small Clause with Sentential Subject, and Adv and Prep anchors
Ts0ARBPnx1
PP Small Clause with Sentential Subject, and Adj and Prep anchors
Ts0APnx1
PP Small Clause with Sentential Subject, and Noun and Prep anchors
Ts0NPnx1
PP Small Clause with Sentential Subject, and Prep anchors
Ts0PPnx1
PP Small Clause with Sentential Subject, and Prep and Noun anchors
Ts0PNaPnx1
Exceptional Case Marking
TXnx0Vs1
Locative Small Clause with Ad anchor
Tnx0nx1ARB
Predicative Adjective with Sentential Subject and Complement
Ts0A1s1
Transitive
Tnx0Vnx1
Ditransitive with PP shift
Tnx0Vnx1tonx2
Ditransitive
Tnx0Vnx1nx2
Ditransitive with PP
Tnx0Vnx1pnx2
Sentential Complement with NP
Tnx0Vnx1s2
Intransitive Verb Particle
Tnx0Vpl
Transitive Verb Particle
Tnx0Vplnx1
Ditransitive Verb Particle
Tnx0Vplnx1nx2
Intransitive with PP
Tnx0Vpnx1
Sentential Complement
Tnx0Vs1
Light Verbs
Tnx0lVN1
Ditransitive Light Verbs with PP Shift
Tnx0lVN1Pnx2
Adjective Small Clause with Sentential Subject
Ts0Ax1
NP Small Clause with Sentential Subject
Ts0N1
PP Small Clause with Sentential Subject
Ts0Pnx1
Predicative Multi-word with Verb, Prep anchors
Tnx0VPnx1
Adverb It-Cleft
TItVad1s2
NP It-Cleft
TItVnx1s2
PP It-Cleft
TItVpnx1s2
Adjective Small Clause Tree
Tnx0Ax1
Adjective Small Clause with Sentential Complement
Tnx0A1s1
Equative BE
Tnx0BEnx1
NP Small Clause
Tnx0N1
NP with Sentential Complement Small Clause
Tnx0N1s1
PP Small Clause
Tnx0Pnx1
Exhaustive PP Small Clause
Tnx0Px1
Intransitive
Tnx0V
Intransitive with Adjective
Tnx0Vax1
Transitive Sentential Subject
Ts0Vnx1
Idiom with V, D and N
Tnx0VDN1
Idiom with V, D, A, and N anchors
Tnx0VDAN1
Idiom with V and N anchors
Tnx0VN1
Idiom with V, A, and N anchors
Tnx0VAN1
Idiom with V, D, N, and Prep anchors
Tnx0VDN1Pnx2
Idiom with V, D, A, N, and Prep anchors
Tnx0VDAN1Pnx2
Idiom with V, N, and Prep anchors
Tnx0VN1Pnx2
Idiom with V, A, N, and Prep anchors
Tnx0VAN1Pnx2

33
Tree families
Intransitive Sentential Subj
Sent. Subj. w. to
Pred. Mult-wd. ARB, P
Pred. Mult-wd. A, P
Pred. Mult-wd. N, P
Pred. Mult-wd. P, P
Pred. Mult-wd. no int. mod.
Pred. Sent. Subj., ARB, P
Pred. Sent. Subj., A, P
Pred. Sent. Subj., N, P
Pred. Sent. Subj., P, P
Pred. Sent. Subj., no int-mod
ECM
Pred. Locative
Pred. A Sent. Subj., Comp.
Constructions
Declarative
√
√
√
√
√
√
√
√
√
√
√
√
89
70
Passive w/ & w/o by phrase
91
Y/N quest.
Wh-moved subject
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
Wh-mov. NP complement, DO or IO
Wh-mov. S comp.
Wh-mov. Adj. or Adv. comp.
71
Wh-mov. object of a P
√
√
√
√
√
Wh-mov. PP
√
√
√
Topic. NP comp.
Imperative
√
√
√
√
√
Det. gerund
NP gerund
√
√
√
√
Ergative
Rel. cl. on subj. w/ NP
√
√
√
√
√
√
√
Rel. cl. on subj. w/ Comp
√
√
√
√
√
√
√
Rel. cl. on NP comp., DO, IO w/ NP
Rel. cl. on NP comp., DO, IO w/
Comp
Rel. cl. on PP comp. w/ pied-piping
√
√
Rel. cl. on NP object of P w/ NP
√
√
√
√
√
√
√
√
√
√
Rel. cl. on NP object of P w/ Comp
√
√
√
√
√
√
√
√
√
Rel. cl. on adjunct w/ PP
√
√
√
√
√
√
√
√
√
√
√
√
√
√
Rel. cl. on adjunct w/ Comp
√
√
√
√
√
√
√
√
√
√
√
√
√
√
Pass. w. wh-mov. subj.
Pass. w. wh-mov. ind. obj.
Pass. w. wh-mov. obj. of by phrase
Pass. w. wh-mov. by phrase

34
CHAPTER 5. WHERE TO FIND WHAT
Tree families
Transitive
Ditransitive with PP shift
Ditransitive
Ditransitive with PP
Sentential Comp. with NP
Intransitive Verb Particle
Transitive Verb Particle
Ditransitive Verb Particle
Intransitive with PP
Sentential Complement
Trans. Light Vs
Ditrans. Light Vs
Adj. Sm. Cl. w. Sentential Subj.
NP Sm. Cl. w. Sentential Subj.
PP Sm. Cl. w. Sentential Subj.
Pred. Mult. wd. V, P
Constructions
Declarative
24
110
24
√
√
√
√
√
21
10,87
√
√
√
√
√
√
Passive w/ & w/o by phrase
√
√
√
√
116
√
√
√
√
Y/N quest.
Wh-moved subject
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
Wh-mov. NP complement, DO or IO
119
√
123
√
√
√
√
Wh-mov. S comp.
√
√
Wh-mov. Adj. or Adv. comp.
√
Wh-mov. object of a P
√
124
√
√
√
Wh-mov. PP
√
124
√
√
Topic. NP comp.
√
√
√
√
√
√
√
Imperative
144
√
√
√
√
√
√
√
√
√
√
√
√
Det. gerund
147
√
√
√
√
√
√
√
√
√
√
√
√
NP gerund
149
√
√
√
√
√
√
√
√
√
√
√
√
Ergative
80
Rel. cl. on subj. w/ NP
√
√
√
√
√
√
√
√
√
√
√
√
√
Rel. cl. on subj. w/ Comp
√
√
√
√
√
√
√
√
√
√
√
√
√
Rel. cl. on NP comp., DO, IO w/ NP
√
√
√
√
√
√
√
√
√
Rel. cl. on NP comp., DO, IO w/
Comp
√
√
√
√
√
√
√
√
√
Rel. cl. on PP comp. w/ pied-piping
√
√
√
√
√
√
√
√
√
Rel. cl. on NP object of P w/ NP
√
√
√
√
√
√
√
√
√
√
Rel. cl. on NP object of P w/ Comp
√
√
√
√
√
√
√
√
√
√
Rel. cl. on adjunct w/ PP
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
Rel. cl. on adjunct w/ Comp
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
√
Parenthetical quoting clause
√
√
Past-participal as arg Adj
√
√
Past-participial NP pre-mod
√
√
Pass. w. wh-mov. subj.
√
√
√
√
√
√
√
√
√
Pass. w. wh-mov. ind. obj.
√
√
√
√
√
√
Pass. w. wh-mov. obj. of by phrase
√
√
√
√
√
√
√
√
√
Pass. w. wh-mov. by phrase
√
√
√
√
√
√
√
√

35
Tree families
Adverb It-Cleft
NP It-Cleft
PP It-Cleft
Adj. Small Clause
Adj. Sm. Cl. w. Sent. Comp.
Equative BE
NP Small Clause
NP Sm. Cl. w. Sent. Comp.
PP Small Clause
Exhaustive PP Sm. Cl.
Intransitive
Intransitive with Adjective
Transitive Sentential Subj
Constructions
Declarative
√
√
113
105
√
108
102
√
102
√
√
√
92
Passive w/ & w/o by phrase
Y/N quest.
√
√
113
√
Wh-moved subject
87
√
√
√
√
√
122
88
√
Wh-mov. NP complement, DO or IO
√
√
√
Wh-mov. S comp.
Wh-mov. Adj. or Adv. comp.
√
√
125
Wh-mov. object of a P
√
Wh-mov. PP
√
√
Topic. NP comp.
√
√
Imperative
√
√
√
√
√
√
√
√
Det. gerund
NP gerund
√
√
√
√
√
√
√
√
Ergative
Rel. cl. on subj. w/ NP
√
√
√
√
√
√
√
√
Rel. cl. on subj. w/ Comp
√
√
√
√
√
√
√
√
Rel. cl. on NP comp., DO, IO w/ NP
Rel. cl. on NP comp., DO, IO w/
Comp
Rel. cl. on PP comp. w/ pied-piping
√
Rel. cl. on NP object of P w/ NP
√
Rel. cl. on NP object of P w/ Comp
√
Rel. cl. on adjunct w/ PP
√
√
√
√
√
√
√
√
√
√
√
√
Rel. cl. on adjunct w/ Comp
√
√
√
√
√
√
√
√
√
√
√
√
Participial NP pre-mod
√
Pass. w. wh-mov. subj.
Pass. w. wh-mov. ind. obj.
Pass. w. wh-mov. obj. of by phrase
Pass. w. wh-mov. by phrase

36
CHAPTER 5. WHERE TO FIND WHAT
Tree families
Idiom with V, D, N
Idiom with V, D, A, N
Idiom with V, N
Idiom with V, A, N
Idiom with V, D, N, P
Idiom with V, D, A, N, P
Idiom with V, N, P
Idiom with V, A, N, P
Constructions
Declarative
√
√
√
√
√
√
√
√
Passive w/ & w/o by phrase
√
√
√
√
√
√
√
√
Y/N quest.
Wh-moved subject
√
√
√
√
√
√
√
√
Wh-mov. NP complement, DO or IO
Wh-mov. S comp.
Wh-mov. Adj. or Adv. comp.
Wh-mov. object of a P
Wh-mov. PP
Topic. NP comp.
Imperative
√
√
√
√
√
√
√
√
Det. gerund
NP gerund
√
√
√
√
√
√
√
√
Ergative
Rel. cl. on subj. w/ NP
√
√
√
√
√
√
√
√
Rel. cl. on subj. w/ Comp
√
√
√
√
√
√
√
√
Rel. cl. on NP comp., DO, IO w/ NP
Rel. cl. on NP comp., DO, IO w/
Comp
Rel. cl. on PP comp. w/ pied-piping
Rel. cl. on NP object of P w/ NP
Rel. cl. on NP object of P w/ Comp
Rel. cl. on adjunct w/ PP
√
√
√
√
√
√
√
√
Rel. cl. on adjunct w/ Comp
√
√
√
√
√
√
√
√
Pass. w. wh-mov. subj.
Pass. w. wh-mov. ind. obj.
Pass. w. wh-mov. obj. of by phrase
√
√
√
√
√
√
√
√
Pass. w. wh-mov. by phrase
√
√
√
√
√
√
√
√
Outer Pass. w. and wo. by phrase
√
√
√
√
Outer Pass. w. Rel. cl. on subj. w.
Comp
√
√
√
√
√
Outer Pass. w. Rel. cl. on subj. w.
NP
√
√
√
√
√

Chapter 6
Verb Classes
Each main1 verb in the syntactic lexicon selects at least one tree family2 (subcategorization
frame). Since the tree database and syntactic lexicon are already separated for space eﬃciency
(see Chapter 3), each verb can eﬃciently select a large number of trees by specifying a tree
family, as opposed to each of the individual trees. This approach allows for a considerable
reduction in the number of trees that must be speciﬁed for any given verb or form of a verb.
There are currently 52 tree families in the system.3 This chapter gives a brief description
of each tree family and shows the corresponding declarative tree4, along with any peculiar
characteristics or trees. It also indicates which transformations are in each tree family, and
gives the number of verbs that select that family.5 A few sample verbs are given, along with
example sentences.
6.1
Intransitive: Tnx0V
Description: This tree family is selected by verbs that do not require an object complement
of any type. Adverbs, prepositional phrases and other adjuncts may adjoin on, but are
not required for the sentences to be grammatical. 1,878 verbs select this family.
Examples: eat, sleep, dance
Al ate .
Seth slept .
Hyun danced .
Declarative tree: See Figure 6.1.
Other available trees: wh-moved subject, subject relative clause with and without comp,
adjunct (gap-less) relative clause with comp, adjunct (gap-less) relative clause with PP
pied-piping, imperative, determiner gerund, NP gerund, pre-nominal participal.
1Auxiliary verbs are handled under a diﬀerent mechanism. See Chapter 20 for details.
2See section 3.1.2 for explanation of tree families.
3An explanation of the naming convention used in naming the trees and tree families is available in Ap-
pendix D.
4Before lexicalization, the ⋄indicates the anchor of the tree.
5Numbers given are as of August 1998 and are subject to some change with further development of the
grammar.
37

38
CHAPTER 6. VERB CLASSES
Sr
NP0↓
VP
V◊
Figure 6.1: Declarative Intransitive Tree: αnx0V
6.2
Transitive: Tnx0Vnx1
Description: This tree family is selected by verbs that require only an NP object complement.
The NP’s may be complex structures, including gerund NP’s and NP’s that take sentential
complements. This does not include light verb constructions (see sections 6.15 and 6.16).
4,343 verbs select the transitive tree family.
Examples: eat, dance, take, like
Al ate an apple .
Seth danced the tango .
Hyun is taking an algorithms course .
Anoop likes the fact that the semester is ﬁnished .
Declarative tree: See Figure 6.2.
Sr
NP0↓
VP
V◊
NP1↓
Figure 6.2: Declarative Transitive Tree: αnx0Vnx1
Other available trees: wh-moved subject, wh-moved object, subject relative clause with and
without comp, adjunct (gap-less) relative clause with comp/with PP pied-piping, object
relative clause with and without comp, imperative, determiner gerund, NP gerund, passive
with by phrase, passive without by phrase, passive with wh-moved subject and by phrase,
passive with wh-moved subject and no by phrase, passive with wh-moved object out of the
by phrase, passive with wh-moved by phrase, passive with relative clause on subject and
by phrase with and without comp, passive with relative clause on subject and no by phrase
with and without comp, passive with relative clause on object on the by phrase with and
without comp/with PP pied-piping, gerund passive with by phrase, gerund passive without
by phrase, ergative, ergative with wh-moved subject, ergative with subject relative clause
with and without comp, ergative with adjunct (gap-less) relative clause with comp/with

6.3. DITRANSITIVE: TNX0VNX1NX2
39
PP pied-piping. In addition, two other trees that allow transitive verbs to function as
adjectives (e.g. the stopped truck) are also in the family.
6.3
Ditransitive: Tnx0Vnx1nx2
Description: This tree family is selected by verbs that take exactly two NP complements. It
does not include verbs that undergo the ditransitive verb shift (see section 6.5). The
apparent ditransitive alternates involving verbs in this class and benefactive PP’s (e.g.
John baked a cake for Mary) are analyzed as transitives (see section 6.2) with a PP
adjunct. Benefactives are taken to be adjunct PP’s because they are optional (e.g. John
baked a cake vs. John baked a cake for Mary). 122 verbs select the ditransitive tree family.
Examples: ask, cook, win
Christy asked Mike a question .
Doug cooked his father dinner .
Dania won her sister a stuﬀed animal .
Declarative tree: See Figure 6.3.
Sr
NP0↓
VP
V◊
NP1↓
NP2↓
Figure 6.3: Declarative Ditransitive Tree: αnx0Vnx1nx2
Other available trees: wh-moved subject, wh-moved direct object, wh-moved indirect ob-
ject, subject relative clause with and without comp, adjunct (gap-less) relative clause
with comp/with PP pied-piping, direct object relative clause with and without comp, in-
direct object relative clause with and without comp, imperative, determiner gerund, NP
gerund, passive with by phrase, passive without by phrase, passive with wh-moved subject
and by phrase, passive with wh-moved subject and no by phrase, passive with wh-moved
object out of the by phrase, passive with wh-moved by phrase, passive with wh-moved
indirect object and by phrase, passive with wh-moved indirect object and no by phrase,
passive with relative clause on subject and by phrase with and without comp, passive with
relative clause on subject and no by phrase with and without comp, passive with relative
clause on object of the by phrase with and without comp/with PP pied-piping, passive
with relative clause on the indirect object and by phrase with and without comp, passive
with relative clause on the indirect object and no by phrase with and without comp, pas-
sive with/without by-phrase with adjunct (gap-less) relative clause with comp/with PP
pied-piping, gerund passive with by phrase, gerund passive without by phrase.

40
CHAPTER 6. VERB CLASSES
6.4
Ditransitive with PP: Tnx0Vnx1pnx2
Description: This tree family is selected by ditransitive verbs that take a noun phrase followed
by a prepositional phrase. The preposition is not constrained in the syntactic lexicon. The
preposition must be required and not optional - that is, the sentence must be ungram-
matical with just the noun phrase (e.g. ∗John put the table). No verbs, therefore, should
select both this tree family and the transitive tree family (see section 6.2). This tree
family is also distinguished from the ditransitive verbs, such as give, that undergo verb
shifting (see section 6.5). There are 62 verbs that select this tree family.
Examples: associate, put, refer
Rostenkowski associated money with power .
He put his reputation on the line .
He referred all questions to his attorney .
Declarative tree: See Figure 6.4.
Sr
NP0↓
VP
V◊
NP1↓
PP2↓
Figure 6.4: Declarative Ditransitive with PP Tree: αnx0Vnx1pnx2
Other available trees: wh-moved subject, wh-moved direct object, wh-moved object of PP,
wh-moved PP, subject relative clause with and without comp, adjunct (gap-less) relative
clause with comp/with PP pied-piping, direct object relative clause with and without
comp, object of PP relative clause with and without comp/with PP pied-piping, imper-
ative, determiner gerund, NP gerund, passive with by phrase, passive without by phrase,
passive with wh-moved subject and by phrase, passive with wh-moved subject and no by
phrase, passive with wh-moved object out of the by phrase, passive with wh-moved by
phrase, passive with wh-moved object out of the PP and by phrase, passive with wh-moved
object out of the PP and no by phrase, passive with wh-moved PP and by phrase, passive
with wh-moved PP and no by phrase, passive with relative clause on subject and by phrase
with and without comp, passive with relative clause on subject and no by phrase with and
without comp, passive with relative clause on object of the by phrase with and without
comp/with PP pied-piping, passive with relative clause on the object of the PP and by
phrase with and without comp/with PP pied-piping, passive with relative clause on the
object of the PP and no by phrase with and without comp/with PP pied-piping, passive
with and without by phrase with adjunct (gap-less) relative clause with comp/with PP
pied-piping, gerund passive with by phrase, gerund passive without by phrase.

6.5. DITRANSITIVE WITH PP SHIFT: TNX0VNX1TONX2
41
6.5
Ditransitive with PP shift: Tnx0Vnx1tonx2
Description: This tree family is selected by ditransitive verbs that undergo a shift to a to
prepositional phrase. These ditransitive verbs are clearly constrained so that when they
shift, the prepositional phrase must start with to. This is in contrast to the Ditransitives
with PP in section 6.4, in which verbs may appear in [NP V NP PP] constructions with
a variety of prepositions. Both the dative shifted and non-shifted PP complement trees
are included. 56 verbs select this family.
Examples: give, promise, tell
Bill gave Hillary ﬂowers .
Bill gave ﬂowers to Hillary .
Whitman promised the voters a tax cut .
Whitman promised a tax cut to the voters .
Pinnochino told Gepetto a lie .
Pinnochino told a lie to Gepetto .
Declarative tree: See Figure 6.5.
Sr
NP0↓
VP
V◊
NP1↓
PP2
P2
to
NP2↓
Sr
NP0↓
VP
V◊
NP2↓
NP1↓
(a)
(b)
Figure
6.5:
Declarative
Ditransitive
with
PP
shift Trees:
αnx0Vnx1Pnx2
(a)
and
αnx0Vnx2nx1 (b)
Other available trees: Non-shifted: wh-moved subject, wh-moved direct object, wh-moved
indirect object, subject relative clause with and without comp, adjunct (gap-less) relative
clause with comp/with PP pied-piping, direct object relative clause with comp/with PP
pied-piping, indirect object relative clause with and without comp/with PP pied-piping,
imperative, NP gerund, passive with by phrase, passive without by phrase, passive with
wh-moved subject and by phrase, passive with wh-moved subject and no by phrase, passive
with wh-moved object out of the by phrase, passive with wh-moved by phrase, passive
with wh-moved indirect object and by phrase, passive with wh-moved indirect object and
no by phrase, passive with relative clause on subject and by phrase with and without
comp, passive with relative clause on subject and no by phrase with and without comp,
passive with relative clause on object of the by phrase with and without comp/with PP

42
CHAPTER 6. VERB CLASSES
pied-piping, passive with relative clause on the indirect object and by phrase with and
without comp/with PP pied-piping, passive with relative clause on the indirect object
and no by phrase with and without comp/with PP pied-piping, passive with/without
by-phrase with adjunct (gap-less) relative clause with comp/with PP pied-piping, gerund
passive with by phrase, gerund passive without by phrase;
Shifted: wh-moved subject, wh-moved direct object, wh-moved object of PP, wh-moved
PP, subject relative clause with and without comp, adjunct (gap-less) relative clause with
comp/with PP pied-piping, direct object relative clause with comp/with PP pied-piping,
object of PP relative clause with and without comp/with PP pied-piping, imperative,
determiner gerund, NP gerund, passive with by phrase, passive without by phrase, passive
with wh-moved subject and by phrase, passive with wh-moved subject and no by phrase,
passive with wh-moved object out of the by phrase, passive with wh-moved by phrase,
passive with wh-moved object out of the PP and by phrase, passive with wh-moved object
out of the PP and no by phrase, passive with wh-moved PP and by phrase, passive with
wh-moved PP and no by phrase, passive with relative clause on subject and by phrase
with and without comp, passive with relative clause on subject and no by phrase with and
without comp, passive with relative clause on object of the by phrase with and without
comp/with PP pied-piping, passive with relative clause on the object of the PP and by
phrase with and without comp/with PP pied-piping, passive with relative clause on the
object of the PP and no by phrase with and without comp/with PP pied-piping, passive
with/without by-phrase with adjunct (gap-less) relative clause with comp/with PP pied-
piping, gerund passive with by phrase, gerund passive without by phrase.
6.6
Sentential Complement with NP: Tnx0Vnx1s2
Description: This tree family is selected by verbs that take both an NP and a sentential
complement. The sentential complement may be inﬁnitive or indicative. The type of
clause is speciﬁed by each individual verb in its syntactic lexicon entry. A given verb
may select more than one type of sentential complement. The declarative tree, and many
other trees in this family, are auxiliary trees, as opposed to the more common initial trees.
These auxiliary trees adjoin onto an S node in an existing tree of the type speciﬁed by
the sentential complement. This is the mechanism by which TAGs are able to maintain
long-distance dependencies (see Chapter 13), even over multiple embeddings (e.g. What
did Bill tell Mary that John said?). 79 verbs select this tree family.
Examples: beg, expect, tell
Srini begged Mark to increase his disk quota .
Beth told Jim that it was his turn .
Declarative tree: See Figure 6.6.
Other available trees: wh-moved subject, wh-moved object, wh-moved sentential comple-
ment, subject relative clause with and without comp, adjunct (gap-less) relative clause
with comp/with PP pied-piping, object relative clause with and without comp, imperative,
determiner gerund, NP gerund, passive with by phrase before sentential complement, pas-
sive with by phrase after sentential complement, passive without by phrase, passive with

6.7. INTRANSITIVE VERB PARTICLE: TNX0VPL
43
Sr
NP0↓
VP
V◊
NP1↓
S2*
Figure 6.6: Declarative Sentential Complement with NP Tree: βnx0Vnx1s2
wh-moved subject and by phrase before sentential complement, passive with wh-moved
subject and by phrase after sentential complement, passive with wh-moved subject and
no by phrase, passive with wh-moved object out of the by phrase, passive with wh-moved
by phrase, passive with relative clause on subject and by phrase before sentential comple-
ment with and without comp, passive with relative clause on subject and by phrase after
sentential complement with and without comp, passive with relative clause on subject and
no by phrase with and without comp, passive with/without by-phrase with adjunct (gap-
less) relative clause with comp/with PP pied-piping, gerund passive with by phrase befor
sentential complement, gerund passive with by phrase after the sentential complement,
gerund passive without by phrase, parenthetical reporting clause.
6.7
Intransitive Verb Particle: Tnx0Vpl
Description: The trees in this tree family are anchored by both the verb and the verb parti-
cle. Both appear in the syntactic lexicon and together select this tree family. Intransitive
verb particles can be diﬃcult to distinguish from intransitive verbs with adverbs adjoined
on. The main diagnostics for including verbs in this class are whether the meaning is
compositional or not, and whether there is a transitive version of the verb/verb particle
combination with the same or similar meaning. The existence of an alternate composi-
tional meaning is a strong indication for a separate verb particle construction. There are
159 verb/verb particle combinations.
Examples: add up, come out, sign oﬀ
The numbers never quite added up .
John ﬁnally came out (of the closet) .
I think that I will sign oﬀnow .
Declarative tree: See Figure 6.7.
Other available trees: wh-moved subject, subject relative clause with and without comp,
adjunct (gap-less) relative clause with comp/with PP pied-piping, imperative, determiner
gerund, NP gerund.

44
CHAPTER 6. VERB CLASSES
Sr
NP0↓
VP
V◊
PL◊
Figure 6.7: Declarative Intransitive Verb Particle Tree: αnx0Vpl
6.8
Transitive Verb Particle: Tnx0Vplnx1
Description: Verb/verb particle combinations that take an NP complement select this tree
family. Both the verb and the verb particle are anchors of the trees. Particle movement has
been taken as the diagnostic to distinguish verb particle constructions from intransitives
with adjoined PP’s. If the alleged particle is able to undergo particle movement, in other
words appear both before and after the direct object, then it is judged to be a particle.
Items that do not undergo particle movement are taken to be prepositions. In many,
but not all, of the verb particle cases, there is also an alternate prepositional meaning in
which the lexical item did not move. (e.g. He looked up the number (in the phonebook).
He looked the number up. Srini looked up the road (for Purnima’s car). ∗He looked the
road up.) There are 489 verb/verb particle combinations.
Examples: blow oﬀ, make up, pick out
He blew oﬀhis linguistics class for the third time .
He blew his linguistics class oﬀfor the third time .
The dyslexic leprechaun made up the syntactic lexicon .
The dyslexic leprechaun made the syntactic lexicon up .
I would like to pick out a new computer .
I would like to pick a new computer out .
Declarative tree: See Figure 6.8.
Sr
NP0↓
VP
V◊
PL◊
NP1↓
Sr
NP0↓
VP
V◊
NP1↓
PL◊
(a)
(b)
Figure 6.8: Declarative Transitive Verb Particle Tree: αnx0Vplnx1 (a) and αnx0Vnx1pl (b)
Other available trees: wh-moved subject with particle before the NP, wh-moved subject
with particle after the NP, wh-moved object, subject relative clause with particle before

6.9. DITRANSITIVE VERB PARTICLE: TNX0VPLNX1NX2
45
the NP with and without comp, subject relative clause with particle after the NP with and
without comp, object relative clause with and without comp, adjunct (gap-less) relative
clause with particle before the NP with comp/with PP pied-piping, adjunct (gap-less)
relative clause with particle after the NP with comp/with PP pied-piping, imperative
with particle before the NP, imperative with particle after the NP, determiner gerund
with particle before the NP, NP gerund with particle before the NP, NP gerund with
particle after the NP, passive with by phrase, passive without by phrase, passive with wh-
moved subject and by phrase, passive with wh-moved subject and no by phrase, passive
with wh-moved object out of the by phrase, passive with wh-moved by phrase, passive
with relative clause on subject and by phrase with and without comp, passive with relative
clause on subject and no by phrase with and without comp, passive with relative clause on
object of the by phrase with and without comp/with PP pied-piping, passive with/without
by-phrase with adjunct (gap-less) relative clause with comp/with PP pied-piping, gerund
passive with by phrase, gerund passive without by phrase.
6.9
Ditransitive Verb Particle: Tnx0Vplnx1nx2
Description: Verb/verb particle combinations that select this tree family take 2 NP comple-
ments. Both the verb and the verb particle anchor the trees, and the verb particle can
occur before, between, or after the noun phrases. Perhaps because of the complexity of
the sentence, these verbs do not seem to have passive alternations (∗A new bank account
was opened up Michelle by me). There are 4 verb/verb particle combinations that select
this tree family. The exhaustive list is given in the examples.
Examples: dish out, open up, pay oﬀ, rustle up
I opened up Michelle a new bank account .
I opened Michelle up a new bank account .
I opened Michelle a new bank account up .
Declarative tree: See Figure 6.9.
Sr
NP0↓
VP
V◊
PL◊
NP1↓
NP2↓
Sr
NP0↓
VP
V◊
NP1↓
PL◊
NP2↓
Sr
NP0↓
VP
V◊
NP1↓
NP2↓
PL◊
(a)
(b)
(c)
Figure
6.9:
Declarative
Ditransitive
Verb
Particle
Tree:
αnx0Vplnx1nx2
(a),
αnx0Vnx1plnx2 (b) and αnx0Vnx1nx2pl (c)
Other available trees: wh-moved subject with particle before the NP’s, wh-moved subject
with particle between the NP’s, wh-moved subject with particle after the NP’s, wh-moved
indirect object with particle before the NP’s, wh-moved indirect object with particle after

46
CHAPTER 6. VERB CLASSES
the NP’s, wh-moved direct object with particle before the NP’s, wh-moved direct object
with particle between the NP’s, subject relative clause with particle before the NP’s
with and without comp, subject relative clause with particle between the NP’s with
and without comp, subject relative clause with particle after the NP’s with and without
comp, indirect object relative clause with particle before the NP’s with and without comp,
indirect object relative clause with particle after the NP’s with and without comp, direct
object relative clause with particle before the NP’s with and without comp, direct object
relative clause with particle between the NP’s with and without comp, adjunct (gap-
less) relative clause with comp/with PP pied-piping, imperative with particle before the
NP’s, imperative with particle between the NP’s, imperative with particle after the NP’s,
determiner gerund with particle before the NP’s, NP gerund with particle before the NP’s,
NP gerund with particle between the NP’s, NP gerund with particle after the NP’s.
6.10
Intransitive with PP: Tnx0Vpnx1
Description: The verbs that select this tree family are not strictly intransitive, in that they
must be followed by a prepositional phrase. Verbs that are intransitive and simply can
be followed by a prepositional phrase do not select this family, but instead have the
PP adjoin onto the intransitive sentence. Accordingly, there should be no verbs in both
this class and the intransitive tree family (see section 6.1). The prepositional phrase is
not restricted to being headed by any particular lexical item. Note that these are not
transitive verb particles (see section 6.8), since the head of the PP does not move. 169
verbs select this tree family.
Examples: grab, impinge, provide
Seth grabbed for the brass ring .
The noise gradually impinged on Dania’s thoughts .
A good host provides for everyone’s needs .
Declarative tree: See Figure 6.10.
Sr
NP0↓
VP
V◊
PP1↓
Figure 6.10: Declarative Intransitive with PP Tree: αnx0Vpnx1
Other available trees: wh-moved subject, wh-moved object of the PP, wh-moved PP, subject
relative clause with and without comp, adjunct (gap-less) relative clause with comp/with

6.11.
PREDICATIVE MULTI-WORD WITH VERB, PREP ANCHORS: TNX0VPNX1
47
PP pied-piping, object of the PP relative clause with and without comp/with PP pied-
piping, imperative, determiner gerund, NP gerund, passive with by phrase, passive without
by phrase, passive with wh-moved subject and by phrase, passive with wh-moved subject
and no by phrase, passive with wh-moved by phrase, passive with relative clause on subject
and by phrase with and without comp, passive with relative clause on subject and no by
phrase with and without comp, passive with relative clause on object of the by phrase with
and without comp/with PP pied-piping, passive with/without by-phrase with adjunct
(gap-less) relative clause with comp/with PP pied-piping, gerund passive with by phrase,
gerund passive without by phrase.
6.11
Predicative Multi-word with Verb, Prep anchors: Tnx0VPnx1
Description: This tree family is selected by multiple anchor verb/preposition pairs which
together have a non-compositional interpretation.
For example, think of has the non-
compositional interpretion involving the inception of a notion or mental entity in addition
to the interpretion in which the agent is thinking about someone or something. Anchors
for this tree must be able to take both gerunds and regular NP’s in the second noun
position. To allow adverbs to appear between the verb and the preposition, the trees
contain an extra VP level. Several of the verbs which select the Tnx0Vpnx1 family, but
which should not have quite the freedom it allows, will be moving to this family for the
next release. 28 verb/preposition pairs select this tree family.
Examples: think of, believe in, depend on
Calvin thought of a new idea .
Hobbes believes in sleeping all day .
Bill depends on drinking coﬀee for stimulation .
Declarative tree: See Figure 6.11.
S r
NP 0↓
VP1
VP2
V◊
PP
P◊
NP 1↓
Figure 6.11: Declarative PP Complement Tree: αnx0VPnx1
Other available trees: wh-moved subject, wh-moved object, subject relative clause with and
without comp, adjunct (gap-less) relative clause with comp/with PP pied-piping, object
relative clause with and without comp, imperative, determiner gerund, NP gerund, passive

48
CHAPTER 6. VERB CLASSES
with by phrase, passive without by phrase, passive with wh-moved subject and by phrase,
passive with wh-moved subject and no by phrase, passive with wh-moved object out of the
by phrase, passive with wh-moved by phrase, passive with relative clause on subject and by
phrase with and without comp, passive with relative clause on subject and no by phrase
with and without comp, passive with relative clause on object on the by phrase with
and without comp/with PP pied-piping, passive with/without by-phrase with adjunct
(gap-less) relative clause with comp/with PP pied-piping, gerund passive with by phrase,
gerund passive without by phrase. In addition, two other trees that allow transitive verbs
to function as adjectives (e.g. the thought of idea) are also in the family.
6.12
Sentential Complement: Tnx0Vs1
Description: This tree family is selected by verbs that take just a sentential complement. The
sentential complement may be of type inﬁnitive, indicative, or small clause (see Chapter 9).
The type of clause is speciﬁed by each individual verb in its syntactic lexicon entry, and a
given verb may select more than one type of sentential complement. The declarative tree,
and many other trees in this family, are auxiliary trees, as opposed to the more common
initial trees. These auxiliary trees adjoin onto an S node in an existing tree of the type
speciﬁed by the sentential complement. This is the mechanism by which TAGs are able
to maintain long-distance dependencies (see Chapter 13), even over multiple embeddings
(e.g. What did Bill think that John said?). 338 verbs select this tree family.
Examples: consider, think
Dania considered the algorithm unworkable .
Srini thought that the program was working .
Declarative tree: See Figure 6.12.
Sr
NP0↓
VP
V◊
S1*
Figure 6.12: Declarative Sentential Complement Tree: βnx0Vs1
Other available trees: wh-moved subject, wh-moved sentential complement, subject relative
clause with and without comp, adjunct (gap-less) relative clause with comp/with PP pied-
piping, imperative, determiner gerund, NP gerund, parenthetical reporting clause.

6.13.
INTRANSITIVE WITH ADJECTIVE: TNX0VAX1
49
6.13
Intransitive with Adjective: Tnx0Vax1
Description: The verbs that select this tree family take an adjective as a complement. The
adjective may be regular, comparative, or superlative. It may also be formed from the
special class of adjectives derived from the transitive verbs (e.g. agitated, broken). See
section 6.2). Unlike the Intransitive with PP verbs (see section 6.10), some of these verbs
may also occur as bare intransitives as well. This distinction is drawn because adjectives
do not normally adjoin onto sentences, as prepositional phrases do. Other intransitive
verbs can only occur with the adjective, and these select only this family. The verb class is
also distinguished from the adjective small clauses (see section 6.20) because these verbs
are not raising verbs. 34 verbs select this tree family.
Examples: become, grow, smell
The greenhouse became hotter .
The plants grew tall and strong .
The ﬂowers smelled wonderful .
Declarative tree: See Figure 6.13.
Sr
NP0 ↓
VP
V◊
AP1 ↓
Figure 6.13: Declarative Intransitive with Adjective Tree: αnx0Vax1
Other available trees: wh-moved subject, wh-moved adjective (how), subject relative clause
with and without comp, adjunct (gap-less) relative clause with comp/with PP pied-piping,
imperative, NP gerund.
6.14
Transitive Sentential Subject: Ts0Vnx1
Description: The verbs that select this tree family all take sentential subjects, and are often
referred to as ‘psych’ verbs, since they all refer to some psychological state of mind. The
sentential subject can be indicative (complementizer required) or inﬁnitive (complemen-
tizer optional). 100 verbs that select this tree family.
Examples: delight, impress, surprise
that the tea had rosehips in it delighted Christy .
to even attempt a marathon impressed Dania .
For Jim to have walked the dogs surprised Beth .
Declarative tree: See Figure 6.14.

50
CHAPTER 6. VERB CLASSES
Sr
S0↓
VP
V◊
NP1↓
Figure 6.14: Declarative Sentential Subject Tree: αs0Vnx1
Other available trees: wh-moved subject, wh-moved object, subject relative clause with and
without comp, adjunct (gap-less) relative clause with comp/with PP pied-piping.
6.15
Light Verbs: Tnx0lVN1
Description: The verb/noun pairs that select this tree families are pairs in which the interpre-
tation is non-compositional and the noun contributes argument structure to the predicate
(e.g. The man took a walk. vs. The man took a radio). The verb and the noun occur
together in the syntactic database, and both anchor the trees. The verbs in the light verb
constructions are do, give, have, make and take. The noun following the light verb is (usu-
ally) in a bare inﬁnitive form (have a good cry) and usually occurs with a(n). However,
we include deverbal nominals (take a bath, give a demonstration) as well. Constructions
with nouns that do not contribute an argument structure (have a cigarette, give NP a
black eye) are excluded. In addition to semantic considerations of light verbs, they diﬀer
syntactically from Transitive verbs (section 6.2) as well in that the noun in the light verb
construction does not extract. Some of the verb-noun anchors for this family, like take
aim and take hold disallow determiners, while others require particular determiners. For
example, have think must be indeﬁnite and singular, as attested by the ungrammaticality
of *John had the think/some thinks. Another anchor, take leave can occur either bare
or with a possesive pronoun (e.g., John took his leave, but not *John took the leave).
This is accomplished through feature speciﬁcation on the lexical entries. There are 259
verb/noun pairs that select the light verb tree.
Examples: give groan, have discussion, make comment
The audience gave a collective groan .
We had a big discussion about closing the libraries .
The professors made comments on the paper .
Declarative tree: See Figure 6.15.
Other available trees: wh-moved subject, subject relative clause with and without comp,
adjunct (gap-less) relative clause with comp/with PP pied-piping, imperative, determiner
gerund, NP gerund.

6.16.
DITRANSITIVE LIGHT VERBS WITH PP SHIFT: TNX0LVN1PNX2
51
Sr
NP0↓
VP
V◊
NP1
N1◊
Figure 6.15: Declarative Light Verb Tree: αnx0lVN1
6.16
Ditransitive Light Verbs with PP Shift: Tnx0lVN1Pnx2
Description: The verb/noun pairs that select this tree family are pairs in which the interpre-
tation is non-compositional and the noun contributes argument structure to the predicate
(e.g. Dania made Srini a cake. vs. Dania made Srini a loan). The verb and the noun
occur together in the syntactic database, and both anchor the trees. The verbs in these
light verb constructions are give and make. The noun following the light verb is (usually)
a bare inﬁnitive form (e.g. make a promise to Anoop). However, we include deverbal
nominals (e.g. make a payment to Anoop) as well. Constructions with nouns that do not
contribute an argument structure are excluded. In addition to semantic considerations
of light verbs, they diﬀer syntactically from the Ditransitive with PP Shift verbs (see
section 6.5) as well in that the noun in the light verb construction does not extract. Also,
passivization is severely restricted. Special determiner requirments and restrictions are
handled in the same manner as for the Tnx0lVN1 family. There are 18 verb/noun pairs
that select this family.
Examples: give look, give wave, make promise
Dania gave Carl a murderous look .
Amanda gave us a little wave as she left .
Dania made Doug a promise .
Declarative tree: See Figure 6.16.
Other available trees: Non-shifted: wh-moved subject, wh-moved indirect object, subject
relative clause with and without comp, adjunct (gap-less) relative clause with comp/with
PP pied-piping, indirect object relative clause with and without comp/with PP pied-
piping, imperative, NP gerund, passive with by phrase, passive with by-phrase with ad-
junct (gap-less) relative clause with comp/with PP pied-piping, gerund passive with by
phrase, gerund passive without by phrase
Shifted: wh-moved subject, wh-moved object of PP, wh-moved PP, subject relative
clause with and without comp, object of PP relative clause with and without comp/with
PP pied-piping, imperative, determiner gerund, NP gerund, passive with by phrase with
adjunct (gap-less) relative clause with comp/with PP pied-piping, gerund passive with by
phrase, gerund passive without by phrase.

52
CHAPTER 6. VERB CLASSES
Sr
NP0↓
VP
V◊
NP1
N1◊
PP2
P2
to
NP2↓
Sr
NP0↓
VP
V◊
NP2↓
NP1
N1◊
(a)
(b)
Figure 6.16: Declarative Light Verbs with PP Tree: αnx0lVN1Pnx2 (a), αnx0lVnx2N1 (b)
6.17
NP It-Cleft: TItVnx1s2
Description: This tree family is selected by be as the main verb and it as the subject. Together
these two items serve as a multi-component anchor for the tree family. This tree family
is used for it-clefts in which the clefted element is an NP and there are no gaps in the
clause which follows the NP. The NP is interpreted as an adjunct of the following clause.
See Chapter 11 for additional discussion.
Examples: it be
it was yesterday that we had the meeting .
Declarative tree: See Figure 6.17.
Sr
NP0
N◊
VP
V◊
VP1
V1
ε
PP1
P1↓
NP1↓
S2↓
Figure 6.17: Declarative NP It-Cleft Tree: αItVpnx1s2
Other available trees: inverted question, wh-moved object with be inverted, wh-moved ob-
ject with be not inverted, adjunct (gap-less) relative clause with comp/with PP pied-
piping.

6.18.
PP IT-CLEFT: TITVPNX1S2
53
6.18
PP It-Cleft: TItVpnx1s2
Description: This tree family is selected by be as the main verb and it as the subject. Together
these two items serve as a multi-component anchor for the tree family. This tree family is
used for it-clefts in which the clefted element is a PP and there are no gaps in the clause
which follows the PP. The PP is interpreted as an adjunct of the following clause. See
Chapter 11 for additional discussion.
Examples: it be
it was at Kent State that the police shot all those students .
Declarative tree: See Figure 6.18.
Sr
NP0
N◊
VP
V◊
VP1
V1
ε
PP1
P1↓
NP1↓
S2↓
Figure 6.18: Declarative PP It-Cleft Tree: αItVnx1s2
Other available trees: inverted question, wh-moved prepositional phrase with be inverted,
wh-moved prepositional phrase with be not inverted, adjunct (gap-less) relative clause
with comp/with PP pied-piping.
6.19
Adverb It-Cleft: TItVad1s2
Description: This tree family is selected by be as the main verb and it as the subject. Together
these two items serve as a multi-component anchor for the tree family. This tree family
is used for it-clefts in which the clefted element is an adverb and there are no gaps in the
clause which follows the adverb. The adverb is interpreted as an adjunct of the following
clause. See Chapter 11 for additional discussion.
Examples: it be
it was reluctantly that Dania agreed to do the tech report .
Declarative tree: See Figure 6.19.
Other available trees: inverted question, wh-moved adverb how with be inverted, wh-moved
adverb how with be not inverted, adjunct (gap-less) relative clause with comp/with PP
pied-piping.

54
CHAPTER 6. VERB CLASSES
Sr
NP0
N◊
VP
V◊
VP1
V1
ε
Ad1↓
S2↓
Figure 6.19: Declarative Adverb It-Cleft Tree: αItVad1s2
6.20
Adjective Small Clause Tree: Tnx0Ax1
Description: These trees are not anchored by verbs, but by adjectives. They are explained
in much greater detail in the section on small clauses (see section 9.3). This section is
presented here for completeness. 3244 adjectives select this tree family.
Examples: addictive, dangerous, wary
cigarettes are addictive .
smoking cigarettes is dangerous .
John seems wary of the Surgeon General’s warnings .
Declarative tree: See Figure 6.20.
Sr
NP0↓
VP
V
NA
ε
AP1
A◊
Figure 6.20: Declarative Adjective Small Clause Tree: αnx0Ax1
Other available trees: wh-moved subject, wh-moved adjective how, relative clause on subject
with and without comp, imperative, NP gerund, adjunct (gap-less) relative clause with
comp/with PP pied-piping.
6.21
Adjective Small Clause with Sentential Complement: Tnx0A1s1
Description: This tree family is selected by adjectives that take sentential complements. The
sentential complements can be indicative or inﬁnitive. Note that these trees are anchored

6.22.
ADJECTIVE SMALL CLAUSE WITH SENTENTIAL SUBJECT: TS0AX1
55
by adjectives, not verbs. Small clauses are explained in much greater detail in section 9.3.
This section is presented here for completeness. 669 adjectives select this tree family.
Examples: able, curious, disappointed
Christy was able to ﬁnd the problem .
Christy was curious whether the new analysis was working .
Christy was sad that the old analysis failed .
Declarative tree: See Figure 6.21.
Sr
NP0↓
VP
V
NA
ε
AP1
A◊
S1↓
Figure 6.21: Declarative Adjective Small Clause with Sentential Complement Tree: αnx0A1s1
Other available trees: wh-moved subject, wh-moved adjective how, relative clause on subject
with and without comp, imperative, NP gerund, adjunct (gap-less) relative clause with
comp/with PP pied-piping.
6.22
Adjective Small Clause with Sentential Subject: Ts0Ax1
Description: This tree family is selected by adjectives that take sentential subjects.
The
sentential subjects can be indicative or inﬁnitive. Note that these trees are anchored by
adjectives, not verbs. Most adjectives that take the Adjective Small Clause tree family
(see section 6.20) take this family as well.6 Small clauses are explained in much greater
detail in section 9.3. This section is presented here for completeness. 3,185 adjectives
select this tree family.
Examples: decadent, incredible, uncertain
to eat raspberry chocolate truﬄe ice cream is decadent .
that Carl could eat a large bowl of it is incredible .
whether he will actually survive the experience is uncertain .
Declarative tree: See Figure 6.22.
Other available trees: wh-moved subject, wh-moved adjective, adjunct (gap-less) relative
clause with comp/with PP pied-piping.
6No great attempt has been made to go through and decide which adjectives should actually take this family
and which should not.

56
CHAPTER 6. VERB CLASSES
Sr
S0↓
VP
V
NA
ε
AP1
A◊
Figure 6.22: Declarative Adjective Small Clause with Sentential Subject Tree: αs0Ax1
6.23
Equative BE: Tnx0BEnx1
Description: This tree family is selected only by the verb be. It is distinguished from the
predicative NP’s (see section 6.24) in that two NP’s are equated, and hence interchange-
able (see Chapter 9 for more discussion on the English copula and predicative sentences).
The XTAG analysis for equative be is explained in greater detail in section 9.4.
Examples: be
That man is my uncle.
Declarative tree: See Figure 6.23.
Sr
NP0↓
VPr
V◊
VP1
V1
ε1
NP1↓
Figure 6.23: Declarative Equative BE Tree: αnx0BEnx1
Other available trees: inverted-question.
6.24
NP Small Clause: Tnx0N1
Description: The trees in this tree family are not anchored by verbs, but by nouns. Small
clauses are explained in much greater detail in section 9.3. This section is presented here
for completeness. 5,595 nouns select this tree family.

6.25.
NP SMALL CLAUSE WITH SENTENTIAL COMPLEMENT: TNX0N1S1
57
Examples: author, chair, dish
Dania is an author .
that blue, warped-looking thing is a chair .
those broken pieces were dishes .
Declarative tree: See Figure 6.24.
Sr
NP0↓
VP
V
ε
NP1
N◊
Figure 6.24: Declarative NP Small Clause Trees: αnx0N1
Other available trees: wh-moved subject, wh-moved object, relative clause on subject with
and without comp, imperative, NP gerund, adjunct (gap-less) relative clause with comp/with
PP pied-piping.
6.25
NP Small Clause with Sentential Complement: Tnx0N1s1
Description: This tree family is selected by the small group of nouns that take sentential com-
plements by themselves (see section 8.8). The sentential complements can be indicative or
inﬁnitive, depending on the noun. Small clauses in general are explained in much greater
detail in the section 9.3. This section is presented here for completeness. 141 nouns select
this family.
Examples: admission, claim, vow
The aﬃdavits are admissions that they killed the sheep .
there is always the claim that they were insane .
this is his vow to ﬁght the charges .
Declarative tree: See Figure 6.25.
Other available trees: wh-moved subject, wh-moved object, relative clause on subject with
and without comp, imperative, NP gerund, adjunct (gap-less) relative clause with comp/with
PP pied-piping.
6.26
NP Small Clause with Sentential Subject: Ts0N1
Description: This tree family is selected by nouns that take sentential subjects. The sentential
subjects can be indicative or inﬁnitive. Note that these trees are anchored by nouns, not

58
CHAPTER 6. VERB CLASSES
Sr
NP0↓
VP
V
NA
ε
NP1
N◊
S1↓
Figure 6.25: Declarative NP with Sentential Complement Small Clause Tree: αnx0N1s1
verbs. Most nouns that take the NP Small Clause tree family (see section 6.24) take this
family as well.7 Small clauses are explained in much greater detail in section 9.3. This
section is presented here for completeness. 5,519 nouns select this tree family.
Examples: dilemma, insanity, tragedy
whether to keep the job he hates is a dilemma .
to invest all of your money in worms is insanity .
that the worms died is a tragedy .
Declarative tree: See Figure 6.26.
Sr
S0↓
VP
V
NA
ε
NP1
N◊
Figure 6.26: Declarative NP Small Clause with Sentential Subject Tree: αs0N1
Other available trees: wh-moved subject, adjunct (gap-less) relative clause with comp/with
PP pied-piping.
6.27
PP Small Clause: Tnx0Pnx1
Description: This family is selected by prepositions that can occur in small clause construc-
tions. For more information on small clause constructions, see section 9.3. This section
is presented here for completeness. 39 prepositions select this tree family.
7No great attempt has been made to go through and decide which nouns should actually take this family and
which should not.

6.28.
EXHAUSTIVE PP SMALL CLAUSE: TNX0PX1
59
Examples: around, in, underneath
Chris is around the corner .
Trisha is in big trouble .
The dog is underneath the table .
Declarative tree: See Figure 6.27.
Sr
NP0↓
VP
V
NA
ε
PP1
P◊
NP1↓
Figure 6.27: Declarative PP Small Clause Tree: αnx0Pnx1
Other available trees: wh-moved subject, wh-moved object of PP, relative clause on subject
with and without comp, relative clause on object of PP with and without comp/with PP
pied-piping, imperative, NP gerund, adjunct (gap-less) relative clause with comp/with
PP pied-piping.
6.28
Exhaustive PP Small Clause: Tnx0Px1
Description: This family is selected by exhaustive prepositions that can occur in small
clauses. Exhaustive prepositions are prepositions that function as prepositional phrases
by themselves. For more information on small clause constructions, please see section 9.3.
The section is included here for completeness. 33 exhaustive prepositions select this tree
family.
Examples: abroad, below, outside
Dr. Joshi is abroad .
The workers are all below .
Clove is outside .
Declarative tree: See Figure 6.28.
Other available trees: wh-moved subject, wh-moved PP, relative clause on subject with and
without comp, imperative, NP gerund, adjunct (gap-less) relative clause with comp/with
PP pied-piping.
6.29
PP Small Clause with Sentential Subject: Ts0Pnx1
Description: This tree family is selected by prepositions that take sentential subjects. The
sentential subject can be indicative or inﬁnitive. Small clauses are explained in much

60
CHAPTER 6. VERB CLASSES
Sr
NP0↓
VP
V
NA
ε
PP1
P◊
Figure 6.28: Declarative Exhaustive PP Small Clause Tree: αnx0Px1
greater detail in section 9.3. This section is presented here for completeness. 39 preposi-
tions select this tree family.
Examples: beyond, unlike
that Ken could forget to pay the taxes is beyond belief .
to explain how this happened is outside the scope of this discussion .
for Ken to do something right is unlike him .
Declarative tree: See Figure 6.29.
Sr
S0↓
VP
V
NA
ε
PP1
P◊
NP1↓
Figure 6.29: Declarative PP Small Clause with Sentential Subject Tree: αs0Pnx1
Other available trees: wh-moved subject, relative clause on object of the PP with and with-
out comp/with PP pied-piping, adjunct (gap-less) relative clause with comp/with PP
pied-piping.
6.30
Intransitive Sentential Subject: Ts0V
Description: Only the verb matter selects this tree family.
The sentential subject can be
indicative (complementizer required) or inﬁnitive (complementizer optional).
Examples: matter
to arrive on time matters considerably .
that Joshi attends the meetings matters to everyone .
Declarative tree: See Figure 6.30.

6.31.
SENTENTIAL SUBJECT WITH ‘TO’ COMPLEMENT: TS0VTONX1
61
Sr
S0↓
VP
V◊
Figure 6.30: Declarative Intransitive Sentential Subject Tree: αs0V
Other available trees: wh-moved subject, adjunct (gap-less) relative clause with comp/with
PP pied-piping.
6.31
Sentential Subject with ‘to’ complement: Ts0Vtonx1
Description: The verbs that select this tree family are fall, occur and leak. The sentential sub-
ject can be indicative (complementizer required) or inﬁnitive (complementizer optional).
Examples: fall, occur, leak
to wash the car fell to the children .
that he should leave occurred to the party crasher .
whether the princess divorced the prince leaked to the press .
Declarative tree: See Figure 6.31.
Sr
S0↓
VP
V◊
PP1
P1
to
NP1↓
Figure 6.31: Sentential Subject Tree with ‘to’ complement: αs0Vtonx1
Other available trees: wh-moved subject, adjunct (gap-less) relative clause with comp/with
PP pied-piping.
6.32
PP Small Clause, with Adv and Prep anchors: Tnx0ARBPnx1
Description: This family is selected by multi-word prepositions that can occur in small clause
constructions. In particular, this family is selected by two-word prepositions, where the

62
CHAPTER 6. VERB CLASSES
ﬁrst word is an adverb, the second word a preposition. Both components of the multi-
word preposition are anchors. For more information on small clause constructions, see
section 9.3. 8 multi-word prepositions select this tree family.
Examples: ahead of, close to
The little girl is ahead of everyone else in the race .
The project is close to completion .
Declarative tree: See Figure 6.32.
Sr
NP0↓
VP
V
ε
PP1
P1
Ad◊
P◊
NP1↓
Figure 6.32: Declarative PP Small Clause tree with two-word preposition, where the ﬁrst word
is an adverb, and the second word is a preposition: αnx0ARBPnx1
Other available trees: wh-moved subject, wh-moved object of PP, relative clause on subject
with and without comp, relative clause on object of PP with and without comp, adjunct
(gap-less) relative clause with comp/with PP pied-piping, imperative, NP Gerund.
6.33
PP Small Clause, with Adj and Prep anchors: Tnx0APnx1
Description: This family is selected by multi-word prepositions that can occur in small clause
constructions. In particular, this family is selected by two-word prepositions, where the
ﬁrst word is an adjective, the second word a preposition. Both components of the multi-
word preposition are anchors. For more information on small clause constructions, see
section 9.3. 8 multi-word prepositions select this tree family.
Examples: according to, void of
The operation we performed was according to standard procedure .
He is void of all feeling .
Declarative tree: See Figure 6.33.
Other available trees: wh-moved subject, relative clause on subject with and without comp,
relative clause on object of PP with and without comp, wh-moved object of PP, adjunct
(gap-less) relative clause with comp/with PP pied-piping.

6.34.
PP SMALL CLAUSE, WITH NOUN AND PREP ANCHORS: TNX0NPNX1
63
Sr
NP0↓
VP
V
NA
ε
PP1
P1
A◊
P◊
NP1↓
Figure 6.33: Declarative PP Small Clause tree with two-word preposition, where the ﬁrst word
is an adjective, and the second word is a preposition: αnx0APnx1
6.34
PP Small Clause, with Noun and Prep anchors: Tnx0NPnx1
Description: This family is selected by multi-word prepositions that can occur in small clause
constructions. In particular, this family is selected by two-word prepositions, where the
ﬁrst word is a noun, the second word a preposition.
Both components of the multi-
word preposition are anchors. For more information on small clause constructions, see
section 9.3. 1 multi-word preposition selects this tree family.
Examples: thanks to
The fact that we are here tonight is thanks to the valiant eﬀorts of our staﬀ.
Declarative tree: See Figure 6.34.
Sr
NP0↓
VP
V
NA
ε
PP1
P1
N◊
P◊
NP1↓
Figure 6.34: Declarative PP Small Clause tree with two-word preposition, where the ﬁrst word
is a noun, and the second word is a preposition: αnx0NPnx1
Other available trees: wh-moved subject, wh-moved object of PP, relative clause on subject
with and without comp, relative clause on object with comp, adjunct (gap-less) relative

64
CHAPTER 6. VERB CLASSES
clause with comp/with PP pied-piping.
6.35
PP Small Clause, with Prep anchors: Tnx0PPnx1
Description: This family is selected by multi-word prepositions that can occur in small clause
constructions. In particular, this family is selected by two-word prepositions, where both
words are prepositions. Both components of the multi-word preposition are anchors. For
more information on small clause constructions, see section 9.3. 9 multi-word prepositions
select this tree family.
Examples: on to, inside of
that detective is on to you .
The red box is inside of the blue box .
Declarative tree: See Figure 6.35.
Sr
NP0↓
VP
V
NA
ε
PP1
P
P1◊
P2◊
NP1↓
Figure 6.35: Declarative PP Small Clause tree with two-word preposition, where both words
are prepositions: αnx0PPnx1
Other available trees: wh-moved subject, wh-moved object of PP, relative clause on subject
with and without comp, relative clause on object of PP with and without comp/with PP
pied-piping, imperative, wh-moved object of PP, adjunct (gap-less) relative clause with
comp/with PP pied-piping.
6.36
PP Small Clause, with Prep and Noun anchors: Tnx0PNaPnx1
Description: This family is selected by multi-word prepositions that can occur in small clause
constructions. In particular, this family is selected by three-word prepositions. The ﬁrst
and third words are always prepositions, and the middle word is a noun. The noun is
marked for null adjunction since it cannot be modiﬁed by noun modiﬁers.
All three
components of the multi-word preposition are anchors. For more information on small
clause constructions, see section 9.3. 24 multi-word preposition select this tree family.

6.37. PP SMALL CLAUSE WITH SENTENTIAL SUBJECT, AND ADV AND PREP ANCHORS: TS0ARBP
Examples: in back of, in line with, on top of
The red plaid box should be in back of the plain black box .
The evidence is in line with my newly concocted theory .
She is on top of the world .
*She is on direct top of the world .
Declarative tree: See Figure 6.36.
Sr
NP0↓
VP
V
NA
ε
PP1
P
P1◊
N◊
NA
P2◊
NP1↓
Figure 6.36: Declarative PP Small Clause tree with three-word preposition, where the middle
noun is marked for null adjunction: αnx0PNaPnx1
Other available trees: wh-moved subject, wh-moved object of PP, relative clause on subject
with and without comp, relative clause on object of PP with and without comp/with PP
pied-piping, adjunct (gap-less) relative clause with comp/with PP pied-piping, imperative,
NP Gerund.
6.37
PP Small Clause with Sentential Subject, and Adv and
Prep anchors: Ts0ARBPnx1
Description: This tree family is selected by multi-word prepositions that take sentential sub-
jects. In particular, this family is selected by two-word prepositions, where the ﬁrst word
is an adverb, the second word a preposition. Both components of the multi-word preposi-
tion are anchors. The sentential subject can be indicative or inﬁnitive. Small clauses are
explained in much greater detail in section 9.3. 2 prepositions select this tree family.
Examples: due to, contrary to
that David slept until noon is due to the fact that he never sleeps during the week .
that Michael’s joke was funny is contrary to the usual status of his comic attempts .
Declarative tree: See Figure 6.37.

66
CHAPTER 6. VERB CLASSES
Sr
S0↓
VP
V
NA
ε
PP1
P1
Ad◊
P◊
NP1↓
Figure 6.37: Declarative PP Small Clause with Sentential Subject Tree, with two-word prepo-
sition, where the ﬁrst word is an adverb, and the second word is a preposition: αs0ARBPnx1
Other available trees: wh-moved subject, relative clause on object of the PP with and with-
out comp, adjunct (gap-less) relative clause with comp/with PP pied-piping.
6.38
PP Small Clause with Sentential Subject, and Adj and
Prep anchors: Ts0APnx1
Description: This tree family is selected by multi-word prepositions that take sentential sub-
jects. In particular, this family is selected by two-word prepositions, where the ﬁrst word
is an adjective, the second word a preposition. Both components of the multi-word prepo-
sition are anchors. The sentential subject can be indicative or inﬁnitive. Small clauses
are explained in much greater detail in section 9.3. 5 prepositions select this tree family.
Examples: devoid of, according to
that he could walk out on her is devoid of all reason .
that the conversation erupted precisely at that moment was according to my theory .
Declarative tree: See Figure 6.38.
Other available trees: wh-moved subject, relative clause on object of the PP with and with-
out comp, adjunct (gap-less) relative clause with comp/with PP pied-piping.
6.39
PP Small Clause with Sentential Subject, and Noun and
Prep anchors: Ts0NPnx1
Description: This tree family is selected by multi-word prepositions that take sentential sub-
jects. In particular, this family is selected by two-word prepositions, where the ﬁrst word
is a noun, the second word a preposition. Both components of the multi-word preposi-

6.39. PP SMALL CLAUSE WITH SENTENTIAL SUBJECT, AND NOUN AND PREP ANCHORS: TS0NPN
Sr
S0↓
VP
V
NA
ε
PP1
P1
A◊
P◊
NP1↓
Figure 6.38: Declarative PP Small Clause with Sentential Subject Tree, with two-word prepo-
sition, where the ﬁrst word is an adjective, and the second word is a preposition: αs0APnx1
tion are anchors. The sentential subject can be indicative or inﬁnitive. Small clauses are
explained in much greater detail in section 9.3. 1 preposition selects this tree family.
Examples: thanks to
that she is worn out is thanks to a long day in front of the computer terminal .
Declarative tree: See Figure 6.39.
Sr
S0↓
VP
V
NA
ε
PP1
P1
N◊
P◊
NP1↓
Figure 6.39: Declarative PP Small Clause with Sentential Subject Tree, with two-word prepo-
sition, where the ﬁrst word is a noun, and the second word is a preposition: αs0NPnx1
Other available trees: wh-moved subject, relative clause on object of the PP with and with-
out comp, adjunct (gap-less) relative clause with comp/with PP pied-piping.

68
CHAPTER 6. VERB CLASSES
6.40
PP Small Clause with Sentential Subject, and Prep an-
chors: Ts0PPnx1
Description: This tree family is selected by multi-word prepositions that take sentential sub-
jects. In particular, this family is selected by two-word prepositions, where both words are
prepositions. Both components of the multi-word preposition are anchors. The sentential
subject can be indicative or inﬁnitive. Small clauses are explained in much greater detail
in section 9.3. 3 prepositions select this tree family.
Examples: outside of
that Mary did not complete the task on time is outside of the scope of this discussion .
Declarative tree: See Figure 6.40.
Sr
S0↓
VP
V
NA
ε
PP1
P
P1◊
P2◊
NP1↓
Figure 6.40: Declarative PP Small Clause with Sentential Subject Tree, with two-word prepo-
sition, where both words are prepositions: αs0PPnx1
Other available trees: wh-moved subject, relative clause on object of the PP with and with-
out comp, adjunct (gap-less) relative clause with comp/with PP pied-piping.
6.41
PP Small Clause with Sentential Subject, and Prep and
Noun anchors: Ts0PNaPnx1
Description: This tree family is selected by multi-word prepositions that take sentential sub-
jects. In particular, this family is selected by three-word prepositions. The ﬁrst and third
words are always prepositions, and the middle word is a noun. The noun is marked for
null adjunction since it cannot be modiﬁed by noun modiﬁers. All three components
of the multi-word preposition are anchors. Small clauses are explained in much greater
detail in section 9.3. 9 prepositions select this tree family.
Examples: on account of, in support of
that Joe had to leave the beach was on account of the hurricane .

6.42. PREDICATIVE ADJECTIVE WITH SENTENTIAL SUBJECT AND COMPLEMENT: TS0A1S169
that Maria could not come is in support of my theory about her .
*that Maria could not come is in direct/strict/desparate support of my theory about her .
Declarative tree: See Figure 6.41.
Sr
S0↓
VP
V
NA
ε
PP1
P
P1◊
N◊
NA
P2◊
NP1↓
Figure 6.41: Declarative PP Small Clause with Sentential Subject Tree, with three-word prepo-
sition, where the middle noun is marked for null adjunction: αs0PNaPnx1
Other available trees: wh-moved subject, relative clause on object of the PP with and with-
out comp, adjunct (gap-less) relative clause with comp/with PP pied-piping.
6.42
Predicative Adjective with Sentential Subject and Com-
plement: Ts0A1s1
Description: This tree family is selected by predicative adjectives that take sentential subjects
and a sentential complement. This tree family is selected by likely and certain.
Examples: likely, certain
that Max continues to drive a Jaguar is certain to make Bill jealous .
for the Jaguar to be towed seems likely to make Max very angry .
Declarative tree: See Figure 6.42.
Other available trees: wh-moved subject, adjunct (gap-less) relative clause with comp/with
PP pied-piping.
6.43
Locative Small Clause with Ad anchor: Tnx0nx1ARB
Description: These trees are not anchored by verbs, but by adverbs that are part of locative
adverbial phrases. Locatives are explained in much greater detail in the section on the
locative modiﬁer trees (see section 19.6). The only remarkable aspect of this tree family is

70
CHAPTER 6. VERB CLASSES
Sr
S0↓
VP
V
NA
ε
AP1
A◊
S1↓
Figure 6.42: Predicative Adjective with Sentential Subject and Complement: αs0A1s1
the wh-moved locative tree, αW1nx0nx1ARB, shown in Figure 6.44. This is the only tree
family with this type of transformation, in which the entire adverbial phrase is wh-moved
but not all elements are replaced by wh items (as in how many city blocks away is the
record store?). Locatives that consist of just the locative adverb or the locative adverb
and a degree adverb (see Section 19.6 for details) are treated as exhaustive PPs and
therefore select that tree family (Section 6.28) when used predicatively. For an extensive
description of small clauses, see Section 9.3. 26 adverbs select this tree family.
Examples: ahead, oﬀshore, behind
the crash is three blocks ahead
the naval battle was many kilometers oﬀshore
how many blocks behind was Max?
Declarative tree: See Figure 6.43.
Sr
NP0↓
VP
V
NA
ε
AdvP
NP1↓
Ad◊
Figure 6.43: Declarative Locative Adverbial Small Clause Tree: αnx0nx1ARB
Other available trees: wh-moved subject, relative clause on subject with and without comp,
wh-moved locative, imperative, NP gerund.

6.44.
EXCEPTIONAL CASE MARKING: TXNX0VS1
71
S q
AdvP
NP ↓
Ad◊
S r
NP 0↓
VP
V
ε0
AdvP 1
NA
ε
Figure 6.44: Wh-moved Locative Small Clause Tree: αW1nx0nx1ARB
6.44
Exceptional Case Marking: TXnx0Vs1
Description: This tree family is selected by verbs that are classiﬁed as exceptional case mark-
ing, meaning that the verb asssigns accusative case to the subject of the sentential com-
plement. This is in contrast to verbs in the Tnx0Vnx1s2 family (section 6.6), which assign
accusative case to a NP which is not part of the sentential complement. ECM verbs take
sentential complements which are either an inﬁnitive or a “bare” inﬁnitive. As with the
Tnx0Vs1 family (section 6.12), the declarative and other trees in the Xnx0Vs1 family are
auxiliary trees, as opposed to the more common initial trees. These auxiliary trees adjoin
onto an S node in an existing tree of the type speciﬁed by the sentential complement.
This is the mechanism by which TAGs are able to maintain long-distance dependencies
(see Chapter 13), even over multiple embeddings (e.g. Who did Bill expect to eat beans?)
or who did Bill expect Mary to like? See section 8.6.1 for details on this family. 20 verbs
select this tree family.
Examples: expect, see
Van expects Bob to talk . Bob sees the harmonica fall .
Declarative tree: See Figure 6.45.
Sr
NP0↓
VP
V◊
S1*
Figure 6.45: ECM Tree: βXnx0Vs1

72
CHAPTER 6. VERB CLASSES
Other available trees: wh-moved subject, subject relative clause with and without comp,
adjunct (gap-less) relative clause with and without comp/with PP pied-piping, imperative,
NP gerund.
6.45
Idiom with V, D, and N anchors: Tnx0VDN1
Description: This tree family is selected by idiomatic phrases in which the verb, determiner,
and NP are all frozen (as in He kicked the bucket.). Only a limited number of transfor-
mations are allowed, as compared to the normal transitive tree family (see section 6.2).
Other idioms that have the same structure as kick the bucket, and that are limited to
the same transformations would select this tree, while diﬀerent tree families are used to
handle other idioms. Note that John kicked the bucket is actually ambiguous, and would
result in two parses - an idiomatic one (meaning that John died), and a compositional
transitive one (meaning that there is an physical bucket that John hit with his foot). 1
idiom selects this family.
Examples: kick the bucket
Nixon kicked the bucket .
Declarative tree: See Figure 6.46.
Sr
NP0↓
VP
V◊
NP1
DetP1
D1◊
N1◊
Figure 6.46: Declarative Transitive Idiom Tree: αnx0VDN1
Other available trees: subject relative clause with and without comp, declarative, wh-moved
subject, imperative, NP gerund, adjunct gapless relative with comp/with PP pied-piping,
passive, w/wo by-phrase, wh-moved object of by-phrase, wh-moved by-phrase, relative
(with and without comp) on subject of passive, PP relative.
6.46
Idiom with V, D, A, and N anchors: Tnx0VDAN1
Description: This tree family is selected by transitive idioms that are anchored by a verb,
determiner, adjective, and noun. 19 idioms select this family.

6.47.
IDIOM WITH V AND N ANCHORS: TNX0VN1
73
Examples: have a green thumb, sing a diﬀerent tune
Martha might have a green thumb, but it’s uncertain after the death of all the plants.
After his conversion John sang a diﬀerent tune.
Declarative tree: See Figure 6.47.
Sr
NP0 ↓
VP
V◊
NP1
D1 ◊
A◊
N1 ◊
Figure 6.47: Declarative Idiom with V, D, A, and N Anchors Tree: αnx0VDAN1
Other available trees: Subject relative clause with and without comp, adjunct relative clause
with comp/with PP pied-piping, wh-moved subject, imperative, NP gerund, passive with-
out by phrase, passive with by phrase, passive with wh-moved object of by phrase, passive
with wh-moved by phrase, passive with relative on object of by phrase with and without
comp.
6.47
Idiom with V and N anchors: Tnx0VN1
Description: This tree family is selected by transitive idioms that are anchored by a verb and
noun. 15 idioms select this family.
Examples: draw blood, cry wolf
Graham’s retort drew blood.
The neglected boy cried wolf.
Declarative tree: See Figure 6.48.
Other available trees: Subject relative clause with and without comp, adjunct relative clause
with comp/with PP pied-piping, wh-moved subject, imperative, NP gerund, passive with-
out by phrase, passive with by phrase, passive with wh-moved object of by phrase, passive
with wh-moved by phrase, passive with relative on object of by phrase with and without
comp.

74
CHAPTER 6. VERB CLASSES
Sr
NP0 ↓
VP
V◊
NP1
N1 ◊
Figure 6.48: Declarative Idiom with V and N Anchors Tree: αnx0VN1
6.48
Idiom with V, A, and N anchors: Tnx0VAN1
Description: This tree family is selected by transitive idioms that are anchored by a verb,
adjective, and noun. 4 idioms select this family.
Examples: break new ground, cry bloody murder
The avant-garde ﬁlm breaks new ground.
The investors cried bloody murder after the suspicious takeover.
Declarative tree: See Figure 6.49.
Sr
NP0 ↓
VP
V◊
NP1
A◊
N1 ◊
Figure 6.49: Declarative Idiom with V, A, and N Anchors Tree: αnx0VAN1
Other available trees: Subject relative clause with and without comp, adjunct relative clause
with comp/with PP pied-piping, wh-moved subject, imperative, NP gerund, passive with-
out by phrase, passive with by phrase, passive with wh-moved object of by phrase, passive
with wh-moved by phrase, passive with relative on object of by phrase with and without
comp.

6.49.
IDIOM WITH V, D, A, N, AND PREP ANCHORS: TNX0VDAN1PNX2
75
6.49
Idiom with V, D, A, N, and Prep anchors: Tnx0VDAN1Pnx2
Description: This tree family is selected by transitive idioms that are anchored by a verb,
determiner, adjective, noun, and preposition. 6 idioms select this family.
Examples: make a big deal about, make a great show of
John made a big deal about a miniscule dent in his car.
The company made a big show of paying generous dividends.
Declarative tree: See Figure 6.50.
Sr
NP0 ↓
VP
V◊
NP1
D1 ◊
A◊
N1 ◊
PP2
P2 ◊
NP2 ↓
Figure 6.50: Declarative Idiom with V, D, A, N, and Prep Anchors Tree: αnx0VDAN1Pnx2
Other available trees: Subject relative clause with and without comp, adjunct relative clause
with comp/with PP pied-piping, wh-moved subject, imperative, NP gerund, passive with-
out by phrase, passive with by phrase, passive with wh-moved object of by phrase, passive
with wh-moved by phrase,
outer passive without by phrase, outer passive with by phrase, outer passive with wh-
moved by phrase, outer passive with wh-moved object of by phrase, outer passive without
by phrase with relative on the subject with and without comp, outer passive with by
phrase with relative on subject with and without comp.
6.50
Idiom with V, A, N, and Prep anchors: Tnx0VAN1Pnx2
Description: This tree family is selected by transitive idioms that are anchored by a verb,
adjective, noun, and preposition. 3 idioms select this family.
Examples: make short work of
John made short work of the glazed ham.
Declarative tree: See Figure 6.51.

76
CHAPTER 6. VERB CLASSES
Sr
NP0 ↓
VP
V◊
NP1
A◊
N1 ◊
PP2
P2 ◊
NP2 ↓
Figure 6.51: Declarative Idiom with V, A, N, and Prep Anchors Tree: αnx0VAN1Pnx2
Other available trees: Subject relative clause with and without comp, adjunct relative clause
with comp/with PP pied-piping, wh-moved subject, imperative, NP gerund, passive with-
out by phrase, passive with by phrase, passive with wh-moved object of by phrase, passive
with wh-moved by phrase,
outer passive without by phrase, outer passive with by phrase, outer passive with wh-
moved by phrase, outer passive with wh-moved object of by phrase, outer passive without
by phrase with relative on the subject with and without comp, outer passive with by
phrase with relative on subject with and without comp.
6.51
Idiom with V, N, and Prep anchors: Tnx0VN1Pnx2
Description: This tree family is selected by transitive idioms that are anchored by a verb,
noun, and preposition. 6 idioms select this family.
Examples: look daggers at, keep track of
Maria looked daggers at her ex-husband across the courtroom.
The company kept track of its inventory.
Declarative tree: See Figure 6.52.
Other available trees: Subject relative clause with and without comp, adjunct relative clause
with comp/with PP pied-piping, wh-moved subject, imperative, NP gerund, passive with-
out by phrase, passive with by phrase, passive with wh-moved object of by phrase, passive
with wh-moved by phrase,
outer passive without by phrase, outer passive with by phrase, outer passive with wh-
moved by phrase, outer passive with wh-moved object of by phrase, outer passive without
by phrase with relative on the subject with and without comp, outer passive with by
phrase with relative on subject with and without comp.

6.52.
IDIOM WITH V, D, N, AND PREP ANCHORS: TNX0VDN1PNX2
77
Sr
NP0 ↓
VP
V◊
NP1
N1 ◊
PP2
P2 ◊
NP2 ↓
Figure 6.52: Declarative Idiom with V, N, and Prep Anchors Tree: αnx0VN1Pnx2
6.52
Idiom with V, D, N, and Prep anchors: Tnx0VDN1Pnx2
Description: This tree family is selected by transitive idioms that are anchored by a verb,
determiner, noun, and preposition. 17 idioms select this family.
Examples: make a mess of, keep the lid on
John made a mess out of his new suit.
The tabloid didn’t keep a lid on the imminent celebrity nuptials.
Declarative tree: See Figure 6.53.
Sr
NP0 ↓
VP
V◊
NP1
D1 ◊
N1 ◊
PP2
P2 ◊
NP2 ↓
Figure 6.53: Declarative Idiom with V, D, N, and Prep Anchors Tree: αnx0VDN1Pnx2
Other available trees: Subject relative clause with and without comp, adjunct relative clause
with comp/with PP pied-piping, wh-moved subject, imperative, NP gerund, passive with-
out by phrase, passive with by phrase, passive with wh-moved object of by phrase, passive
with wh-moved by phrase,
outer passive without by phrase, outer passive with by phrase, outer passive with wh-
moved by phrase, outer passive with wh-moved object of by phrase, outer passive without

78
CHAPTER 6. VERB CLASSES
by phrase with relative on the subject with and without comp, outer passive with by
phrase with relative on subject with and without comp.

Chapter 7
Ergatives
Verbs in English that are termed ergative display the kind of alternation shown in the sentences
in (7) below.
(7) The sun melted the ice .
The ice melted .
The pattern of ergative pairs as seen in (7) is for the object of the transitive sentence to
be the subject of the intransitive sentence. The literature discussing such pairs is based largely
on syntactic models that involve movement, particularly GB. Within that framework two basic
approaches are discussed:
• Derived Intransitive
The intransitive member of the ergative pair is derived through processes of movement
and deletion from:
– a transitive D-structure [Burzio, 1986]; or
– transitive lexical structure [Hale and Keyser, 1986; Hale and Keyser, 1987]
• Pure Intransitive
The intransitive member is intransitive at all levels of the syntax and the lexicon and is
not related to the transitive member syntactically or lexically [Napoli, 1988].
The Derived Intransitive approach’s notions of movement in the lexicon or in the grammar
are not represented as such in the XTAG grammar. However, distinctions drawn in these ar-
guments can be translated to the FB-LTAG framework. In the XTAG grammar the diﬀerence
between these two approaches is not a matter of movement but rather a question of tree fam-
ily membership. The relation between sentences represented in terms of movement in other
frameworks is represented in XTAG by membership in the same tree family. Wh-questions and
their indicative counterparts are one example of this. Adopting the Pure Intransitive approach
suggested by [Napoli, 1988] would mean placing the intransitive ergatives in a tree family with
other intransitive verbs and separate from the transitive variants of the same verbs. This would
result in a grammar that represented intransitive ergatives as more closely related to other
intransitives than to their transitive counterparts. The only hint of the relation between the
79

80
CHAPTER 7. ERGATIVES
intransitive ergatives and the transitive ergatives would be that ergative verbs would select
both tree families. While this is a workable solution, it is an unattractive one for the English
XTAG grammar because semantic coherence is implicitly associated with tree families in our
analysis of other constructions.
In particular, constancy in thematic role is represented by
constancy in node names across sentence types within a tree family. For example, if the object
of a declarative tree is NP1 the subject of the passive tree(s) in that family will also be NP1.
The analysis that has been implemented in the English XTAG grammar is an adaptation
of the Derived Intransitive approach. The ergative verbs select one family, Tnx0Vnx1, that
contains both transitive and intransitive trees. The <trans> feature appears on the intransitive
ergative trees with the value – and on the transitive trees with the value +. This creates the
two possibilities needed to account for the data.
• intransitive ergative/transitive alternation. These verbs have transitive and intran-
sitive variants as shown in sentences (8) and (9).
(8) The sun melted the ice cream .
(9) The ice cream melted .
In the English XTAG grammar, verbs with this behavior are left unspeciﬁed as to value
for the <trans> feature. This lack of speciﬁcation allows these verbs to anchor either
type of tree in the Tnx0Vnx1 tree family because the unspeciﬁed <trans> value of the
verb can unify with either + or – values in the trees.
• transitive only. Verbs of this type select only the transitive trees and do not allow
intransitive ergative variants as in the pattern show in sentences (10) and (11).
(10) Elmo borrowed a book .
(11) ∗A book borrowed .
The restriction to selecting only transitive trees is accomplished by setting the <trans>
feature value to + for these verbs.
Sr
NP1↓
VP
V◊trans : -
Figure 7.1: Ergative Tree: αEnx1V
The declarative ergative tree is shown in Figure 7.1 with the <trans> feature displayed.
Note that the index of the subject NP indicates that it originated as the object of the verb.

Chapter 8
Sentential Subjects and Sentential
Complements
In the XTAG grammar, arguments of a lexical item, including subjects, appear in the initial tree
anchored by that lexical item. A sentential argument appears as an S node in the appropriate
position within an elementary tree anchored by the lexical item that selects it. This is the case
for sentential complements of verbs, prepositions and nouns and for sentential subjects. The
distribution of complementizers in English is intertwined with the distribution of embedded
sentences. A successful analysis of complementizers in English must handle both the cooccur-
rence restrictions between complementizers and various types of clauses, and the distribution
of the clauses themselves, in both subject and complement positions.
8.1
S or VP complements?
Two comparable grammatical formalisms, Generalized Phrase Structure Grammar (GPSG)
[Gazdar et al., 1985] and Head-driven Phrase Structure Grammar (HPSG) [Pollard and Sag,
1994], have rather diﬀerent treatments of sentential complements (S-comps). They both treat
embedded sentences as VP’s with subjects, which generates the correct structures but misses
the generalization that S’s behave similarly in both matrix and embedded environments, and
VP’s behave quite diﬀerently. Neither account has PRO subjects of inﬁnitival clauses– they
have subjectless VP’s instead. GPSG has a complete complementizer system, which appears
to cover the same range of data as our analysis. It is not clear what sort of complementizer
analysis could be implemented in HPSG.
Following standard GB approach, the English XTAG grammar does not allow VP com-
plements but treats verb-anchored structures without overt subjects as having PRO subjects.
Thus, indicative clauses, inﬁnitives and gerunds all have a uniform treatment as embedded
clauses using the same trees under this approach. Furthermore, our analysis is able to preserve
the selectional and distributional distinction between S’s and VP’s, in the spirit of GB theories,
without having to posit ‘extra’ empty categories.1 Consider the alternation between that and
the null complementizer2, shown in sentences (12) and (13).
1i.e. empty complementizers. We do have PRO and NP traces in the grammar.
2Although we will continue to refer to ‘null’ complementizers, in our analysis this is actually the absence of
81

82
CHAPTER 8. SENTENTIAL SUBJECTS AND SENTENTIAL COMPLEMENTS
(12) He hopes ∅Muriel wins.
(13) He hopes that Muriel wins.
In GB both Muriel wins in (12) and that Muriel wins in (13) are CPs even though there
is no overt complementizer to head the phrase in (12). Our grammar does not distinguish by
category label between the phrases that would be labeled in GB as IP and CP. We label both
of these phrases S. The diﬀerence between these two levels is the presence or absence of the
complementizer (or extracted WH constituent), and is represented in our system as a diﬀerence
in feature values (here, of the <comp> feature), and the presence of the additional structure
contributed by the complementizer or extracted constituent.
This illustrates an important
distinction in XTAG, that between features and node labels. Because we have a sophisticated
feature system, we are able to make ﬁne-grained distinctions between nodes with the same label
which in another system might have to be realized by using distinguishing node labels.
8.2
Complementizers and Embedded Clauses in English: The
Data
Verbs selecting sentential complements (or subjects) place restrictions on their complements,
in particular, on the form of the embedded verb phrase.3 Furthermore, complementizers are
constrained to appear with certain types of clauses, again, based primarily on the form of the
embedded VP. For example, hope selects both indicative and inﬁnitival complements. With
an indicative complement, it may only have that or null as possible complementizers; with an
inﬁnitival complement, it may only have a null complementizer. Verbs that allow wh+ comple-
mentizers, such as ask, can take whether and if as complementizers. The possible combinations
of complementizers and clause types is summarized in Table 8.1.
As can be seen in Table 8.1, sentential subjects diﬀer from sentential complements in re-
quiring the complementizer that for all indicative and subjunctive clauses. In sentential com-
plements, that often varies freely with a null complementizer, as illustrated in (14)-(19).
(14) Christy hopes that Mike wins.
(15) Christy hopes Mike wins.
(16) Dania thinks that Newt is a liar.
(17) Dania thinks Newt is a liar.
(18) That Helms won so easily annoyed me.
(19) ∗Helms won so easily annoyed me.

8.2. COMPLEMENTIZERS AND EMBEDDED CLAUSES IN ENGLISH: THE DATA
83
Complementizer:
that
whether
if
for
null
Clause type
indicative
subject
Yes
Yes
No
No
No
complement
Yes
Yes
Yes
No
Yes
inﬁnitive
subject
No
Yes
No
Yes
Yes
complement
No
Yes
No
Yes
Yes
subjunctive
subject
Yes
No
No
No
No
complement
Yes
No
No
No
Yes
gerundive4
complement
No
No
No
No
Yes
base
complement
No
No
No
No
Yes
small clause
complement
No
No
No
No
Yes
Table 8.1: Summary of Complementizer and Clause Combinations
Another fact which must be accounted for in the analysis is that in inﬁnitival clauses,
the complementizer for must appear with an overt subject NP, whereas a complementizer-less
inﬁnitival clause never has an overt subject, as shown in (20)-(23). (See section 8.5 for more
discussion of the case assignment issues relating to this construction.)
(20) To lose would be awful.
(21) For Penn to lose would be awful.
(22) ∗For to lose would be awful.
(23) ∗Penn to lose would be awful.
In addition, some verbs select <wh>=+ complements (either questions or clauses with
whether or if) [Grimshaw, 1990]:
(24) Jesse wondered who left.
(25) Jesse wondered if Barry left.
(26) Jesse wondered whether to leave.
a complementizer.
3Other considerations, such as the relationship between the tense/aspect of the matrix clause and the
tense/aspect of a complement clause are also important but are not currently addressed in the current English
XTAG grammar.
4Most gerundive phrases are treated as NP’s. In fact, all gerundive subjects are treated as NP’s, and the only
gerundive complements which receive a sentential parse are those for which there is no corresponding NP parse.
This was done to reduce duplication of parses. See Chapter 17 for further discussion of gerunds.

84
CHAPTER 8. SENTENTIAL SUBJECTS AND SENTENTIAL COMPLEMENTS
(27) Jesse wondered whether Barry left.
(28) ∗Jesse thought who left.
(29) ∗Jesse thought if Barry left.
(30) ∗Jesse thought whether to leave.
(31) ∗Jesse thought whether Barry left.
8.3
Features Required
As we have seen above, clauses may be <wh>=+ or <wh>=–, may have one of several com-
plementizers or no complementizer, and can be of various clause types. The XTAG analysis
uses three features to capture these possibilities: <comp> for the variation in complemen-
tizers, <wh> for the question vs. non-question alternation and <mode>5 for clause types.
In addition to these three features, the <assign-comp> feature represents complementizer
requirements of the embedded verb. More detailed discussion of the <assign-comp> feature
appears below in the discussions of sentential subjects and of inﬁnitives. The four features and
their possible values are shown in Table 8.2.
Feature
Values
<comp>
that, if, whether, for, rel, nil
<mode>
ind, inf, subjnt, ger, base, ppart, nom/prep
<assign-comp>
that, if, whether, for, rel, ind nil, inf nil
<wh>
+,–
Table 8.2: Summary of Relevant Features
8.4
Distribution of Complementizers
Like other non-arguments, complementizers anchor an auxiliary tree (shown in Figure 8.1)
and adjoin to elementary clausal trees.
The auxiliary tree for complementizers is the only
alternative to having a complementizer position ‘built into’ every sentential tree. The latter
choice would mean having an empty complementizer substitute into every matrix sentence and
a complementizerless embedded sentence to ﬁll the substitution node. Our choice follows the
XTAG principle that initial trees consist only of the arguments of the anchor6 – the S tree does
not contain a slot for a complementizer, and the βCOMP tree has only one argument, an S
with particular features determined by the complementizer. Complementizers select the type
of clause to which they adjoin through constraints on the <mode> feature of the S foot node

8.5. CASE ASSIGNMENT, FOR AND THE TWO TO’S
85
Sc
comp : <1>
inv : -
displ-const : <2>
wh : <3>
mode : <4> ind/sbjnct
Comp wh : <3>
comp : <1>
wh : -
comp : that
that
Sr*
NA
inv : -
assign-comp : <1>
wh : -
mode : <4>
comp : nil
sub-conj : nil
displ-const : <2>
assign-comp : that
Figure 8.1: Tree βCOMPs, anchored by that
in the tree shown in Figure 8.1. These features also pass up to the root node, so that they are
‘visible’ to the tree where the embedded sentence adjoins/substitutes.
The grammar handles the following complementizers: that, whether, if , for, and no comple-
mentizer, and the clause types: indicative, inﬁnitival, gerundive, past participial, subjunctive
and small clause (nom/prep). The <comp> feature in a clausal tree reﬂects the value of the
complementizer if one has adjoined to the clause.
The <comp> and <wh> features receive their root node values from the particular com-
plementizer which anchors the tree. The βCOMPs tree adjoins to an S node with the feature
<comp>=nil; this feature indicates that the tree does not already have a complementizer
adjoined to it.7 We ensure that there are no stacked complementizers by requiring the foot
node of βCOMPs to have <comp>=nil.
8.5
Case assignment, for and the two to’s
The <assign-comp> feature is used to represent the requirements of particular types of clauses
for particular complementizers. So while the <comp> feature represents constraints originat-
ing from the VP dominating the clause, the <assign-comp> feature represents constraints
originating from the highest VP in the clause. <assign-comp> is used to control the
the appearance of subjects in inﬁnitival clauses (see discussion of ECM constructions in
8.6.1), to block bare indicative sentential subjects (bare inﬁnitival subjects are allowed), and
5<mode> actually conﬂates several types of information, in particular verb form and mood.
6See section 4.2 for a discussion of the diﬀerence between complements and adjuncts in the XTAG grammar.
7 Because root S’s cannot have complementizers, the parser checks that the root S has <comp>=nil at the
end of the derivation, when the S is also checked for a tensed verb.

86
CHAPTER 8. SENTENTIAL SUBJECTS AND SENTENTIAL COMPLEMENTS
to block ‘that-trace’ violations.
Examples (33), (34) and (35) show that an accusative case subject is obligatory in an
inﬁnitive clause if the complementizer for is present. The inﬁnitive clauses in (32) is analyzed
in the English XTAG grammar as having a PRO subject.
(32) Christy wants to pass the exam.
(33) Mike wants for her to pass the exam.
(34) ∗Mike wants for she to pass the exam.
(35) ∗Christy wants for to pass the exam.
The for-to construction is particularly illustrative of the diﬃculties and beneﬁts faced in
using a lexicalized grammar. It is commonly accepted that for behaves as a case-assigning
complementizer in this construction, assigning accusative case to the ‘subject’ of the clause
since the inﬁnitival verb does not assign case to its subject position. However, in our featurized
grammar, the absence of a feature licenses anything, so we must have overt null case assigned
by inﬁnitives to ensure the correct distribution of PRO subjects. (See section 4.4 for more dis-
cussion of case assignment.) This null case assignment clashes with accusative case assignment
if we simply add for as a standard complementizer, since NP’s (including PRO) are drawn from
the lexicon already marked for case. Thus, we must use the <assign-comp> feature to pass
information about the verb up to the root of the embedded sentence. To capture these facts,
two inﬁnitive to’s are posited. One inﬁnitive to has <assign-case>=none which forces a PRO
subject, and <assign-comp>=inf nil which prevents for from adjoining. The other inﬁnitive
to has no value at all for <assign-case> and has <assign-comp>=for/ecm, so that it can
only occur either with the complementizer for or with ECM constructions. In those instances
either for or the ECM verb supplies the <assign-case> value, assigning accusative case to the
overt subject.
8.6
Sentential Complements of Verbs
Tree families: Tnx0Vs1, Tnx0Vnx1s2, TItVnx1s2, TItVpnx1s2, TItVad1s2.
Verbs that select sentential complements restrict the <mode> and <comp> values for
those complements. Since with very few exceptions8 long distance extraction is possible from
sentential complements, the S complement nodes are adjunction nodes. Figure 8.2 shows the
declarative tree for sentential complements, anchored by think.
The need for an adjunction node rather than a substitution node at S1 may not be obvious
until one considers the derivation of sentences with long distance extractions. For example, the
declarative in (36) is derived by adjoining the tree in Figure 8.3(b) to the S1 node of the tree in
Figure 8.3(a). Since there are no bottom features on S1, the same ﬁnal result could have been
achieved with a substitution node at S1.
(36) The emu thinks that the aardvark smells terrible.

8.6. SENTENTIAL COMPLEMENTS OF VERBS
87
Sr
NP0↓
VP
V
think
S1*
Figure 8.2: Sentential complement tree: βnx0Vs1
Sr
NP
DetP
D
the
N
aardvark
VP
V
smells
A
terrible
Sr
NP
DetP
D
the
N
emu
VP
V
thinks
S1*
(a)
(b)
Figure 8.3: Trees for The emu thinks that the aardvark smells terrible.
However, adjunction is crucial in deriving sentences with long distance extraction, as in
sentences (37) and (38).
(37) Who does the emu think smells terrible?
(38) Who did the elephant think the panda heard the emu say smells terrible?
The example in (37) is derived from the trees for who smells terrible? shown in Figure 8.4
and the emu thinks S shown in Figure 8.3(b), by adjoining the latter at the Sr node of the
former.9 This process is recursive, allowing sentences like (38). Such a representation has been
shown by [Kroch and Joshi, 1985] to be well-suited for describing unbounded dependencies.
In English, a complementizer may not appear on a complement with an extracted subject
(the ‘that-trace’ conﬁguration). This phenomenon is illustrated in (39)-(41):
(39) Which animal did the giraﬀe say that he likes?
8For example, long distance extraction is not possible from the S complement in it-clefts.
9See Chapter 20 for a discussion of do-support.

88
CHAPTER 8. SENTENTIAL SUBJECTS AND SENTENTIAL COMPLEMENTS
Sq
NP
N
who
Sr
NP0
NA
ε
VP
V
smells
A
terrible
Figure 8.4: Tree for Who smells terrible?
(40) ∗Which animal did the giraﬀe say that likes him?
(41) Which animal did the giraﬀe say likes him?
These sentences are derived in XTAG by adjoining the tree for did the giraﬀe say S at
the Sr node of the tree for either which animal likes him (to yield sentence (41)) or which
animal he likes (to yield sentence (39)).
That-trace violations are blocked by the presence
of the feature <assign-comp>=inf nil/ind nil/ecm feature on the bottom of the Sr node
of trees with extracted subjects (W0), i.e.
those used in sentences such as (40) and (41).
If a complementizer tree, βCOMPs, adjoins to a subject extraction tree at Sr, its <assign-
comp> = that/whether/for/if feature will clash and the derivation will fail. If there is no
complementizer, there is no feature clash, and this will permit the derivation of sentences like
(41), or of ECM constructions, in which case the ECM verb will have <assign-comp>=ecm
(see section 8.6.1 for more discussion of the ECM case). Complementizers may adjoin normally
to object extraction trees such as those used in sentence (39), and so object extraction trees
have no value for the <assign-comp> feature.
In the case of indirect questions, subjacency follows from the principle that a given tree
cannot contain more than one wh-element. Extraction out of an indirect question is ruled out
because a sentence like:
(42) ∗Whoi do you wonder whoj ej loves ei ?
would have to be derived from the adjunction of do you wonder into whoi whoj ej loves ei,
which is an ill-formed elementary tree.10
10This does not mean that elementary trees with more than one gap should be ruled out across the grammar.
Such trees might be required for dealing with parasitic gaps or gaps in coordinated structures.

8.6. SENTENTIAL COMPLEMENTS OF VERBS
89
8.6.1
Exceptional Case Marking Verbs
Tree family: TXnx0Vs1 Exceptional Case Marking verbs are those which assign accusative
case to the subject of the sentential complement. This is in contrast to verbs in the Tnx0Vnx1s2
family (section 6.6), which assign accusative case to an NP which is not part of the sentential
complement.
The subject of an ECM inﬁnitive complement is assigned accusative case is a manner anal-
ogous to that of a subject in a for-to construction, as described in section 8.5. As in the for-to
case, the ECM verb assigns accusative case into the subject of the lower inﬁnitive, and so the in-
ﬁnitive uses the to which has no value for <assign-case> and has <assign-comp>=for/ecm.
The ECM verb has <assign-comp>=ecm and <assign-case>=acc on its foot. The former
allows the <assign-comp> features of the ECM verb and the to tree to unify, and so be used
together, and the latter assigns the accusative case to the lower subject.
Figure 8.5 shows the declarative tree for the tree for the TXnx0Vs1 family, in this case
anchored by expects. Figure 8.6 shows a parse for Van expects Bob to talk
Sr
NP0 ↓
VP
V
expects
S1 *
displ-const
:
set1 :
-
assign-comp :
ecm
inv :
-
extracted
:
-
control
: <2>
punct :
contains
: <10>
comp:
nil
mode:
inf
wh:
-
Figure 8.5: ECM tree: βXnx0Vs1
The ECM and for-to cases are analogous in how they are used together with the correct
inﬁnitival to to assign accusative case to the subject of the lower inﬁnitive. However, they are
diﬀerent in that for is blocked along with other complementizers in subject extraction contexts,
as discussed in section 8.6, as in (43), while subject extraction is compatible with ECM cases,
as in (44).
(43) ∗What child did the giraﬀe ask for to leave?
(44) Who did Bill expect to eat beans?

90
CHAPTER 8. SENTENTIAL SUBJECTS AND SENTENTIAL COMPLEMENTS
Sr
NP
N
Van
VP
V
expects
S1
NP
N
Bob
VPr
V
to
VP
NA
V
talk
Figure 8.6: Sample ECM parse
Sentence (43) is ruled out by the <assign-comp>= inf nil/ind nil/ecm feature on the
subject extraction tree for ask, since the <assign-comp>=for feature from the for tree will
fail to unify. However, (44) will be allowed since <assign-comp>=ecm feature on the expect
tree will unify with the foot of the ECM verb tree. The use of features allows the ECM and for-
to constructions to act the same for exceptional case assignment, while also being distinguished
for that-trace violations.
Verbs that take bare inﬁnitives, as in (45), are also treated as ECM verbs, the only diﬀerence
being that their foot feature has <mode>=base instead of <mode>=inf. Since the comple-
ment does not have to, there is no question of using the to tree for allowing accusative case to be
assigned. Instead, verbs with <mode>=base allow either accusative or nominative case to be
assigned to the subject, and the foot of the ECM bare inﬁnitive tree forces it to be accusative
by its <assign-case>=acc value at its foot node uniﬁes with the <assign-case>=nom/acc
value of the bare inﬁnitive clause.
(45) Bob sees the harmonica fall.
The trees in the TXnx0Vs1 family are generally parallel to those in the Tnx0Vs1 family,
except for the <assign-case> and <assign-comp> values on the foot nodes. However, the
TXnx0Vs1 family also includes a tree for the passive, which of course is not included in the
Tnx0Vs1 family. Unlike all the other trees in the TXnx0Vs1 family, the passive tree is not rooted
in S, and is instead a VP auxiliary tree. Since the subject of the inﬁnitive is not thematically
selected by the ECM verb, it is not part of the ECM verb’s tree, and so it cannot be part of
the passive tree. Therefore, the passive acts as a raising verb (see section 9.3). For example,
to derive (47), the tree in Figure 8.7 would adjoin into a derivation for Bob to talk at the VP

8.7. SENTENTIAL SUBJECTS
91
node (and the <mode>=passive feature, not shown, forces the auxiliary to adjoin in, as for
other passives, as described in chapter 12).
(46) Van expects Bob to talk.
(47) Bob was expected to talk.
VPr
V
expected
VP*
Figure 8.7: ECM passive
It has long been noted that passives of both full and bare inﬁnitive ECM constructions are
full inﬁnitives, as in (47) and (49).
(48) Bob sees the harmonica fall.
(49) The harmonica was seen to fall.
(50) ∗The harmonica was seen fall.
Under the TAG ECM analysis, this fact is easy to implement. The foot node of the ECM
passive tree is simply set to have <mode>=inf, which prevents the derivation of (50). There-
fore, for all the other trees in the family, to foot nodes are set to have <mode>=base or
<mode>=inf depending on whether it is a bare inﬁnitive or not. These foot nodes are all S
nodes. The VP foot node of the passive tree, however, has <mode>=inf regardless.
8.7
Sentential Subjects
Tree families: Ts0Vnx1, Ts0Ax1, Ts0N1, Ts0Pnx1, Ts0ARBPnx1, Ts0PPnx1, Ts0PNaPnx1,
Ts0V, Ts0Vtonx1, Ts0NPnx1, Ts0APnx1, Ts0A1s1.
Verbs that select sentential subjects anchor trees that have an S node in the subject position
rather than an NP node. Since extraction is not possible from sentential subjects, they are
implemented as substitution nodes in the English XTAG grammar. Restrictions on sentential
subjects, such as the required that complementizer for indicatives, are enforced by feature values
speciﬁed on the S substitution node in the elementary tree.

92
CHAPTER 8. SENTENTIAL SUBJECTS AND SENTENTIAL COMPLEMENTS
Sentential subjects behave essentially like sentential complements, with a few exceptions.
In general, all verbs which license sentential subjects license the same set of clause types. Thus,
unlike sentential complement verbs which select particular complementizers and clause types,
the matrix verbs licensing sentential subjects merely license the S argument. Information about
the complementizer or embedded verb is located in the tree features, rather than in the features
of each verb selecting that tree. Thus, all sentential subject trees have the same <mode>,
<comp> and <assign-comp> values shown in Figure 8.8(a).
Sr
S0↓extracted : -
inv : -
assign-comp
: inf_nil
comp : that/for/whether/nil
mode : inf/ind
VP
V
perplexes
NP1↓
Sr
NP0↓
VP
V
thinks
S1*
NA
displ-const
: set1 : -
assign-comp
: inf_nil/ind_nil
inv : -
control : <6>
punct : contains : <14>
comp : that/nil
mode : ind
wh : -
(a)
(b)
Figure 8.8: Comparison of <assign-comp> values for sentential subjects: αs0Vnx1 (a) and
sentential complements: βnx0Vs1 (b)
The major diﬀerence in clause types licensed by S-subjs and S-comps is that indicative S-
subjs obligatorily have a complementizer (see examples in section 8.2). The <assign-comp>
feature is used here to license a null complementizer for inﬁnitival but not indicative clauses.
<assign-comp> has the same possible values as <comp>, with the exception that the nil
value is ‘split’ into ind nil and inf nil.
This diﬀerence in feature values is illustrated in
Figure 8.8.
Another minor diﬀerence is that whether but not if is grammatical with S-subjs.11 Thus, if
is not among the <comp> values allowed in S-subjs. The ﬁnal diﬀerence from S-comps is that
there are no S-subjs with <mode>=ger. As noted in footnote 4 of this chapter, gerundive
complements are only allowed when there is no corresponding NP parse. In the case of gerundive
S-subjs, there is always an NP parse available.
8.8
Nouns and Prepositions taking Sentential Complements
Trees: αNXNs, βvxPs, βPss, βnxPs, Tnx0N1s1, Tnx0A1s1.
Prepositions and nouns can also select sentential complements, using the trees listed above.
These trees use the <mode> and <comp> features as shown in Figure 8.9. For example, the
11Some speakers also ﬁnd if as a complementizer only marginally grammatical in S-comps.

8.9. PRO CONTROL
93
Sr
S1
NA
P◊
S↓rel-pron : <9>
punct :
struct : nil
displ-const :
set1 : -
inv : -
extracted : -
wh : -
Sf*
NA
NPr
N◊
S↓mode : inf/ind
comp : that/nil
inv : -
extracted : -
(a)
(b)
Figure 8.9: Sample trees for preposition: βPss (a) and noun: αNXNs (b) taking sentential
complements
noun claim takes only indicative complements with that, while the preposition with takes small
clause complements, as seen in sentences (51)-(54).
(51) Beth’s claim that Clove was a smart dog....
(52) ∗Beth’s claim that Clove a smart dog....
(53) Dania wasn’t getting any sleep with Doug sick.
(54) ∗Dania wasn’t getting any sleep with Doug was sick.
8.9
PRO control
8.9.1
Types of control
In the literature on control, two types are often distinguished: obligatory control, as in sen-
tences (55), (56), (57), and (58) and optional control, as in sentence (59).
(55) Srinii promised Mickeyi [PROi to leave].
(56) Srini persuaded Mickeyi [PROi to leave].
(57) Srinii wanted [PROi to leave].
(58) Christyi left the party early [PROi to go to the airport].

94
CHAPTER 8. SENTENTIAL SUBJECTS AND SENTENTIAL COMPLEMENTS
(59) [PROarb/i to dance] is important for Billi.
At present, an analysis for obligatory control into complement clauses (as in sentences (55),
(56), and (57)) has been implemented. An analysis for cases of obligatory control into adjunct
clauses and optional control exists and can be found in [Bhatt, 1994].
8.9.2
A feature-based analysis of PRO control
The analysis for obligatory control involves co-indexation of the control feature of the NP
anchored by PRO to the control feature of the controller.
A feature equation in the tree
anchored by the control verb co-indexes the control feature of the controlling NP with the foot
node of the tree. All sentential trees have a co-indexed control feature from the root S to the
subject NP.
When the tree containing the controller adjoins onto the complement clause tree containing
the PRO, the features of the foot node of the auxiliary tree are uniﬁed with the bottom features
of the root node of the complement clause tree containing the PRO. This leads to the control
feature of the controller being co-indexed with the control feature of the PRO.
Depending on the choice of the controlling verb, the control propagation paths in the auxil-
iary trees are diﬀerent. In the case of subject control (as in sentence (56)), the subject NP and
the foot node are have co-indexed control features, while for object control (e.g. sentence (55),
the object NP and the foot node are co-indexed for control. Among verbs that belong to the
Tnx0Vnx1s2 family, i.e. verbs that take an NP object and a clausal complement, subject-control
verbs form a distinct minority, promise being the only commonly used verb in this class.
Consider the derivation of sentence (56). The auxiliary tree for persuade, shown in Figure
8.10, has the following feature equation (60).
(60) NP1:<control> = S2.t:<control>
The auxiliary tree adjoins into the tree for leave, shown in Figure 8.11, which has the following
feature equation (61).
(61) Sr.b:<control> = NP0.t:<control>
Since the adjunction takes place at the root node (Sr) of the leave tree, after uniﬁcation, NP1
of the persuade tree and NP0 of the leave tree share a control feature. The resulting derived
and derivation trees are shown in Figures 8.12 and 8.13.
8.9.3
The nature of the control feature
The control feature does not have any value and is used only for co-indexing purposes. If two
NPs have their control features co-indexed, it means that they are participating in a relationship
of control; the c-commanding NP controls the c-commanded NP.
8.9.4
Long-distance transmission of control features
Cases involving embedded inﬁnitival complements with PRO subjects such as (62) can also be
handled.

8.9. PRO CONTROL
95
Sr
NP0↓
VP
V
persuaded
NP1↓control : <1>
S2*
NA
control : <1>
Figure 8.10: Tree for persuaded
Sr
control : <1>
NP0↓control : <1>
VP
V
leave
Figure 8.11: Tree for leave
(62) Johni wants [PROi to want [PROi to dance]].
The control feature of ‘John’ and the two PRO’s all get co-indexed. This treatment might
appear to lead to a problem. Consider (63):
(63) John∗i wants [Maryi to want [PROi to dance]].
If both the ‘want’ trees have the control feature of their subject co-indexed to their foot
nodes, we would have a situtation where the PRO is co-indexed for control feature with ‘John’,
as well as with ‘Mary’. Note that the higher ‘want’ in (62) is wantECM - it assigns case to the
subject of the lower clause while the lower ‘want’ in (62) is not. Subject control is restricted to
non-ECM (Exceptional Case Marking) verbs that take inﬁnitival complements. Since the two
‘want’s in (62) are diﬀerent with respect to their control (and other) properties, the control
feature of PRO stops at ‘Mary’ and is not transmitted to the higher clause.
8.9.5
Locality constraints on control
PRO control obeys locality constraints. The controller for PRO has to be in the immediately
higher clause. Consider the ungrammatical sentence (64) ((64) is ungrammatical only with the

96
CHAPTER 8. SENTENTIAL SUBJECTS AND SENTENTIAL COMPLEMENTS
r
NP
N
Srini
VP
V
persuaded
NP control : <1>
N
Mickey
S2
NA
control : <1>
NP control : <1>
PRO
VPr
V
to
VP
NA
V
leave
Figure 8.12: Derived tree for Srini persuaded Mickey to leave
αnx0V[leave]
βnx0Vnx1s2[persuaded] (0)
αNXN[Srini] (1)
αNXN[Mickey] (2.2)
αNX[PRO] (1)
βVvx[to] (2)
Figure 8.13: Derivation tree for Srini persuaded Mickey to leave
co-indexing indicated below).
(64) * Johni wants [PROi to persuade Maryi [PROi to dance]]
However, such a derivation is ruled out automatically by the mechanisms of a TAG derivation
and feature uniﬁcation. Suppose it was possible to ﬁrst compose the want tree with the dance
tree and then insert the persuade tree. (This is not possible in the XTAG grammar because of
the convention that auxiliary trees have NA (Null Adjunction) constraints on their foot nodes.)
Even then, at the end of the derivation the control feature of the subject of want would end
up co-indexed with the PRO subject of persuade and the control feature of Mary would be
co-indexed with the PRO subject of dance as desired. There is no way to generate the illegal
co-indexing in (63). Thus the locality constraints on PRO control fall out from the mechanics
of TAG derivation and feature uniﬁcation.

8.10.
REPORTED SPEECH
97
8.10
Reported speech
Reported speech is handled in the XTAG grammar by having the reporting clause adjoin into
the quote. Thus, the reporting clause is an auxiliary tree, anchored by the reporting verb. See
[Doran, 1998] for details of the analysis. There are trees in both the Tnx0Vs1 and Tnx0nx1s2
families to handle reporting clauses which precede, follow and come in the middle of the quote.

Chapter 9
The English Copula, Raising Verbs,
and Small Clauses
The English copula, raising verbs, and small clauses are all handled in XTAG by a common
analysis based on sentential clauses headed by non-verbal elements. Since there are a number of
diﬀerent analyses in the literature of how these phenomena are related (or not), we will present
ﬁrst the data for all three phenomena, then various analyses from the literature, ﬁnishing with
the analysis used in the English XTAG grammar.1
9.1
Usages of the copula, raising verbs, and small clauses
9.1.1
Copula
The verb be as used in sentences (65)-(67) is often referred to as the copula. It can be followed
by a noun, adjective, or prepositional phrase.
(65) Carl is a jerk .
(66) Carl is upset .
(67) Carl is in a foul mood .
Although the copula may look like a main verb at ﬁrst glance, its syntactic behavior follows
the auxiliary verbs rather than main verbs. In particular,
• Copula be inverts with the subject.
(68) is Beth writing her dissertation ?
is Beth upset ?
∗wrote Beth her dissertation ?
1This chapter is strongly based on [Heycock, 1991]. Sections 9.1 and 9.2 are greatly condensed from her paper,
while the description of the XTAG analysis in section 9.3 is an updated and expanded version.
98

9.1. USAGES OF THE COPULA, RAISING VERBS, AND SMALL CLAUSES
99
• Copula be occurs to the left of the negative marker not.
(69) Beth is not writing her dissertation .
Beth is not upset .
∗Beth wrote not her dissertation .
• Copula be can contract with the negative marker not.
(70) Beth isn’t writing her dissertation .
Beth isn’t upset .
∗Beth wroten’t her dissertation .
• Copula be can contract with pronominal subjects.
(71) She’s writing her dissertation .
She’s upset .
∗She’ote her dissertation .
• Copula be occurs to the left of adverbs in the unmarked order.
(72) Beth is often writing her dissertation .
Beth is often upset .
∗Beth wrote often her dissertation .
Unlike all the other auxiliaries, however, copula be is not followed by a verbal category (by
deﬁnition) and therefore must be the rightmost verb. In this respect, it is like a main verb.
The semantic behavior of the copula is also unlike main verbs. In particular, any semantic
restrictions or roles placed on the subject come from the complement phrase (NP, AP, PP) rather
than from the verb, as illustrated in sentences (73) and (74). Because the complement phrases
predicate over the subject, these types of sentences are often called predicative sentences.
(73) The bartender was garrulous .
(74) ?The cliﬀwas garrulous .
9.1.2
Raising Verbs
Raising verbs are the class of verbs that share with the copula the property that the complement,
rather than the verb, places semantic constraints on the subject.
(75) Carl seems a jerk .
Carl seems upset .
Carl seems in a foul mood .
(76) Carl appears a jerk .
Carl appears upset .
Carl appears in a foul mood .

100
CHAPTER 9. THE ENGLISH COPULA, RAISING VERBS, AND SMALL CLAUSES
The raising verbs are similar to auxiliaries in that they order with other verbs, but they
are unique in that they can appear to the left of the inﬁnitive, as seen in the sentences in (77).
They cannot, however, invert or contract like other auxiliaries (78), and they appear to the
right of adverbs (79).
(77) Carl seems to be a jerk .
Carl seems to be upset .
Carl seems to be in a foul mood .
(78) ∗seems Carl to be a jerk ?
∗Carl seemn’t to be upset .
∗Carl‘ems to be in a foul mood .
(79) Carl often seems to be upset .
∗Carl seems often to be upset .
9.1.3
Small Clauses
One way of describing small clauses is as predicative sentences without the copula. Since matrix
clauses require tense, these clausal structures appear only as embedded sentences. They occur
as complements of certain verbs, each of which may allow certain types of small clauses but not
others, depending on its lexical idiosyncrasies.
(80) I consider [Carl a jerk] .
I consider [Carl upset] .
?I consider [Carl in a foul mood] .
(81) I prefer [Carl in a foul mood] .
??I prefer [Carl upset] .
9.1.4
Raising Adjectives
Raising adjectives are the class of adjectives that share with the copula and raising verbs the
property that the complement, rather than the verb, places semantic constraints on the subject.
They appear with the copula in a matrix clause, as in (82). However, in other cases, such
as that of small clauses (83), they do not have to appear with the copula.
(82) Carl is likely to be a jerk .
Carl is likely to be upset .
Carl is likely to be in a foul mood .
Carl is likely to perjure himself .
(83) I consider Carl likely to perjure himself .

9.2. VARIOUS ANALYSES
101
9.2
Various Analyses
9.2.1
Main Verb Raising to INFL + Small Clause
In [Pollock, 1989] the copula is generated as the head of a VP, like any main verb such as
sing or buy. Unlike all other main verbs2, however, be moves out of the VP and into Inﬂin a
tensed sentence. This analysis aims to account for the behavior of be as an auxiliary in terms
of inversion, negative placement and adverb placement, while retaining a sentential structure
in which be heads the main VP at D-Structure and can thus be the only verb in the clause.
Pollock claims that the predicative phrase is not an argument of be, which instead he assumes
to take a small clause complement, consisting of a node dominating an NP and a predicative
AP, NP or PP. The subject NP of the small clause then raises to become the subject of the
sentence. This accounts for the failure of the copula to impose any selectional restrictions on
the subject. Raising verbs such as seem and appear, presumably, take the same type of small
clause complement.
9.2.2
Auxiliary + Null Copula
In [Lapointe, 1980] the copula is treated as an auxiliary verb that takes as its complement a VP
headed by a passive verb, a present participle, or a null verb (the true copula). This verb may
then take AP, NP or PP complements. The author points out that there are many languages
that have been analyzed as having a null copula, but that English has the peculiarity that its
null copula requires the co-presence of the auxiliary be.
9.2.3
Auxiliary + Predicative Phrase
In GPSG ([Gazdar et al., 1985], [Sag et al., 1985]) the copula is treated as an auxiliary verb
that takes an X2 category with a + value for the head feature [PRD] (predicative). AP, NP, PP
and VP can all be [+PRD], but a Feature Co-occurrence Restriction guarantees that a [+PRD]
VP will be headed by a verb that is either passive or a present participle.
GPSG follows [Chomsky, 1970] in adopting the binary valued features [V] and [N] for de-
composing the verb, noun, adjective and preposition categories.
In that analysis, verbs are
[+V,−N], nouns are [−V,+N], adjectives [+V,+N] and prepositions [−V,−N]. NP and AP
predicative complements generally pattern together; a fact that can be stated economically
using this category decomposition. In neither [Sag et al., 1985] nor [Chomsky, 1970] is there
any discussion of how to handle the complete range of complements to a verb like seem, which
takes AP, NP and PP complements, as well as inﬁnitives. The solution would appear to be to
associate the verb with two sets of rules for small clauses, leaving aside the use of the verb with
an expletive subject and sentential complement.
9.2.4
Auxiliary + Small Clause
In [Moro, 1990] the copula is treated as a special functional category - a lexicalization of tense,
which is considered to head its own projection. It takes as a complement the projection of
another functional category, Agr (agreement). This projection corresponds roughly to a small
2with the exception of have in British English. See footnote 1 in Chapter 20.

102
CHAPTER 9. THE ENGLISH COPULA, RAISING VERBS, AND SMALL CLAUSES
clause, and is considered to be the domain within which predication takes place. An NP must
then raise out of this projection to become the subject of the sentence: it may be the subject
of the AgrP, or, if the predicate of the AgrP is an NP, this may raise instead. In addition
to occurring as the complement of be, AgrP is selected by certain verbs such as consider. It
follows from this analysis that when the complement to consider is a simple AgrP, it will always
consist of a subject followed by a predicate, whereas if the complement contains the verb be,
the predicate of the AgrP may raise to the left of be, leaving the subject of the AgrP to the
right.
(84) Johni is [AgrP ti the culprit ] .
(85) The culpriti is [AgrP John ti ] .
(86) I consider [AgrP John the culprit] .
(87) I consider [Johni to be [AgrP ti the culprit ]] .
(88) I consider [the culpriti to be [AgrP John ti ]] .
Moro does not discuss a number of aspects of his analysis, including the nature of Agr and
the implied existence of sentences without VP’s.
9.3
XTAG analysis
Sr
NP0↓
VP
V
ε
NP1
N◊
Sr
NP0↓
VP
V
ε
AP1
A◊
Sr
NP0↓
VP
V
ε
PP1
P◊
NP1↓
(a)
(b)
(c)
Figure 9.1: Predicative trees: αnx0N1 (a), αnx0Ax1 (b) and αnx0Pnx1 (c)
The XTAG grammar provides a uniform analysis for the copula, raising verbs and small
clauses by treating the maximal projections of lexical items that can be predicated as predicative

9.3. XTAG ANALYSIS
103
clauses, rather than simply noun, adjective and prepositional phrases. The copula adjoins in
for matrix clauses, as do the raising verbs. Certain other verbs (such as consider) can take the
predicative clause as a complement, without the adjunction of the copula, to form the embedded
small clause.
The structure of a predicative clause, then, is roughly as seen in (89)-(91) for NP’s, AP’s
and PP’s. The XTAG trees corresponding to these structures3 are shown in Figures 9.1(a),
9.1(b), and 9.1(c), respectively.
(89) [S NP [V P N . . . ]]
(90) [S NP [V P A . . . ]]
(91) [S NP [V P P . . . ]]
The copula be and raising verbs all get the basic auxiliary tree as explained in the section
on auxiliary verbs (section 20.1). Unlike the raising verbs, the copula also selects the inverted
auxiliary tree set. Figure 9.2 shows the basic auxiliary tree anchored by the copula be. The
<mode> feature is used to distinguish the predicative constructions so that only the copula
and raising verbs adjoin onto the predicative trees.
There are two possible values of <mode> that correspond to the predicative trees, nom
and prep. They correspond to a modiﬁed version of the four-valued [N,V] feature described
in section 9.2.3. The nom value corresponds to [N+], selecting the NP and AP predicative
clauses. As mentioned earlier, they often pattern together with respect to constructions using
predicative clauses. The remaining prepositional phrase predicative clauses, then, correspond
to the prep mode.
Figure 9.3 shows the predicative adjective tree from Figure 9.1(b) now anchored by upset and
with the features visible. As mentioned, <mode>=nom on the VP node prevents auxiliaries
other than the copula or raising verbs from adjoining into this tree. In addition, it prevents the
predicative tree from occurring as a matrix clause. Since all matrix clauses in XTAG must be
mode indicative (ind) or imperative (imp), a tree with <mode>=nom or <mode>=prep
must have an auxiliary verb (the copula or a raising verb) adjoin in to make it <mode>=ind.
The distribution of small clauses as embedded complements to some verbs is also man-
aged through the mode feature.
Verbs such as consider and prefer select trees that take
a sentential complement, and then restrict that complement to be <mode>=nom and/or
<mode>=prep, depending on the lexical idiosyncrasies of that particular verb. Many verbs
that don’t take small clause complements do take sentential complements that are <mode>=ind,
which includes small clauses with the copula already adjoined. Hence, as seen in sentence sets
(92)-(94), consider takes only small clause complements, prefer takes both prep (but not nom)
small clauses and indicative clauses, while feel takes only indicative clauses.
(92) She considers Carl a jerk .
?She considers Carl in a foul mood .
∗She considers that Carl is a jerk .
3There are actually two other predicative trees in the XTAG grammar. Another predicative noun phrase tree
is needed for noun phrases without determiners, as in the sentence They are ﬁremen, and another prepositional
phrase tree is needed for exhaustive prepositional phrases, such as The workers are below.

104
CHAPTER 9. THE ENGLISH COPULA, RAISING VERBS, AND SMALL CLAUSES
VPr
conditional : <9>
perfect : <10>
progressive : <11>
displ-const :
set1 : <8>
assign-case : <7>
mode : <6>
tense : <5>
agr : <3>
neg : <2>
assign-comp : <1>
mainv : <4>
V assign-comp : <1>
neg : <2>
agr : <3>
mainv : <4> -
tense : <5>
mode : <6>
assign-case : <7>
displ-const :
set1 : <8>
mode : ind
tense : pres
mainv : -
assign-comp : ind_nil/adj/that/rel/if/whether
assign-case : nom
agr :
3rdsing : +
num : sing
pers : 3
is
VP*
NA
displ-const :
set1 : -
progressive : <11>
perfect : <10>
conditional : <9>
mode : nom/prep
Figure 9.2: Copula auxiliary tree: βVvx
(93) ∗She prefers Carl a jerk .
She prefers Carl in a foul mood .
She prefers that Carl is a jerk .
(94) ∗She feels Carl a jerk .
∗She feels Carl in a foul mood .
She feels that Carl is a jerk .
Figure 9.4 shows the tree anchored by consider that takes the predicative small clauses.
Raising verbs such as seems work essentially the same as the auxiliaries, in that they also
select the basic auxiliary tree, as in Figure 9.2. The only diﬀerence is that the value of <mode>

9.3. XTAG ANALYSIS
105
Sr displ-const : set1 : -
assign-comp : inf_nil/ind_nil
assign-case : <1>
agr : <2>
tense : <3>
comp : nil
mainv : <4>
mode : <5>
displ-const : set1 : <6>
assign-comp : <7>
inv : -
extracted : -
NP0↓wh : -
case : <1>
agr : <2>
VP assign-case : <1>
agr : <2>
tense : <3>
mainv : <4>
mode : <5>
displ-const : set1 : <6>
assign-comp : <7>
assign-case : acc
mode : nom
displ-const : set1 : -
V
ε
AP1
A
wh : -
upset
Figure 9.3: Predicative AP tree with features: αnx0Ax1
on the VP foot node might be diﬀerent, depending on what types of complements the raising
verb takes. Also, two of the raising verbs take an additional tree, βVpxvx, shown in Figure 9.5,
which allows for an experiencer argument, as in John seems to me to be happy.
Raising adjectives, such as likely, take the tree shown in Figure 9.6. This tree combines
aspects of the auxiliary tree βVvx and the adjectival predicative tree shown in Figure 9.1(b).
As with βVvx, it adjoins in as a VP auxiliary tree. However, since it is anchored by an adjective,
not a verb, it is similar to the adjectival predicative tree in that it has an ǫ at the V node, and
a feature value of <mode>=nom which is passed up to the VP root indicates that it is an

106
CHAPTER 9. THE ENGLISH COPULA, RAISING VERBS, AND SMALL CLAUSES
Sr
NP0↓
VP
V
consider
S1*
displ-const :
set1 : -
assign-comp : inf_nil/ind_nil
inv : -
assign-case : acc
comp : nil
mode : nom/prep
Figure 9.4: Consider tree for embedded small clauses
VPr
V◊
PP
P
to
NP↓
VP*
NA
Figure 9.5: Raising verb with experiencer tree: βVpxvx
adjectival predication. This serves the same purpose as in the case of the tree in Figure 9.3,
and forces another auxiliary verb, such as the copula, to adjoin in to make it <mode>=ind.
VPr
V
NA
ε
AP
A◊
VP*
NA
Figure 9.6: Raising adjective tree: βVvx-adj

9.4. NON-PREDICATIVE BE
107
9.4
Non-predicative BE
The examples with the copula that we have given seem to indicate that be is always followed
by a predicative phrase of some sort. This is not the case, however, as seen in sentences such as
(95)-(100). The noun phrases in these sentences are not predicative. They do not take raising
verbs, and they do not occur in embedded small clause constructions.
(95) my teacher is Mrs. Wayman .
(96) Doug is the man with the glasses .
(97) ∗My teacher seems Mrs. Wayman .
(98) ∗Doug appears the man with the glasses .
(99) ∗I consider [my teacher Mrs. Wayman] .
(100) ∗I prefer [Doug the man with the glasses] .
In addition, the subject and complement can exchange positions in these type of examples
but not in sentences with predicative be. Sentence (101) has the same interpretation as sentence
(96) and diﬀers only in the positions of the subject and complement NP’s. Similar sentences,
with a predicative be, are shown in (102) and (103). In this case, the sentence with the exchanged
NP’s (103) is ungrammatical.
(101) The man with the glasses is Doug .
(102) Doug is a programmer .
(103) ∗A programmer is Doug .
The non-predicative be in (95) and (96), also called equative be, patterns diﬀerently, both
syntactically and semantically, from the predicative usage of be.
Since these sentences are
clearly not predicative, it is not desirable to have a tree structure that is anchored by the NP,
AP, or PP, as we have in the predicative sentences. In addition to the conceptual problem, we
would also need a mechanism to block raising verbs from adjoining into these sentences (while
allowing them for true predicative phrases), and prevent these types of sentence from being
embedded (again, while allowing them for true predicative phrases).
Although non-predicative be is not a raising verb, it does exhibit the auxiliary verb behavior
set out in section 9.1.1. It inverts, contracts, and so forth, as seen in sentences (104) and (105),
and therefore can not be associated with any existing tree family for main verbs. It requires
a separate tree family that includes the tree for inversion. Figures 9.7(a) and 9.7(b) show the
declarative and inverted trees, respectively, for equative be.
(104) is my teacher Mrs. Wayman ?
(105) Doug isn’t the man with the glasses .

108
CHAPTER 9. THE ENGLISH COPULA, RAISING VERBS, AND SMALL CLAUSES
Sr
NP0↓
VPr
V
is
VP1
V1
ε1
NP1↓
Sq
V
is
Sr
NP0↓
VPr
NA
Vr
ε
VP1
V1
ε1
NP1↓
(a)
(b)
Figure 9.7: Equative BE trees: αnx0BEnx1 (a) and αInvnx0BEnx1 (b)

Chapter 10
Ditransitive constructions and
dative shift
Verbs such as give and put that require two objects, as shown in examples (106)-(109), are
termed ditransitive.
(106) Christy gave a cannoli to Beth Ann .
(107) ∗Christy gave Beth Ann .
(108) Christy put a cannoli in the refrigerator .
(109) ∗Christy put a cannoli .
The indirect objects Beth Ann and refrigerator appear in these examples in the form of
PP’s. Within the set of ditransitive verbs there is a subset that also allow two NP’s as in (110).
As can be seen from (110) and (111) this two NP, or double-object, construction is grammatical
for give but not for put.
(110) Christy gave Beth Ann a cannoli .
(111) ∗Christy put the refrigerator the cannoli .
The alternation between (106) and (110) is known as dative shift.1 In order to account for
verbs with dative shift the English XTAG grammar includes structures for both variants in the
tree family Tnx0Vnx1Pnx2. The declarative trees for the shifted and non-shifted alternations
are shown in Figure 10.1.
The indexing of nodes in these two trees represents the fact that the semantic role of
the indirect object (NP2) in Figure 10.1(a) is the same as that of the direct object (NP2) in
1In languages similar to English that have overt case marking indirect objects would be marked with dative
case. It has also been suggested that for English the preposition to serves as a dative case marker.
109

110
CHAPTER 10. DITRANSITIVE CONSTRUCTIONS AND DATIVE SHIFT
S r
NP 0↓
VP
V◊
NP 1↓
PP 2
P2
to
NP 2↓
S r
NP 0↓
VP
V◊
NP 2↓
NP 1↓
(a)
(b)
Figure 10.1: Dative shift trees: αnx0Vnx1Pnx2 (a) and αnx0Vnx2nx1 (b)
Figure 10.1(b) (and vice versa). This use of indexing is consistent with our treatment of other
constructions such as passive and ergative.
Verbs that do not show this alternation and have only the NP PP structure (e.g. put) select
the tree family Tnx0Vnx1pnx2. Unlike the Tnx0Vnx1Pnx2 family, the Tnx0Vnx1pnx2 tree
family does not contain trees for the NP NP structure. Other verbs such as ask allow only the
NP NP structure as shown in (112) and (113).
(112) Beth Ann asked Srini a question .
(113) ∗Beth Ann asked a question to Srini .
Verbs that only allow the NP NP structure select the tree family Tnx0Vnx1nx2. This tree
family does not have the trees for the NP PP structure.
Notice that in Figure 10.1(a) the preposition to is built into the tree.
There are other
apparent cases of dative shift with for, such as in (114) and (115), that we have taken to be
structurally distinct from the cases with to.
(114) Beth Ann baked Dusty a biscuit .
(115) Beth Ann baked a biscuit for Dusty .
[McCawley, 1988] notes:
A “for-dative” expression in underlying structure is external to the V with which it
is combined, in view of the fact that the latter behaves as a unit with regard to all
relevant syntactic phenomena.
In other words, the for PP’s that appear to undergo dative shift are actually adjuncts, not
complements. Examples (116) and (117) demonstrate that PP’s with for are optional while
ditransitive to PP’s are not.

111
(116) Beth Ann made dinner .
(117) ∗Beth Ann gave dinner .
Consequently, in the XTAG grammar the apparent dative shift with for PP’s is treated as
Tnx0Vnx1nx2 for the NP NP structure, and as a transitive plus an adjoined adjunct PP for the
NP PP structure. To account for the ditransitive to PP’s, the preposition to is built into the
tree family Tnx0Vnx1tonx2. This accounts for the fact that to is the only preposition allowed
in dative shift constructions.
[McCawley, 1988] also notes that the to and for cases diﬀer with respect to passivization; the
indirect objects with to may be the subjects of corresponding passives while the alleged indirect
objects with for cannot, as in sentences (118)-(121). Note that the passivisation examples are
for NP NP structures of verbs that take to or for PP’s.
(118) Beth Ann gave Clove dinner .
(119) Clove was given dinner (by Beth Ann) .
(120) Beth Ann made Clove dinner .
(121) ?Clove was made dinner (by Beth Ann) .
However, we believe that this to be incorrect, and that the indirect objects in the for case
are allowed to be the subjects of passives, as in sentences (122)-(123). The apparent strangeness
of sentence (121) is caused by interference from other interpretations of Clove was made dinner
.
(122) Dania baked Doug a cake .
(123) Doug was baked a cake by Dania .

Chapter 11
It-clefts
There are several varieties of it-clefts in English. All the it-clefts have four major components:
• the dummy subject: it,
• the main verb: be,
• the clefted element: A constituent (XP) compatible with any gap in the clause,
• the clause: A clause (e.g. S) with or without a gap.
Examples of it-clefts are shown in (124)-(127).
(124) it was [XP here XP ] [S that the ENIAC was created . S]
(125) it was [XP at MIT XP ] [S that colorless green ideas slept furiously . S]
(126) it is [XP happily XP ] [S that Seth quit Reality . S]
(127) it was [XP there XP ] [S that she would have to enact her renunciation . S]
The clefted element can be of a number of categories, for example NP, PP or adverb. The
clause can also be of several types.
The English XTAG grammar currently has a separate
analysis for only a subset of the ‘speciﬁcational’ it-clefts1, in particular the ones without gaps
in the clause (e.g. (126) and (127)). It-clefts that have gaps in the clause, such as (124) and
(125) are currently handled as relative clauses. Although arguments have been made against
treating the clefted element and the clause as a constituent ([Delahunty, 1984]), the relative
clause approach does capture the restriction that the clefted element must ﬁll the gap in the
clause, and does not require any additional trees.
In the ‘speciﬁcational’ it-cleft without gaps in the clause, the clefted element has the role
of an adjunct with respect to the clause. For these cases the English XTAG grammar requires
1See e.g. [Ball, 1991], [Delin, 1989] and [Delahunty, 1984] for more detailed discussion of types of it-clefts.
112

113
additional trees. These it-cleft trees are in separate tree families because, although some re-
searchers (e.g. [Akmajian, 1970]) derived it-clefts through movement from other sentence types,
most current researchers (e.g. [Delahunty, 1984], [Knowles, 1986], [Gazdar et al., 1985], [Delin,
1989] and [Sornicola, 1988]) favor base-generation of the various cleft sentences. Placing the
it-cleft trees in their own tree families is consistent with the current preference for base genera-
tion, since in the XTAG English grammar, structures that would be related by transformation
in a movement-based account will appear in the same tree family. Like the base-generated
approaches, the placement of it-clefts in separate tree families makes the claim that there is no
derivational relation between it-clefts and other sentence types.
The three it-cleft tree families are virtually identical except for the category label of the
clefted element. Figure 11.1 shows the declarative tree and an inverted tree for the PP It-cleft
tree family.
S r
NP 0
N◊
VP
V◊
VP1
V1
ε
PP 1↓
S 2↓
S q
V◊
S r
NA
NP 0
N◊
VPr
Vr
ε
VP1
V1
ε1
PP 1↓
S 2↓
(a)
(b)
Figure 11.1: It-cleft with PP clefted element: αItVpnx1s2 (a) and αInvItVpnx1s2 (b)
The extra layer of tree structure in the VP represents that, while be is a main verb rather
than an auxiliary in these cases, it retains some auxiliary properties. The VP structure for the
equative/it-cleft-be is identical to that obtained after adjunction of predicative-be into small-
clauses.2 The inverted tree in Figure 11.1(b) is necessary because of be’s auxiliary-like behavior.
Although be is the main verb in it-clefts, it inverts like an auxiliary. Main verb inversion cannot
be accomplished by adjunction as is done with auxiliaries and therefore must be built into the
tree family. The tree in Figure 11.1(b) is used for yes/no questions such as (128).
(128) was it in the forest that the wolf talked to the little girl ?
2For additional discussion of equative or predicative-be see Chapter 9.

Part III
Sentence Types
114


Chapter 12
Passives
In passive constructions such as (129), the subject NP is interpreted as having the same role
as the direct object NP in the corresponding active declarative (130).
(129) An airline buy-out bill was approved by the House. (WSJ)
(130) The House approved an airline buy-out bill.
Sr
mode : <3>
NP1↓
VP mode : <3>
passive : <1>
mode : <2>
V◊passive : <1> +
mode : <2> ppart
S2*
S r
NP 1 ↓
VP
V ◊
PP
P
by
NP 0 ↓
S 2 *
S r
NP 1 ↓
VP
V ◊
S 2 *
PP
P
by
NP 0 ↓
(a)
(b)
(c)
Figure 12.1: Passive trees in the Sentential Complement with NP tree family: βnx1Vs2 (a),
βnx1Vbynx0s2 (b) and βnx1Vs2bynx0 (c)
In a movement analysis, the direct object is said to have moved to the subject position. The
original declarative subject is either absent in the passive or is in a by headed PP (by phrase).
In the English XTAG grammar, passive constructions are handled by having separate trees
within the appropriate tree families. Passive trees are found in most tree families that have a
direct object in the declarative tree (the light verb tree families, for instance, do not contain
116

117
passive trees). Passive trees occur in pairs - one tree with the by phrase, and another without
it. Variations in the location of the by phrase are possible if a subcategorization includes other
arguments such as a PP or an indirect object. Additional trees are required for these variations.
For example, the Sentential Complement with NP tree family has three passive trees, shown
in Figure 12.1: one without the by-phrase (Figure 12.1(a)), one with the by phrase before
the sentential complement (Figure 12.1(b)), and one with the by phrase after the sentential
complement (Figure 12.1(c)).
Figure 12.1(a) also shows the feature restrictions imposed on the anchor1. Only verbs with
<mode>=ppart (i.e. verbs with passive morphology) can anchor this tree. The <mode>
feature is also responsible for requiring that passive be adjoin into the tree to create a matrix sen-
tence. Since a requirement is imposed that all matrix sentences must have <mode>=ind/imp,
an auxiliary verb that selects <mode>=ppart and <passive>=+ (such as was) must adjoin
(see Chapter 20 for more information on the auxiliary verb system).
1A reduced set of features are shown for readability.

Chapter 13
Extraction
The discussion in this chapter covers constructions that are analyzed as having wh-movement
in GB, in particular, wh-questions and topicalization. Relative clauses, which could also be
considered extractions, are discussed in Chapter 14.
Extraction involves a constituent appearing in a linear position to the left of the clause with
which it is interpreted. One clause argument position is empty. For example, the position ﬁlled
by frisbee in the declarative in sentence (131) is empty in sentence (132). The wh-item what in
sentence (132) is of the same syntactic category as frisbee in sentence (131) and ﬁlls the same
role with respect to the subcategorization.
(131) Clove caught a frisbee.
(132) Whati did Clove catch ǫi?
The English XTAG grammar represents the connection between the extracted element and
the empty position with co-indexing (as does GB). The <trace> feature is used to implement
the co-indexing. In extraction trees in XTAG, the ‘empty’ position is ﬁlled with an ǫ. The
extracted item always appears in these trees as a sister to the Sr tree, with both dominated by
a Sq root node. The Sr subtrees in extraction trees have the same structure as the declarative
tree in the same tree family. The additional structure in extraction trees of the Sq and NP
nodes roughly corresponds to the CP and Spec of CP positions in GB.
All sentential trees with extracted components (this does not include relative clause trees)
are marked <extracted>=+ at the top S node, while sentential trees with no extracted
components are marked <extracted>=–. Items that take embedded sentences, such as nouns,
verbs and some prepositions can place restrictions on whether the embedded sentence is allowed
to be extracted or not. For instance, sentential subjects and sentential complements of nouns
and prepositions are not allowed to be extracted, while certain verbs may allow extracted
sentential complements and others may not (e.g. sentences (133)-(136)).
(133) The jury wondered [who killed Nicole].
(134) The jury wondered [who Simpson killed].
118

119
(135) The jury thought [Simpson killed Nicole].
(136) ∗The jury thought [who did Simpson kill]?
The <extracted> feature is also used to block embedded topicalization in inﬁnitival comple-
ment clauses as exempliﬁed in (137).
(137) * John wants [ Billi [PRO to see ti]]
Verbs such as want that take non-wh inﬁnitival complements specify that the <extracted>
feature of their complement clause (i.e. of the foot S node) is –. Clauses that involve topical-
ization have + as the value of their <extracted> feature (i.e. of the root S node). Sentences
like (137) are thus ruled out.
Sq
invlink : <1>
inv : <1>
extracted : +
wh : <5>
NP↓case : <2>
agr : <3>
trace : <4>
wh : <5>
Sr inv : <1>
inv : -
NP0↓
VP
V◊
NP1
NA
case : acc
case : <2>
agr : <3>
trace : <4>
ε
Figure 13.1: Transitive tree with object extraction: αW1nx0Vnx1
The tree that is used to derive the embedded sentence in (135) in the English XTAG
grammar is shown in Figure 13.11. The important features of extracted trees are:
• The subtree that has Sr as its root is identical to the declarative tree or a non-extracted
passive tree, except for having one NP position in the VP ﬁlled by ǫ.
• The root S node is Sq, which dominates NP and Sr.
1Features not pertaining to this discussion have been taken out to improve readability.

120
CHAPTER 13. EXTRACTION
• The <trace> feature of the ǫ ﬁlled NP is co-indexed with the <trace> feature of the
NP daughter of Sq.
• The <case> and <agr> features are passed from the empty NP to the extracted NP. This
is particularly important for extractions from subject NP’s, since <case> can continue
to be assigned from the verb to the subject NP position, and from there be passed to the
extracted NP.
• The <inv> feature of Sr is co-indexed to the <wh> feature of NP through the use of
the <invlink> feature in order to force subject-auxiliary inversion where needed (see
section 13.1 for more discussion of the <inv>/<wh> co-indexing and the use of these
trees for topicalization).
13.1
Topicalization and the value of the <inv> feature
Our analysis of topicalization uses the same trees as wh-extraction. For any NP complement
position a single tree is used for both wh-questions and for topicalization from that position.
Wh-questions have subject-auxiliary inversion and topicalizations do not. This diﬀerence be-
tween the constructions is captured by equating the values of the Sr’s <inv> feature and the
extracted NP’s <wh> feature. This means that if the extracted item is a wh-expression, as in
wh-questions, the value of <inv> will be + and an inverted auxiliary will be forced to adjoin.
If the extracted item is a non-wh, <inv> will be – and no auxiliary adjunction will occur. An
additional complication is that inversion only occurs in matrix clauses, so the values of <inv>
and <wh> should only be equated in matrix clauses and not in embedded clauses. In the
English XTAG grammar, appropriate equating of the <inv> and <wh> features is accom-
plished using the <invlink> feature and a restriction imposed on the root S of a derivation. In
particular, in extraction trees that are used for both wh-questions and topicalizations, the value
of the <inv> feature for the top of the Sr node is co-indexed to the value of the <inv> feature
on the bottom of the Sq node. On the bottom of the Sq node the <inv> feature is co-indexed
to the <invlink> feature. The <wh> feature of the extracted NP node is co-indexed to the
value of the <wh> feature on the bottom of Sq. The linking between the value of the Sq <wh>
and the <invlink> features is imposed by a condition on the ﬁnal root node of a derivation
(i.e. the top S node of a matrix clause) requires that <invlink>=<wh>. For example, the
tree in Figure 13.1 is used to derive both (138) and (139).
(138) John, I like.
(139) Who do you like?
For the question in (139), the extracted item who has the feature value <wh>=+, so the
value of the <inv> feature on VP is also + and an auxiliary, in this case do, is forced to adjoin.
For the topicalization (138) the values for John’s <wh> feature and for Sq’s <inv> feature
are both – and no auxiliary adjoins.

13.2.
EXTRACTED SUBJECTS
121
13.2
Extracted subjects
The extracted subject trees provide for sentences like (140)-(142), depending on the tree family
with which it is associated.
(140) Who left?
(141) Who wrote the paper?
(142) Who was happy?
Wh-questions on subjects diﬀer from other argument extractions in not having subject-
auxiliary inversion. This means that in subject wh-questions the linear order of the constituents
is the same as in declaratives so it is diﬃcult to tell whether the subject has moved out of position
or not (see [Heycock and Kroch, 1993] for arguments for and against moved subject).
The English XTAG treatment of subject extractions assumes the following:
• Syntactic subject topicalizations don’t exist; and
• Subjects in wh-questions are extracted rather than in situ.
The assumption that there is no syntactic subject topicalization is reasonable in English
since there is no convincing syntactic evidence and since the interpretability of subjects as
topics seems to be mainly aﬀected by discourse and intonational factors rather than syntactic
structure. As for the assumption that wh-question subjects are extracted, these questions seem
to have more similarities to other extractions than to the two cases in English that have been
considered in situ wh: multiple wh questions and echo questions. In multiple wh questions such
as sentence (143), one of the wh-items is blocked from moving sentence initially because the
ﬁrst wh-item already occupies the location to which it would move.
(143) Who ate what?
This type of ‘blocking’ account is not applicable to subject wh-questions because there is
no obvious candidate to do the blocking. Similarity between subject wh-questions and echo
questions is also lacking. At least one account of echo questions ([Hockey, 1994]) argues that
echo questions are not ordinary wh-questions at all, but rather focus constructions in which the
wh-item is the focus. Clearly, this is not applicable to subject wh-questions. So it seems that
treating subject wh-questions similarly to other wh-extractions is more justiﬁed than an in situ
treatment.
Given these assumptions, there must be separate trees in each tree family for subject extrac-
tions. The declarative tree cannot be used even though the linear order is the same because the
structure is diﬀerent. Since topicalizations are not allowed, the <wh> feature for the extracted
NP node is set in these trees to +. The lack of subject-auxiliary inversion is handled by the
absence of the <invlink> feature. Without the presence of this feature, the <wh> and <inv>
are never linked, so inversion can not occur. Like other wh-extractions, the Sq node is marked
<extracted>=+ to constrain the occurrence of these trees in embedded sentences. The tree
in Figure 13.2 is an example of a subject wh-question tree.

122
CHAPTER 13. EXTRACTION
Sq
inv : <9>
wh : <8>
extracted : +
NP↓agr : <5>
case : <6>
trace : <7>
wh : <8> +
Sr inv : <9>
wh : <8>
assign-case : <3>
agr : <4>
inv : -
NP0
NA
case : <3>
agr : <4>
agr : <5>
case : <6>
trace : <7>
ε
VP assign-case : <3>
agr : <4>
agr : <1>
assign-case : <2>
V◊agr : <1>
assign-case : <2>
Figure 13.2: Intransitive tree with subject extraction: αW0nx0V
13.3
Wh-moved NP complement
Wh-questions can be formed on every NP object or indirect object that appears in the declar-
ative tree or in the passive trees, as seen in sentences (144)-(149). A tree family will contain
one tree for each of these possible NP complement positions. Figure 13.3 shows the two extrac-
tion trees from the ditransitive tree family for the extraction of the direct (Figure 13.3(a)) and
indirect object (Figure 13.3(b)).
(144) Dania asked Beth a question.
(145) Whoi did Dania ask ǫi a question?
(146) Whati did Dania ask Beth ǫi?
(147) Beth was asked a question by Dania.
(148) Whoi was Beth asked a question by ǫi??
(149) Whati was Beth asked ǫi? by Dania?

13.4.
WH-MOVED OBJECT OF A P
123
Sq
NP↓
Sr
NP0↓
VP
V◊
NP1
NA
ε
NP2↓
Sq
NP↓
Sr
NP0↓
VP
V◊
NP1↓
NP2
NA
ε
(a)
(b)
Figure 13.3: Ditransitive trees with direct object: αW1nx0Vnx1nx2 (a) and indirect object
extraction: αW2nx0Vnx1nx2 (b)
13.4
Wh-moved object of a P
Wh-questions can be formed on the NP object of a complement PP as in sentence (150).
(150) [Which dog]i did Beth Ann give a bone to ǫi?
The by phrases of passives behave like complements and can undergo the same type of
extraction, as in (151).
(151) [Which dog]i was the frisbee caught by ǫi?
Tree structures for this type of sentence are very similar to those for the wh-extraction of NP
complements discussed in section 13.3 and have the identical important features related to tree
structure and trace and inversion features. The tree in Figure 13.4 is an example of this type
of tree. Topicalization of NP objects of prepositions is handled the same way as topicalization
of complement NP’s.
13.5
Wh-moved PP
Like NP complements, PP complements can be extracted to form wh-questions, as in sentence
(152).
(152) [To which dog]i did Beth Ann throw the frisbee ǫi?
As can be seen in the tree in Figure 13.5, extraction of PP complements is very similar to
extraction of NP complements from the same positions.
The PP extraction trees diﬀer from NP extraction trees in having a PP rather than an NP
left daughter node under Sq and in having the ǫ ﬁll a PP rather than an NP position in the
VP. In other respects these PP extraction structures behave like the NP extractions, including
being used for topicalization.

124
CHAPTER 13. EXTRACTION
Sq
NP↓
Sr
NP0↓
VP
V◊
NP1↓
PP2
P2↓
NP2
NA
ε
Figure 13.4: Ditransitive with PP tree with the object of the PP extracted: αW2nx0Vnx1pnx2
Sq
PP2↓
Sr
NP0↓
VP
V◊
NP1↓
PP
NA
ε
Figure 13.5: Ditransitive with PP with PP extraction tree: αpW2nx0Vnx1pnx2
13.6
Wh-moved S complement
Except for the node label on the extracted position, the trees for wh-questions on S complements
look exactly like the trees for wh-questions on NP’s in the same positions. This is because there
is no separate wh-lexical item for clauses in English, so the item what is ambiguous between
representing a clause or an NP. To illustrate this ambiguity notice that the question in (153)
could be answered by either a clause as in (154) or an NP as in (155). The extracted NP in
these trees is constrained to be <wh>=+, since sentential complements can not be topicalized.
(153) What does Clove want?
(154) for Beth Ann to play frisbee with her
(155) a biscuit

13.7.
WH-MOVED ADJECTIVE COMPLEMENT
125
13.7
Wh-moved Adjective complement
In subcategorizations that select an adjective complement, that complement can be questioned
in a wh-question, as in sentence (156).
(156) Howi did he feel ǫi?
Sq
AP↓
Sr
NP0 ↓
VP
V◊
AP1
NA
ε
Figure 13.6: Predicative Adjective tree with extracted adjective: αWA1nx0Vax1
The tree families with adjective complements include trees for such adjective extractions
that are very similar to the wh-extraction trees for other categories of complements.
The
adjective position in the VP is ﬁlled by an ǫ and the trace feature of the adjective complement
and of the adjective daughter of Sq are co-indexed. The extracted adjective is required to be
<wh>=+2, so no topicalizations are allowed. An example of this type of tree is shown in
Figure 13.6.
2How is the only <wh>=+ adjective currently in the XTAG English grammar.

Chapter 14
Relative Clauses
Relative clauses are NP modiﬁers, which involve extraction of an argument or an adjunct. The
NP head (the portion of the NP being modiﬁed by the relative clause) is not directly related to
the extracted element. For example in (157), the person is the head NP and is modiﬁed by the
relative clause whose mother ǫ likes Chris. The person is not interpreted as the subject of the
relative clause which is missing an overt subject. In other cases, such as (158), the relationship
between the head NP export exhibitions may seem to be more direct but even there we assume
that there are two independent relationships: one between the entire relative clause and the NP
it modiﬁes, and another between the extracted element and its trace. The extracted element
may be an overt wh-phrase as in (157) or a covert element as in (158).
(157) the person whose mother likes Chris
(158) export exhibitions that included high-tech items
Relative clauses are represented in the English XTAG grammar by auxiliary trees that adjoin
to NP’s. These trees are anchored by the verb in the clause and appear in the appropriate tree
families for the various verb subcategorizations. Within a tree family there will be groups of
relative clause trees based on the declarative tree and each passive tree. Within each of these
groups, there is a separate relative clause tree corresponding to each possible argument that can
be extracted from the clause. There is no relationship between the extracted position and the
head NP. The relationship between the relative clause and the head NP is treated as a semantic
relationship which will be provided by any reasonable compositional theory. The relationship
between the extracted element (which can be covert) is captured by co-indexing the <trace>
features of the extracted NP and the NPw node in the relative clause tree. If for example, it is
NP0 that is extracted, we have the following feature equations:
NPw.t:⟨trace ⟩=NP0.t:⟨trace ⟩
NPw.t:⟨case ⟩=NP0.t:⟨case ⟩
NPw.t:⟨agr ⟩=NP0.t:⟨agr ⟩1
1 No adjunct traces are represented in the XTAG analysis of adjunct extraction. Relative clauses on adjuncts
do not have traces and consequently feature equations of the kind shown here are not present.
126

127
Representative examples from the transitive tree family are shown with a relevant subset
of their features in Figures 14.1(a) and 14.1(b). Figure 14.1(a) involves a relative clause with a
covert extracted element, while ﬁgure 14.1(b) involves a relative clause with an overt wh-phrase.2
NPr
NPf *
NA
agr : <12>
case : <13>
wh: <14>
case :
nom/acc
Sp
NA
NPw
NA
agr : <1>
case : <2>
trace : <3>
εw
Sq
NA
Comp↓
rel-pron
: <4>
select-mode
: <5> inf/ind
assign-case
: <6>
Sr
NP0 ↓
VP
V
likes
NP1
NA
case :
acc
agr : <1>
case : <2>
trace : <3>
ε
NPr
NPf *
NA
case : <10>
agr : <11>
wh: <12>
case :
nom/acc
Sp
NA
NPw ↓
select-mode
: <1> ind
wh:
+
agr : <2>
case : <3>
trace : <4>
Sq
NA
Comp
NA
εc
Sr
NP0
NA
case : <8>
agr : <9>
agr : <2>
case : <3>
trace : <4>
ε
VP
V
likes
NP1 ↓
(a)
(b)
Figure 14.1:
Relative clause trees in the transitive tree family:
βNc1nx0Vnx1 (a) and
βN0nx0Vnx1 (b)
The above analysis is essentially identical to the GB analysis of relative clauses. One aspect
of its implementation is that an covert + <wh> NP and a covert Comp have to be introduced.
See (159) and (160) for example.
(159) export exhibitions [ [NPwǫ]i [ that [ ǫi included high-tech items]]]
(160) the export exhibition [ [NPwǫ]i [ ǫC [Muriel planned ǫi]]]
The lexicalized nature of XTAG makes it problematic to have trees headed by null strings.
Of the two null trees, NPw and Comp, that we could postulate, the former is deﬁnitely more
undesirable because it would lead to massive overgeneration, as can be seen in (161) and (162).
(161) * [NPwǫ] did John eat the apple? (as a wh-question)
2 The convention followed in naming relative clause trees is outlined in Appendix D.

128
CHAPTER 14. RELATIVE CLAUSES
(162) * I wonder [[NPwǫ] Mary likes John](as an indirect question)
The presence of an initial headed by a null Comp does not lead to problems of overgeneration
because relative clauses are the only environment with a Comp substitution node. 3
Consequently. our treatment of relative clauses has diﬀerent trees to handle relative clauses
with an overt extracted wh-NP and relative clauses with a covert extracted wh-NP. Relative
clauses with an overt extracted wh-NP involve substitution of a +<wh> NP into the NPw
node 4 and have a Comp node headed by ǫC built in. Relative clauses with a covert extracted
wh-NP have a NPw node headed by ǫw built in and involve substitution into the Comp node.
The Comp node that is introduced by substitution can be the ǫC (null complementizer), that,
and for.
For example, the tree shown in Figure 14.1(b) is used for the relative clauses shown in
sentences (163)-(164), while the tree shown in Figure 14.1(a) is used for the relative clauses in
sentences (165)-(168).
(163) the man who Muriel likes
(164) the man whose mother Muriel likes
(165) the man Muriel likes
(166) the book for Muriel to read
(167) the man that Muriel likes
(168) the book Muriel is reading
Cases of PP pied-piping (cf. 169) are handled in a similar fashion by building in a PPw
node.
(169) the demon by whom Muriel was chased
See the tree in Figure 14.2.
3Complementizers in clausal complementation are introduced by adjunction. See section 8.4.
4The feature equation used is NPw.t:<wh>= +. Examples of NPs that could substitute under NPw are
whose mother, who, whom, and also which but not when and where which are treated as exhaustive +wh PPs.

14.1.
COMPLEMENTIZERS AND CLAUSES
129
NPr
NPf *
NA
case : <1>
agr : <2>
wh: <3>
case :
nom/acc
Sp
NA
PPw ↓
wh:
+
select-mode
: <4> ind/inf
Sq
NA
Comp
NA
εc
Sr
NP0 ↓
VP
V
chased
NP1 ↓
Figure 14.2: Adjunct relative clause tree with PP-pied-piping in the transitive tree family:
βNpxnx0Vnx1
14.1
Complementizers and clauses
The co-occurrence constraints that exist between various Comps and the clause type of the
clause they occur with are implemented through combinations of diﬀerent clause types using
the <mode> feature, the <select-mode> feature, and the <rel-pron> feature.
Clauses are speciﬁed for the <mode> feature which indicates the clause type of that clause.
Possible values for the <mode> feature are ind, inf, ppart, ger etc.
Comps are lexically speciﬁed for a feature named <select-mode>.
In addition, the
<select-mode> feature of the Comp is equated with the <mode> feature of its comple-
ment S by the following equation:
Sr.t:⟨mode⟩= Comp.t:⟨select-mode⟩
The lexical speciﬁcations of the Comps are shown below:
• ǫC, Comp.t:⟨select-mode⟩=ind/inf/ger/ppart
• that, Comp.t:⟨select-mode⟩=ind

130
CHAPTER 14. RELATIVE CLAUSES
• for, Comp.t:⟨select-mode⟩=inf
The following examples display the co-occurence constraints which the <select-mode>
speciﬁcations assigned above implement.
For ǫC:
(170) the book Muriel likes (S.t:<mode>= ind)
(171) a book to like (S.t:<mode>= inf)
(172) the girl reading the book (S.t:<mode>= ger)
(173) the book read by Muriel (S.t:<mode>= ppart)
For for:
(174) *the book for Muriel likes (S.t:<mode>= ind)
(175) a book for Mary to like (S.t:<mode>= inf)
(176) *the girl for reading the book (S.t:<mode>= ger)
(177) *the book for read by Muriel (S.t:<mode>= ppart)
For that:
(178) the book that Muriel likes (S.t:<mode>= ind)
(179) *a book that (Muriel) to like (S.t:<mode>= inf)
(180) *the girl that reading the book (S.t:<mode>= ger)
(181) *the book that read by Muriel (S.t:<mode>= ppart)
Relative clause trees that have substitution of NPw have the following feature equations:
Sr.t:⟨mode⟩= NPw.t:⟨select-mode⟩
NPw.t:⟨select-mode⟩=ind
The examples that follow are intended to provide the rationale for the above setting of
features.
(182) the boy whose mother chased the cat (Sr.t:⟨mode⟩=ind)

14.1.
COMPLEMENTIZERS AND CLAUSES
131
(183) *the boy whose mother to chase the cat (Sr.t:⟨mode⟩=inf)
(184) *the boy whose mother eaten the cake (Sr.t:⟨mode⟩=ppart)
(185) *the boy whose mother chasing the cat (Sr.t:⟨mode⟩= ger)
(186) the boy [whose mother]i Bill believes ǫi to chase the cat
(Sr.t: ⟨mode⟩=ind)
The feature equations that appear in trees which have substitution of PPw are:
Sr.t:⟨mode⟩= PPw.t:⟨select-mode⟩
PPw.t:⟨mode⟩=ind/inf 5
Examples that justify the above feature setting follow.
(187) the person [by whom] this machine was invented (Sr.t:⟨mode⟩=ind)
(188) a baker [in whom]i PRO to trust ǫi (Sr.t:⟨mode⟩= inf)
(189) *the fork [with which] (Geoﬀrey) eaten the pudding (Sr.t:⟨mode⟩=ppart)
(190) *the person [by whom] (this machine) inventing (Sr.t:⟨mode ⟩=ger)
14.1.1
Further constraints on the null Comp ǫC
There are additional constraints on where the null Comp ǫC can occur. The null Comp is not
permitted in cases of subject extraction unless there is an intervening clause or or the relative
clause is a reduced relative (mode = ppart/ger). This can be seen in (191-194).
(191) *the toy [ǫi [ǫC [ ǫi likes Dafna]]]
(192) the toy [ǫi [ǫC Fred thinks [ ǫi likes Dafna]]]
(193) the boy [ǫi [ǫC [ ǫi eating the guava]]]
(194) the guava [ǫi [ǫC [ ǫi eaten by the boy]]]
5As is the case for NPw substitution, any +wh-PP can substitute under PPw. This is implemented by the
following equation:
PPw.t:⟨wh⟩= +
Not all cases of pied-piping involve substitution of PPw. In some cases, the P may be built in. In cases where
part of the pied-piped PP is part of the anchor, it continues to function as an anchor even after pied-piping i.e.
the P node and the NPw nodes are represented separately.

132
CHAPTER 14. RELATIVE CLAUSES
To model this paradigm, the feature ⟨rel-pron⟩is used in conjunction with the following
equations:
• Sr.t:⟨rel-pron⟩= Comp.t:⟨rel-pron⟩
• Sr.b:⟨rel-pron⟩= Sr.b:⟨mode⟩
• Comp.b:⟨rel-pron⟩=ppart/ger/adj-clause (for ǫC)
The full set of the equations shown above is only present in Comp substitution trees involving
subject extraction. So (195) will not be ruled out.
(195) the toy [ǫi [ǫC [ Dafna likes ǫi ]]]
The feature mismatch induced by the above equations is not remedied by adjunction of just
any S-adjunct because all other S-adjuncts are transparent to the ⟨rel-pron⟩feature because
of the following equation:
Sm.b:⟨rel-pron⟩= Sf.t:⟨rel-pron⟩
14.2
Reduced Relatives
Reduced relatives are permitted only in cases of subject-extraction. Past participial reduced
relatives are only permitted on passive clauses. See (196-203).
(196) the toy [ǫi [ǫC [ ǫi playing the banjo]]]
(197) *the instrument [ǫi [ǫC [ Amis playing ǫi ]]]
(198) *the day [ǫw [ǫC [ Amis playing the banjo]]]
(199) the apple [ǫi [ǫC [ ǫi eaten by Dafna]]]
(200) *the child [ǫi [ǫC [ the apple eaten by ǫi ]]]
(201) *the day [ǫw [ǫC [ Amis eaten the apple]]]
(202) *the apple [ǫi [ǫC [ Dafna eaten ǫi ]]]
(203) *the child [ǫi [ǫC [ ǫi eaten the apple ]]]
These restrictions are built into the <mode> speciﬁcations of S.t. So non-passive cases of
subject extraction have the following feature equation:
Sr.t:⟨mode⟩= ind/ger/inf
Passive cases of subject extraction have the following feature equation:
Sr.t:⟨mode⟩= ind/ger/ppart/inf
Finally, all cases of non-subject extraction have the following feature equation:
Sr.t:⟨mode⟩= ind/inf

14.3.
EXTERNAL SYNTAX
133
14.2.1
Restrictive vs. Non-restrictive relatives
The English XTAG grammar does not contain any syntactic distinction between restrictive and
non-restrictive relatives because we believe this to be a semantic and/or pragmatic diﬀerence.
14.3
External syntax
A relative clause can combine with the NP it modiﬁes in at least the following two ways:
(204)
[the [toy [ǫi [ǫC [Dafna likes ǫi ]]]]]
(205)
[[the toy] [ǫi [ǫC [Dafna likes ǫi ]]]]
Based on cases like (206) and (207), which are problematic for the structure in (204), the
structure in (205) is adopted.
(206) [[the man and the woman] [who met on the bus]]
(207) [[the man and the woman] [who like each other]]
As it stands, the RC analysis sketched so far will combine in two ways with the Determiner
tree shown in Figure (52), 6 giving us both the possiblities shown in (204) and (205). In order
to block the structure exempliﬁed in (204), the feature ⟨rel-clause⟩is used in combination with
the following equations.
On the RC:
NPr.b:⟨rel-clause⟩= +
On the Determiner tree:
NPf.t:⟨rel-clause⟩= −
Together, these equations block introduction of the determiner above the relative clause.
14.4
Other Issues
14.4.1
Interaction with adjoined Comps
The XTAG analysis now has two diﬀerent ways of introducing a complementizer like that or for,
depending upon whether it occurs in a relative clause or in sentential complementation. Relative
clause complementizers substitute in (using the tree αComp), while sentential complementizers
adjoin in (using the tree βCOMPs). Cases like (208) where both kinds of complementizers
illicitly occur together are blocked.
(208) *the book [ǫwi [that [that [Muriel wrote ǫi]]]]
6The determiner tree shown has the <rel-clause> feature built in. The RC analysis would give two parses
in the absence of this feature.

134
CHAPTER 14. RELATIVE CLAUSES
NPr
D
the
NPf*
NA
displ-const : <1>
conj : <2>
case : <3> nom/acc
agr : <4>
rel-clause :-
gerund : -
wh : -
quan : -
gen : -
definite : -
decreas : -
const : -
card : -
Figure 14.3: Determiner tree with <rel-clause> feature: βDnx
This is accomplished by setting the Sr.t:<comp> feature in the relative clause tree to nil.
The Sr.t:<comp> feature of the auxiliary tree that introduces (the sentential complementa-
tion) that is set to that. This leads to a feature clash ruling out (208). On the other hand, if a
sentential complement taking verb is adjoined in at Sr, this feature clash goes away (cf. 209).
(209) the book [ǫwi [that Beth thinks [that [Muriel wrote ǫi]]]]
14.4.2
Adjunction on PRO
Adjunction on PRO, which would yield the ungrammatical (210) is blocked.
(210) *I want [[PRO [who Muriel likes] to read a book]].
This is done by specifying the <case> feature of NPf to be nom/acc. The <case> feature
of PRO is null. This leads to a feature clash and blocks adjunction of relative clauses on to
PRO.
14.4.3
Adjunct relative clauses
Two types of trees to handle adjunct relative clauses exist in the XTAG grammar: one in which
there is PPw substitution with a null Comp built in and one in which there is a null NPw

14.5.
CASES NOT HANDLED
135
built in and a Comp substitutes in. There is no NPw substitution tree with a null Comp
built in. This is because of the contrast between (211) and (212).
(211) the day [[on whose predecessor] [ǫC [Muriel left]]]
(212) *the day [[whose predecessor] [ǫC [Muriel left]]]
In general, adjunct relatives are not possible with an overt NPw. We do not consider (213)
and (214) to be counterexamples to the above statements because we consider where and when
to be exhaustive PPs that head a PP initial tree.
(213) the place [where [ǫC [Muriel wrote her ﬁrst book]]]
(214) the time [when [ǫC [Muriel lived in Bryn Mawr]]]
14.4.4
ECM
Cases where for assigns exceptional case (cf. 215, 216) are handled.
(215) a book [ǫwi [for [Muriel to read ǫi]]]
(216) the time [ǫwi [for [Muriel to leave Haverford]]]
The assignment of case by for is implemented by a combination of the following equations.
Comp.t:⟨assign-case⟩=acc
Sr.t:⟨assign-case⟩=Comp.t:⟨assign-case⟩
Sr.b:⟨assign-case⟩=NP0.t:⟨case⟩
14.5
Cases not handled
14.5.1
Partial treatment of free-relatives
Free relatives are only partially handled. All free relatives on non-subject positions and some
free relatives on subject positions are handled. The structure assigned to free relatives treats the
extracted wh-NP as the head NP of the relative clause. The remaining relative clause modiﬁes
this extracted wh-NP (cf. 217-219).
(217) what(ever) [ǫwi [ǫC [Mary likes ǫi]]]
(218) where(ever) [ǫw [ǫC [Mary lives]]]
(219) who(ever) [ǫwi [ǫC [Muriel thinks [ǫi likes Mary]]]]
However, simple subject extractions without further emebedding are not handled (cf. 220).
(220) who(ever) [ǫwi [ǫC [ǫi likes Bill]]]
This is because (219) is treated exactly like the ungrammatical (221).
(221) *the person [ ǫwi [ǫC [ǫi likes Bill]]]

136
CHAPTER 14. RELATIVE CLAUSES
14.5.2
Adjunct P-stranding
The following cases of adjunct preposition stranding are not handled (cf. 222, 223).
(222) the pen Muriel wrote this letter with
(223) the street Muriel lives on
Adjuncts are not built into elementary trees in XTAG. So there is no clean way to represent
adjunct preposition stranding.
A better solution is, probably , available if we make use of
multi-component adjunction.
14.5.3
Overgeneration
The following ungrammatical sentences are currently being accepted by the XTAG grammar.
This is because no clean and conceptually attractive way of ruling them out is obvious to us.
14.5.3.1
how as wh-NP
In standard American English, how is not acceptable as a relative pronoun (cf. 224).
(224) *the way [how [ǫC [PRO to solve this problem]]]
However, (224) is accepted by the current grammar. The only way to rule (224) out would
be to introduce a special feature devoted to this purpose. This is unappealing. Further, there
exist speech registers/dialects of English, where (224) is acceptable.
14.5.3.2
for-trace eﬀects
(225) is ungrammatical, being an instance of a violation of the for-trace ﬁlter of early transfor-
mational grammar.
(225) the person [ǫwi [for [ǫi to read the book]]]
The XTAG grammar currently accepts (225).7
14.5.3.3
Internal head constraint
Relative clauses in English (and in an overwhelming number of languages) obey a ‘no internal
head’ constraint. This constraint is exempliﬁed in the contrast between (226) and (227).
(226) the person [whoi [ǫC Muriel likes ǫi]]
(227) *the person [[which person]i [ǫC Muriel likes ǫi]]
We know of no good way to rule (227) out, while still ruling (228) in.
7It may be of some interest that (225) is acceptable in certain dialects of Belfast English.

14.5.
CASES NOT HANDLED
137
(228) the person [[whose mother]i [ǫC Muriel likes ǫi]]
Dayal (1996) suggests that ‘full’ NPs such as which person and whose mother are R-
expressions while who and whose are pronouns. R-expressions, unlike pronouns, are subject
to Condition C. (226) is, then, ruled out as a violation of Condition C since the person and
which person are co-indexed and the person c-commands which person. If we accept Dayal’s ar-
gument, we have a principled reason for allowing overgeneration of relative clauses that violate
the internal head constraint, the reason being that the XTAG grammar does generate binding
theory violations.
14.5.3.4
Overt Comp constraint on stacked relatives
Stacked relatives of the kind in (229) are handled.
(229) [[the book [that Bill likes]] [which Mary wrote]]
There is a constraint on stacked relatives: all but the relative clause closest to the head-NP
must have either an overt Comp or an overt NPw. Thus (230) is ungrammatical.
(230) *[[the book [that Bill likes]] [Mary wrote]]
Again, no good way of handling this constraint is known to us currently.

Chapter 15
Adjunct Clauses
Adjunct clauses include subordinate clauses (i.e. those with overt subordinating conjunctions),
purpose clauses and participial adjuncts.
Subordinating conjunctions each select four trees, allowing them to appear in four diﬀerent
positions relative to the matrix clause. The positions are (1) before the matrix clause, (2) after
the matrix clause, (3) before the VP, surrounded by two punctuation marks, and (4) after the
matrix clause, separated by a punctuation mark. Each of these trees is shown in Figure 15.1.
Sr
S1
NA
P
because
S↓
Sf*
VPr
VPf*
NA
PP
P1
P
in
N
order
S↓
VPr
Punct1↓
PP
P
P1
as
P2
if
S↓
Punct2↓
VP*
NA
Sr
Sf*
NA
Punct↓
PP
P
when
S↓
(1) βPss
(2) βvxPNs
(3) βpuPPspuvx
(4) βspuPs
Figure 15.1: Auxiliary Trees for Subordinating Conjunctions
Sentence-initial adjuncts adjoin at the root S of the matrix clause, while sentence-ﬁnal
adjuncts adjoin at a VP node. In this, the XTAG analysis follows the ﬁndings on the attach-
ment sites of adjunct clauses for conditional clauses ([Iatridou, 1991]) and for inﬁnitival clauses
([Browning, 1987]). One compelling argument is based on Binding Condition C eﬀects. As
can be seen from examples (231)-(233) below, no Binding Condition violation occurs when the
adjunct is sentence initial, but the subject of the matrix clause clearly governs the adjunct
clause when it is in sentence ﬁnal position and co-indexation of the pronoun with the subject
of the adjunct clause is impossible.
(231) Unless shei hurries, Maryi will be late for the meeting.
138

15.1.
“BARE” ADJUNCT CLAUSES
139
(232) ∗Shei will be late for the meeting unless Maryi hurries.
(233) Maryi will be late for the meeting unless shei hurries.
We had previously treated subordinating conjunctions as a subclass of conjunction, but
are now assigning them the POS preposition, as there is such clear overlap between words
that function as prepositions (taking NP complements) and subordinating conjunctions (taking
clausal complements). While there are some prepositions which only take NP complements and
some which only take clausal complements, many take both as shown in examples (234)-(237),
and it seems to be artiﬁcial to assign them two diﬀerent parts-of-speech.
(234) Helen left before the party.
(235) Helen left before the party began.
(236) Since the election, Bill has been elated.
(237) Since winning the election, Bill has been elated.
Each subordinating conjunction selects the values of the <mode> and <comp> features
of the subordinated S. The <mode> value constrains the types of clauses the subordinating
conjunction may appear with and the <comp> value constrains the complementizers which
may adjoin to that clause. For instance, indicative subordinate clauses may appear with the
complementizer that as in (238), while participial clauses may not have any complementizers
(239).
(238) Midge left that car so that Sam could drive to work.
(239) *Since that seeing the new VW, Midge could think of nothing else.
15.0.4
Multi-word Subordinating Conjunctions
We extracted a list of multi-word conjunctions, such as as if, in order, and for all (that), from
[Quirk et al., 1985]. For the most part, the components of the complex are all anchors, as
shown in Figures 15.2(a). In one case, as ADV as, there is a great deal of latitude in the choice
of adverb, so this is a substitution site (Figures 15.2(b)). This multi-anchor treatment is very
similar to that proposed for idioms in [Abeill´e and Schabes, 1989], and the analysis of light
verbs in the XTAG grammar (see section 6.15).
15.1
“Bare” Adjunct Clauses
“Bare” adjunct clauses do not have an overt subordinating conjunction, but are typically parallel
in meaning to clauses with subordinating conjunctions. For this reason, we have elected to
handle them using the same trees shown above, but with null anchors. They are selected at the
same time and in the same way the PRO tree is, as they all have PRO subjects. Three values
of <mode> are licensed: inf (inﬁnitive), ger (gerundive) and ppart (past participal).1 They
1We considered allowing bare indicative clauses, such as He died that others may live, but these were considered
too archaic to be worth the additional ambiguity they would add to the grammar.

140
CHAPTER 15. ADJUNCT CLAUSES
VPr
VPf*
NA
PP
P
P1
as
Ad
soon
P2
as
S↓
VPr
VPf*
NA
PP
P
P1
as
Ad↓
P2
as
S↓
(a)
(b)
Figure 15.2: Trees Anchored by Subordinating Conjunctions: βvxPARBPs and βvxParbPs
interact with complementizers as follows:
• Participial complements do not license any complementizers:2
(240) [Destroyed by the ﬁre], the building still stood.
(241) The ﬁre raged for days [destroying the building].
(242) ∗[That destroyed by the ﬁre], the building still stood.
• Inﬁnitival adjuncts, including purpose clauses, are licensed both with and without the
complementizer for.
(243) Harriet bought a Mustang [to impress Eugene].
(244) [To impress Harriet], Eugene dyed his hair.
(245) Traﬃc stopped [for Harriet to cross the street].
2While these sound a bit like extraposed relative clauses (see [Kroch and Joshi, 1987]), those move only to
the right and adjoin to S; as these clauses are equally grammatical both sentence-initially and sentence-ﬁnally,
we are analyzing them as adjunct clauses.

15.2.
DISCOURSE CONJUNCTION
141
Sm
Sr
NP
PRO
VP
V
destroyed
PP
P
by
NP
DetP
D
the
N
fire
Sf
NA
NP
DetP
D
the
N
building
VPr
Ad
still
VP
NA
V
stood
Sr
NP
DetP
D
the
N
fire
VPm
VP
NA
VP
NA
V
raged
PP
P
for
NP
N
days
Sr
NP
PRO
VP1
V
destroying
NP
DetP
D
the
N
building
(a)
(b)
Figure 15.3: Sample Participial Adjuncts
15.2
Discourse Conjunction
The CONJs auxiliary tree is used to handle ‘discourse’ conjunction, as in sentence (246). Only
the coordinating conjunctions (and, or and but) are allowed to adjoin to the roots of matrix
sentences. Discourse conjunction with and is shown in the derived tree in Figure 15.4.
(246) And Truﬀula trees are what everyone needs! [Seuss, 1971]

142
CHAPTER 15. ADJUNCT CLAUSES
Sc
Conj
and
Sr
NA
NP
Nr
N
Truffula
Nf
NA
trees
VPr
V
are
VP
NA
V
ε
NPr
NA
NP
N
what
Sr
NP
N
everyone
VP
V
needs
NP1
NA
ε
Figure 15.4: Example of discourse conjunction, from Seuss’ The Lorax

Chapter 16
Imperatives
Imperatives in English do not require overt subjects.
The subject in imperatives is second
person, i.e. you, whether it is overt or not, as is clear from the verbal agreement and the
interpretation. Imperatives with overt subjects can be parsed using the trees already needed
for declaratives. The imperative cases in which the subject is not overt are handled by the
imperative trees discussed in this section.
The imperative trees in English XTAG grammar are identical to the declarative tree except
that the NP0 subject position is ﬁlled by an ǫ, the NP0 <agr pers> feature is set in the tree
to the value 2nd and the <mode> feature on the root node has the value imp. The value
for <agr pers> is hardwired into the epsilon node and insures the proper verbal agreement
for an imperative. The <mode> value of imp on the root node is recognized as a valid mode
for a matrix clause. The imp value for <mode> also allows imperatives to be blocked from
appearing as embedded clauses. Figure 16.1 is the imperative tree for the transitive tree family.
143

144
CHAPTER 16. IMPERATIVES
S r displ-const
:
set1
: -
assign-comp
: inf_nil/ind_nil
progressive
: <11>
perfect
: <12>
passive
: <13>
conditional
: <14>
assign-comp
: <15>
assign-case
: <9>
agr
: <10>
tense
: <16>
mode
: <17>
inv
: -
displ-const
:
set1
: <18>
comp
: nil
extracted
: -
NP 0
N A
wh
: -
case
: <9>
nom
agr
: <10>
num
: plur/sing
3rdsing
: -
pers
: 2
ε
VP
refl-obj
: <8>
progressive
: <11>
perfect
: <12>
passive
: <13>
conditional
: <14>
assign-comp
: <15>
assign-case
: <9>
agr
: <10>
tense
: <16>
pres
mode
: <17>
displ-const
:
set1
: <18>
refl-obj
: <1>
mode
: imp
mainv
: <2>
tense
: <3>
assign-comp
: <4>
assign-case
: <5>
agr
: <6>
passive
: <7>
displ-const
:
set1
: -
V ◊refl-obj
: <1>
trans
: +
mainv
: <2>
tense
: <3>
assign-comp
: <4>
assign-case
: <5>
agr
: <6>
passive
: <7>
-
mode
: base
NP 1 ↓refl
: <8>
case
: acc
Figure 16.1: Transitive imperative tree: αInx0Vnx1

Chapter 17
Gerund NP’s
There are two types of gerunds identiﬁed in the linguistics literature.
One is the class of
derived nominalizations (also called nominal gerundives or action nominalizations) exempliﬁed
in (247), which instantiates the direct object within an of PP. The other is the class of so-
called sentential or VP gerundives exempliﬁed in (248). In the English XTAG grammar, the
derived nominalizations are termed determiner gerunds, and the sentential or VP gerunds
are termed NP gerunds.
(247) Some think that the selling of bonds is beneﬁcial.
(248) Are private markets approving of Washington bashing Wall Street?
Both types of gerunds exhibit a similar distribution, appearing in most places where NP’s
are allowed.1 The bold face portions of sentences (249)–(251) show examples of gerunds as a
subject and as the object of a preposition.
(249) Avoiding such losses will take a monumental eﬀort.
(250) Mr. Nolen’s wandering doesn’t make him a weirdo.
(251) Are private markets approving of Washington bashing Wall Street?
The motivation for splitting the gerunds into two classes is semantic as well as structural
in nature. Semantically, the two gerunds are in sharp contrast with each other. NP gerunds
refer to an action, i.e., a way of doing something, whereas determiner gerunds refer to a fact.
Structurally, there are a number of properties (extensively discussed in [Lees, 1960]) that show
that NP gerunds have the syntax of verbs, whereas determiner gerunds have the syntax of basic
nouns. Firstly, the fact that the direct object of the determiner gerund can only appear within
an of PP suggests that the determiner gerund, like nouns, is not a case assigner and needs
insertion of the preposition of for assignment of case to the direct object. NP gerunds, like
1an exception being the NP positions in “equative BE” sentences, such as, John is my father.
145

146
CHAPTER 17. GERUND NP’S
verbs, need no such insertion and can assign case to their direct object. Secondly, like nouns,
only determiner gerunds can appear with articles (cf.
example (252) and (253)).
Thirdly,
determiner gerunds, like nouns, can be modiﬁed by adjectives (cf. example (254)), whereas
NP gerunds, like verbs, resist such modiﬁcation (cf. example (255)). Fourthly, nouns, unlike
verbs, cannot co-occur with aspect (cf. example (256) and (257)). Finally, only NP gerunds,
like verbs, can take adverbial modiﬁcation (cf. example (258) and (259)).
(252) . . . the proving of the theorem. . . .
(det ger with article)
(253) * . . . the proving the theorem. . . .
(NP ger with article)
(254) John’s rapid writing of the book. . . .
(det ger with Adj)
(255) * John’s rapid writing the book. . . .
(NP ger with Adj)
(256) * John’s having written of the book. . . .
(det ger with aspect)
(257) John having written the book. . . .
(NP ger with aspect)
(258) * His writing of the book rapidly. . . .
(det ger with Adverb)
(259) His writing the book rapidly. . . .
(NP ger with Adverb)
In English XTAG, the two types of gerunds are assigned separate trees within each tree
family, but in order to capture their similar distributional behavior, both are assigned NP as
the category label of their top node. The feature gerund = +/– distinguishes gerund NP’s
from regular NP’s where needed.2 The determiner gerund and the NP gerund trees are discussed
in section (17.1) and (17.2) respectively.
17.1
Determiner Gerunds
The determiner gerund tree in Figure 17.1 is anchored by a V, capturing the fact that the
gerund is derived from a verb. The verb projects an N and instantiates the direct object as an
of PP. The nominal category projected by the verb can now display all the syntactic properties
of basic nouns, as discussed above.
For example, it can be straightforwardly modiﬁed by
adjectives; it cannot co-occur with aspect; and it can appear with articles. The only diﬀerence
of the determiner gerund nominal with the basic nominals is that the former cannot occur
without the determiner, whereas the latter can. The determiner gerund tree therefore has an

17.1.
DETERMINER GERUNDS
147
NP
agr :
3rdsing : +
pers : 3
num : sing
case : nom/acc
wh : <3>
decreas : <4>
gen : <5>
card : <6>
quan : <7>
definite : <8>
const : <9>
D↓wh : <3>
decreas : <4>
gen : <5>
card : <6>
quan : <7>
definite : <8>
const : <9>
N
V◊mode : ger
PP1
wh : <1>
assign-case : <2>
P1 assign-case : <2>
assign-case : acc
of
NP1↓wh : <1>
case : <2>
αDnx0Vnx1
Figure 17.1: Determiner Gerund tree from the transitive tree family: αDnx0Vnx1
initial D modifying the N.3 It is used for gerunds such as the ones in bold face in sentences
(260), (261) and (262).
The D node can take a simple determiner (cf.
example (260)), a genitive pronoun (cf.
2This feature is also needed to restrict the selection of gerunds in NP positions. For example, the subject
and object NP’s in the “equative BE” tree (Tnx0BEnx1) cannot be ﬁlled by gerunds, and are therefore assigned
the feature gerund = –, which prevents gerunds (which have the feature gerund = +) from substituting into
these NP positions.
3Note that the determiner can adjoin to the gerund only from within the gerund tree. Adjunction of deter-
miners to the gerund root node is prevented by constraining determiners to only select NP’s with the feature
gerund = –. This rules out sentences like Private markets approved of (*the) [the selling of bonds].

148
CHAPTER 17. GERUND NP’S
example (261)), or a genitive NP (cf. example (262)).4
(260) Some think that the selling of bonds is beneﬁcial.
(261) His painting of Mona Lisa is highly acclaimed.
(262) Are private markets approving of Washington’s bashing of Wall Street?
17.2
NP Gerunds
NP gerunds show a number of structural peculiarities, the crucial one being that they have the
internal properties of sentences. In the English XTAG grammar, we adopt a position similar
to that of [Rosenbaum, 1967] and [Emonds, 1970] – that these gerunds are NP’s exhaustively
dominating a clause.
Consequently, the tree assigned to the transitive NP gerund tree (cf.
Figure 17.2) looks exactly like the declarative transitive tree for clauses except for the root
node label and the feature values. The anchoring verb projects a VP. Auxiliary adjunction is
allowed, subject to one constraint – that the highest verb in the verbal sequence be in gerundive
form, regardless of whether it is a main or auxiliary verb. This constraint is implemented by
requiring the topmost VP node to be <mode> = ger. In the absence of any adjunction, the
anchoring verb itself is forced to be gerundive. But if the verbal sequence has more than one
verb, then the sequence and form of the verbs is limited by the restrictions that each verb in the
sequence imposes on the succeeding verb. The nature of these restrictions for sentential clauses,
and the manner in which they are implemented in XTAG, are both discussed in Chapter 20.
The analysis and implementation discussed there diﬀers from that required for gerunds only in
one respect – that the highest verb in the verbal sequence is required to be <mode> = ger.
Additionally, the subject in the NP gerund tree is required to have <case>=acc/none/gen,
i.e., it can be either a PRO (cf. example 263), a genitive NP (cf. example 264), or an accusative
NP (cf. example 265). The whole NP formed by the gerund can occur in either nominative or
accusative positions.
(263) . . . John does not like wearing a hat.
(264) Are private markets approving of Washington’s bashing Wall Street?
(265) Mother disapproved of me wearing such casual clothes.
One question that arises with respect to gerunds is whether there is anything special about
their distribution as compared to other types of NP’s. In fact, it appears that gerund NP’s
can occur in any NP position. Some verbs might not seem to be very accepting of gerund NP
arguments, as in (266) below, but we believe this to be a semantic incompatibility rather than
a syntactic problem since the same structures are possible with other lexical items.
4The trees for genitive pronouns and genitive NP’s have the root node labelled as D because they seem to
function as determiners and as such, sequence with the rest of the determiners. See Chapter 18 for discussion on
determiner trees.

17.3.
GERUND PASSIVES
149
NPr
gerund : +
displ-const :
set1 : <3>
agr :
3rdsing : +
pers : 3
num : sing
case : nom/acc
wh : <4>
NP0↓wh : <4>
case : acc/none/gen
VP mode : ger
displ-const :
set1 : <3> -
passive : <1>
mode : <2>
compar : -
displ-const :
set1 : -
V◊passive : <1> -
mode : <2>
NP1↓case : acc
αGnx0Vnx1
Figure 17.2: NP Gerund tree from the transitive tree family: αGnx0Vnx1
(266) ? [NP John’s tinkeringNP ] ran.
(267) [NP John’s tinkeringNP ] worked.
By having the root node of gerund trees be NP, the gerunds have the same distribution as
any other NP in the English XTAG grammar without doing anything exceptional. The clause
structure is captured by the form of the trees and by inclusion in the tree families.
17.3
Gerund Passives
It was mentioned above that the NP gerunds display certain clausal properties. It is therefore
not surprising that they too have their own set of transformationally related structures. For
example, NP gerunds allow passivization just like their sentential counterparts (cf. examples
(268) and (269)).
(268) The lawyers objected to the slanderous book being written by John.

150
CHAPTER 17. GERUND NP’S
(269) Susan could not forget having been embarrassed by the vicar.
In the English XTAG grammar, gerund passives are treated in an almost exactly similar
fashion to sentential passives, and are assigned separate trees within the appropriate tree fam-
ilies. The passives occur in pairs, one with the by phrase, and another without it. There are
two feature restrictions imposed on the passive trees: (a) only verbs with <mode> = ppart
(i.e., verbs with passive morphology) can be the anchors, and (b) the highest verb in the verb
sequence is required to be <mode> = ger. The two restrictions, together, ensure the selection
of only those sequences of auxiliary verb(s) that select <mode> = ppart and <passive> =
+ (such as being or having been but NOT having). The passive trees are assumed to be related
to only the NP gerund trees (and not the determiner gerund trees), since passive structures
involve movement of some object to the subject position (in a movement analysis). Also, like
the sentential passives, gerund passives are found in most tree families that have a direct object
in the declarative tree. Figure 17.3 shows the gerund passive trees for the transitive tree family.
NPr
gerund : +
wh : <6>
displ-const :
set1 : <5>
agr :
3rdsing : +
pers : 3
num : sing
case : nom/acc
NP1↓wh : <6>
case : acc/none/gen
VP mode : ger
displ-const :
set1 : <5> -
compar : -
displ-const :
set1 : -
passive : <3>
mode : <4>
V◊trans : +
passive : <3> +
mode : <4> ppart
PP0
wh : <1>
assign-case : <2>
P0 assign-case : <2>
assign-case : acc
by
NP0↓wh : <1>
case : <2>
NPr
gerund : +
wh : <4>
displ-const :
set1 : <3>
agr :
3rdsing : +
pers : 3
num : sing
case : nom/acc
NP1↓case : acc/none/gen
wh : <4>
VP mode : ger
displ-const :
set1 : <3> -
passive : <1>
mode : <2>
displ-const :
set1 : -
compar : -
V◊trans : +
passive : <1> +
mode : <2> ppart
(a) αGnx1Vbynx0
(b) αGnx1V
Figure 17.3: Passive Gerund trees from the transitive tree family: αGnx1Vbynx0 (a) and
αGnx1V (b)

Part IV
Other Constructions
151


Chapter 18
Determiners and Noun Phrases
In our English XTAG grammar,1 all nouns select the noun phrase (NP) tree structure shown
in Figure 18.1.
Common nouns do not require determiners in order to form grammatical
NPs. Rather than being ungrammatical, singular countable nouns without determiners are
restricted in interpretation and can only be interpreted as mass nouns. Allowing all nouns to
head determinerless NPs correctly treats the individuation in countable NPs as a property of
determiners. Common nouns have negative(“-”) values for determiner features in the lexicon in
our analysis and can only acquire a positive(“+”) value for those features if determiners adjoin
to them. Other types of NPs such as pronouns and proper nouns have been argued by Abney
[Abney, 1987] to either be determiners or to move to the determiner position because they
exhibit determiner-like behavior. We can capture this insight in our system by giving pronouns
and proper nouns positive values for determiner features. For example pronouns and proper
nouns would be marked as deﬁnite, a value that NPs containing common nouns can only obtain
by having a deﬁnite determiner adjoin. In addition to the determiner features, nouns also have
values for features such as reﬂexive (reﬂ), case, pronoun (pron) and conjunction (conj).
A single tree structure is selected by simple determiners, an auxiliary tree which adjoins
to NP. An example of this determiner tree anchored by the determiner these is shown in
Figure 18.2. In addition to the determiner features the tree in Figure 18.2 has noun features
such as case (see section 4.4.2), the conj feature to control conjunction (see Chapter 21),
rel-clause−(see Chapter 14) and gerund−(see Chapter 17) which prevent determiners from
adjoining on top of relative clauses and gerund NPs respectively, and the displ-const feature
which is used to simulate multi-component adjunction.
Complex determiners such as genitives and partitives also anchor tree structures that adjoin
to NP. They diﬀer from the simple determiners in their internal complexity. Details of our
treatment of these more complex constructions appear in Sections 18.3 and 18.4. Sequences of
determiners, as in the NPs all her dogs or those ﬁve dogs are derived by multiple adjunctions
of the determiner tree, with each tree anchored by one of the determiners in the sequence. The
order in which the determiner trees can adjoin is controlled by features.
This treatment of determiners as adjoining onto NPs is similar to that of [Abeill´e, 1990],
and allows us to capture one of the insights of the DP hypothesis, namely that determiners
select NPs as complements. In Figure 18.2 the determiner and its NP complement appear in
1A more detailed discussion of this analysis can be found in [Hockey and Mateyak, 1998].
153

154
CHAPTER 18. DETERMINERS AND NOUN PHRASES
NP
compl : <1>
gen : <2>
definite : <3>
decreas
: <4>
quan : <5>
const
: <6>
card : <7>
conj : <8>
pron : <9>
wh : <10>
case
: <11>
refl : <12>
agr : <13>
N◊compl : <1>
gen : <2>
definite : <3>
decreas
: <4>
quan : <5>
const
: <6>
card : <7>
conj : <8>
pron : <9>
wh : <10>
case
: <11> nom/acc
refl : <12>
agr : <13>
Figure 18.1: NP Tree
the conﬁguration that is typically used in LTAG to represent selectional relationships. That
is, the head serves as the anchor of the tree and it’s complement is a sister node in the same
elementary tree.
The XTAG treatment of determiners uses nine features for representing their properties:
deﬁniteness (deﬁnite), quantity (quan), cardinality (card), genitive (gen), decreasing (de-
creas), constancy (const), wh, agreement (agr), and complement (compl). Seven of these
features were developed by semanticists for their accounts of semantic phenomena ([Keenan
and Stavi, 1986], [Barwise and Cooper, 1981], [Partee et al., 1990]), another was developed for

155
NP r
wh : <1>
decreas
: <2>
compl : <3>
gen : <4>
card : <5>
quan : <6>
definite : <7>
const
: <8>
agr : <9>
case
: <10> nom/acc
conj : <11>
displ-const
: <12>
D wh : <1>
decreas
: <2>
compl : <3>
gen : <4>
card : <5>
quan : <6>
definite : <7>
const
: <8>
wh : -
These
NP f*
NA
gerund
: -
rel-clause
: -
agr : <9>
case
: <10>
conj : <11>
displ-const
: <12>
Figure 18.2: Determiner Trees with Features
a semantic account of determiner negation by one of the authors of this determiner analysis
([Mateyak, 1997]), and the last is the familiar agreement feature. When used together these
features also account for a substantial portion of the complex patterns of English determiner
sequencing. Although we do not claim to have exhaustively covered the sequencing of deter-
miners in English, we do cover a large subset, both in terms of the phenomena handled and
in terms of corpus coverage. The XTAG grammar has also been extended to include complex
determiner constructions such as genitives and partitives using these determiner features.
Each determiner carries with it a set of values for these features that represents its own
properties, and a set of values for the properties of NPs to which can adjoin. The features are
crucial to ordering determiners correctly. The semantic deﬁnitions underlying the features are
given below.
Deﬁniteness: Possible Values [+/–].

156
CHAPTER 18. DETERMINERS AND NOUN PHRASES
A function f is deﬁnite iﬀf is non-trivial and whenever f(s) ̸=
∅then it is always the
intersection of one or more individuals. [Keenan and Stavi, 1986]
Quantity: Possible Values [+/–].
If A and B are sets denoting an NP and associated predicate, respectively; E is a domain
in a model M, and F is a bijection from M1 to M2, then we say that a determiner satisﬁes
the constraint of quantity if DetE1AB ↔DetE2F(A)F(B). [Partee et al., 1990]
Cardinality: Possible Values [+/–].
A determiner D is cardinal iﬀD ∈cardinal numbers ≥1.
Genitive: Possible Values [+/–].
Possessive pronouns and the possessive morpheme (’s) are marked gen+; all other nouns
are gen−.
Decreasing: Possible Values [+/–].
A set of Q properties is decreasing iﬀwhenever s≤t and t∈Q then s∈Q. A function f is
decreasing iﬀfor all properties f(s) is a decreasing set.
A non-trivial NP (one with a Det) is decreasing iﬀits denotation in any model is decreas-
ing. [Keenan and Stavi, 1986]
Constancy: Possible Values [+/–].
If A and B are sets denoting an NP and associated predicate, respectively, and E is
a domain, then we say that a determiner displays constancy if (A∪B) ⊆E ⊆E′ then
DetEAB ↔DetE′AB. Modiﬁed from [Partee et al., 1990]
Complement: Possible Values [+/–].
A determiner Q is positive complement if and only if for every set X, there exists a
continuous set of possible values for the size of the negated determined set, NOT(QX),
and the cardinality of QX is the only aspect of QX that can be negated. (adapted from
[Mateyak, 1997])
The wh-feature has been discussed in the linguistics literature mainly in relation to wh-
movement and with respect to NPs and nouns as well as determiners. We give a shallow but
useful working deﬁnition of the wh-feature below:
Wh: Possible Values [+/–].
Interrogative determiners are wh+; all other determiners are wh−.
The agr feature is inherently a noun feature. While determiners are not morphologically
marked for agreement in English many of them are sensitive to number. Many determiners
are semantically either singular or plural and must adjoin to nouns which are the same. For
example, a can only adjoin to singular nouns (a dog vs ∗a dogs while many must have plurals
(many dogs vs ∗many dog). Other determiners such as some are unspeciﬁed for agreement in
our analysis because they are compatible with either singulars or plurals (some dog, some dogs).
The possible values of agreement for determiners are: [3sg, 3pl, 3].

157
Det
deﬁnite
quan
card
gen
wh
decreas
const
agr
compl
all
−
+
−
−
−
−
+
3pl
+
both
+
−
−
−
−
−
+
3pl
+
this
+
−
−
−
−
−
+
3sg
−
these
+
−
−
−
−
−
+
3pl
−
that
+
−
−
−
−
−
+
3sg
−
those
+
−
−
−
−
−
+
3pl
−
what
−
−
−
−
+
−
+
3
−
whatever
−
−
−
−
−
−
+
3
−
which
−
−
−
−
+
−
+
3
−
whichever
−
−
−
−
−
−
+
3
−
the
+
−
−
−
−
−
+
3
−
each
−
+
−
−
−
−
+
3sg
−
every
−
+
−
−
−
−
+
3sg
+
a/an
−
+
−
−
−
−
+
3sg
+
some1
−
+
−
−
−
−
+
3
−
some2
−
+
−
−
−
−
−
3pl
−
any
−
+
−
−
−
−
+
3sg
+
another
−
+
−
−
−
−
+
3sg
+
few
−
+
−
−
−
+
−
3pl
−
a few
−
+
−
−
−
−
+
3pl
−
many
−
+
−
−
−
−
−
3pl
+
many a/an
−
+
−
−
−
−
−
3sg
+
several
−
+
−
−
−
−
+
3pl
−
various
−
−
−
−
−
−
+
3pl
−
sundry
−
−
−
−
−
−
+
3pl
−
no
−
+
−
−
−
+
+
3
−
neither
−
−
−
−
−
+
+
3
−
either
−
−
−
−
−
−
+
3
−
GENITIVE
+
−
−
+
−
−
+
UN2
−
CARDINAL
−
+
+
−
−
−
+
3pl3
−4
PARTITIVE
−
+/-5
−
−
−
−
+
UN
+/-
Table 18.1: Determiner Features associated with D anchors

158
CHAPTER 18. DETERMINERS AND NOUN PHRASES
The determiner tree in Figure 18.2 shows the appropriate feature values for the determiner
these, while Table 18.1 shows the corresponding feature values of several other common deter-
miners.
In addition to the features that represent their own properties, determiners also have features
to represent the selectional restrictions they impose on the NPs they take as complements. The
selectional restriction features of a determiner appear on the NP footnode of the auxiliary
tree that the determiner anchors. The NPf node in Figure 18.2 shows the selectional feature
restriction imposed by these6, while Table 18.2 shows the corresponding selectional feature
restrictions of several other determiners.
18.1
The Wh-Feature
A determiner with a wh+ feature is always the left-most determiner in linear order since
no determiners have selectional restrictions that allow them to adjoin onto an NP with a +wh
feature value. The presence of a wh+ determiner makes the entire NP wh+, and this is correctly
represented by the coindexation of the determiner and root NP nodes’ values for the wh-feature.
Wh+ determiners’ selectional restrictions on the NP foot node of their tree only allows them
adjoin onto NPs that are wh- or unspeciﬁed for the wh-feature.
Therefore ungrammatical
sequences such as ∗which what dog are impossible. The adjunction of wh + determiners onto
wh+ pronouns is also prevented by the same mechanism.
18.2
Multi-word Determiners
The system recognizes the multi-word determiners a few and many a. The features for a multi-
word determiner are located on the parent node of its two components (see Figure 18.3). We
chose to represent these determiners as multi-word constituents because neither determiner
retains the same set of features as either of its parts. For example, the determiner a is 3sg and
few is decreasing, while a few is 3pl and increasing. Additionally, many is 3pl and a displays
constancy, but many a is 3sg and does not display constancy. Example sentences appear in
(270)-(271).
• Multi-word Determiners
(270) a few teaspoons of sugar should be adequate .
(271) many a man has attempted that stunt, but none have succeeded .
2We use the symbol UN to represent the fact that the selectional restrictions for a given feature are unspeciﬁed,
meaning the noun phrase that the determiner selects can be either positive or negative for this feature.
3Except one which is 3sg.
4Except one which is compl+.
5A partitive can be either quan+ or quan-, depending upon the nature of the noun that anchors the partitive.
If the anchor noun is modiﬁed, then the quantity feature is determined by the modiﬁer’s quantity value.
6In addition to this tree, these would also anchor another auxiliary tree that adjoins onto card+ determiners.
7one diﬀers from the rest of CARD in selecting singular nouns

18.2.
MULTI-WORD DETERMINERS
159
Det
deﬁn
quan
card
gen
wh
decreas
const
agr
compl
e.g.
−
−
−
−
−
−
−
3pl
−
dogs
all
+
−
−
UN
−
UN
UN
3pl
−
these dogs
UN
UN
+
UN
UN
UN
UN
3pl
UN
ﬁve dogs
−
−
−
−
−
−
−
3pl
−
dogs
both
+
−
−
UN
−
UN
UN
3pl
−
these dogs
−
−
−
−
−
−
−
3sg
−
dog
−
+
UN
UN
−
+
−
3
UN
few dogs
this/that
−
+
UN
UN
−
−
−
3pl
+
many dogs
UN
UN
+
UN
UN
UN
UN
3sg
UN
ﬁve dogs
−
−
−
−
−
−
−
3pl
−
dogs
these/those
−
+
UN
UN
−
+
−
3pl
UN
few dogs
UN
UN
+
UN
UN
UN
UN
3pl
UN
ﬁve dogs
what/which
−
−
−
−
−
−
−
3
−
dog(s)
whatever
−
+
UN
UN
−
+
−
3
UN
few dogs
whichever
UN
UN
+
UN
UN
UN
UN
3
UN
many dogs
−
−
−
−
−
−
−
3
−
dog(s)
the
−
+
UN
UN
−
+
−
3
UN
few dogs
+
−
−
−
−
−
−
UN
−
the me
−
+
UN
UN
−
−
−
3pl
+
many dogs
UN
UN
+
UN
UN
UN
UN
3
UN
ﬁve dogs
−
−
−
−
−
−
−
3sg
−
dog
every/each
−
+
UN
UN
−
+
−
3
UN
few dogs
UN
UN
+
UN
UN
UN
UN
3
UN
ﬁve dogs
a/an
−
−
−
−
−
−
−
3sg
−
dog
some1,2
−
−
−
−
−
−
−
3
−
dog(s)
some1
UN
UN
+
UN
UN
UN
UN
3pl
UN
dogs
−
−
−
−
−
−
−
3sg
−
dog
any
−
+
UN
UN
−
+
−
3
UN
few dogs
UN
UN
+
UN
UN
UN
UN
3
UN
ﬁve dogs
−
−
−
−
−
−
−
3sg
−
dog
another
−
+
UN
UN
−
+
−
3
UN
few dogs
UN
UN
+
UN
UN
UN
UN
3
UN
ﬁve dogs
few
−
−
−
−
−
−
−
3pl
−
dogs
a few
−
−
−
−
−
−
−
3pl
−
dogs
many
−
−
−
−
−
−
−
3pl
−
dogs
many a/an
−
−
−
−
−
−
−
3sg
−
dog
several
−
−
−
−
−
−
−
3pl
−
dogs
various
−
−
−
−
−
−
−
3pl
−
dogs
sundry
−
−
−
−
−
−
−
3pl
−
dogs
no
−
−
−
−
−
−
−
3
−
dog(s)
neither
−
−
−
−
−
−
−
3sg
−
dog
either
−
−
−
−
−
−
−
3sg
−
dog
Table 18.2: Selectional Restrictions Imposed by Determiners on the NP foot node

160
CHAPTER 18. DETERMINERS AND NOUN PHRASES
Det
deﬁnite
quan
card
gen
wh
decreas
const
agr
compl
−
−
−
−
−
−
−
3
−
−
+
UN
UN
−
+
−
3
UN
GENITIVE
−
+
UN
UN
−
−
−
3pl
+
UN
UN
+
UN
UN
UN
UN
3
UN
−
+
−
−
−
−
+
3pl
−
−
−
−
−
−
−
+
3pl
−
CARDINAL
−
−
−
−
−
−
−
3pl7
−
PARTITIVE
UN
UN
UN
UN
−
UN
UN
UN
UN
Table 18.3: Selectional Restrictions Imposed by Groups of Determiners/Determiner Construc-
tions
NPr
D const : <5>
definite
: <6>
quan : <7>
card : <8>
gen : <9>
decreas : <10>
wh: <11>
agr : <4>
wh:
-
quan :
+
predet :
-
gen :
-
definite
:
-
decreas :
-
card :
-
agr :
3rdsing :
+
pers :
3
num:
sing
D1
many
D2
a
NPf *
NA
displ-const
: <1>
conj : <2>
case : <3> nom/acc
agr : <4>
wh:
-
quan :
-
gen :
-
definite
:
-
decreas :
-
const :
-
card :
-
Figure 18.3: Multi-word Determiner tree: βDDnx
18.3
Genitive Constructions
There are two kinds of genitive constructions: genitive pronouns, and genitive NP’s (which
have an explicit genitive marker, ’s, associated with them). It is clear from examples such as

18.4.
PARTITIVE CONSTRUCTIONS
161
her dog returned home and her ﬁve dogs returned home vs ∗dog returned home that genitive
pronouns function as determiners and as such, they sequence with the rest of the determiners.
The features for the genitives are the same as for other determiners. Genitives are not required
to agree with either the determiners or the nouns in the NPs that they modify. The value of
the agr feature for an NP with a genitive determiner depends on the NP to which the genitive
determiner adjoins. While it might seem to make sense to take their as 3pl, my as 1sg, and
Alfonso’s as 3sg, this number and person information only eﬀects the genitive NP itself and
bears no relationship to the number and person of the NPs with these items as determiners.
Consequently, we have represented agr as unspeciﬁed for genitives in Table 18.1.
Genitive NP’s are particularly interesting because they are potentially recursive structures.
Complex NP’s can easily be embedded within a determiner.
(272) [[[John]’s friend from high school]’s uncle]’s mother came to town.
There are two things to note in the above example. One is that in embedded NPs, the
genitive morpheme comes at the end of the NP phrase, even if the head of the NP is at the
beginning of the phrase. The other is that the determiner of an embedded NP can also be a
genitive NP, hence the possibility of recursive structures.
In the XTAG grammar, the genitive marker, ’s, is separated from the lexical item that it
is attached to and given its own category (G). In this way, we can allow the full complexity
of NP’s to come from the existing NP system, including any recursive structures. As with the
simple determiners, there is one auxiliary tree structure for genitives which adjoins to NPs. As
can be seen in 18.4, this tree is anchored by the genitive marker ’s and has a branching D node
which accomodates the additional internal structure of genitive determiners. Also, like simple
determiners, there is one initial tree structure (Figure 18.5) available for substitution where
needed, as in, for example, the Determiner Gerund NP tree (see Chapter 17 for discussion on
determiners for gerund NP’s).
Since the NP node which is sister to the G node could also have a genitive determiner in it,
the type of genitive recursion shown in (272) is quite naturally accounted for by the genitive
tree structure used in our analysis.
18.4
Partitive Constructions
The deciding factor for including an analysis of partitive constructions(e.g. some kind of, all
of ) as a complex determiner constructions was the behavior of the agreement features.
If
partitive constructions are analyzed as an NP with an adjoined PP, then we would expect to
get agreement with the head of the NP (as in (273)). If, on the other hand, we analyze them
as a determiner construction, then we would expect to get agreement with the noun that the
determiner sequence modiﬁes (as we do in (274)).
(273) a kind [of these machines] is prone to failure.
(274) [a kind of] these machines are prone to failure.

162
CHAPTER 18. DETERMINERS AND NOUN PHRASES
NP
r
decreas : <2>
gen : <3>
card : <4>
quan : <5>
definite : <6>
const : <7>
agr : <1>
wh : <8>
D decreas : <2>
gen : <3>
card : <4>
quan : <5>
definite : <6>
const : <7>
wh : <8>
gen : <9>
wh : <10>
NP↓wh : <10>
case : nom/acc
G◊gen : <9>
gen : +
NP
f*
agr : <1>
Figure 18.4: Genitive Determiner Tree
D
gen : <1>
wh: <2>
NP↓
wh: <2>
case :
nom/acc
G◊
gen : <1>
gen :
+
Figure 18.5: Genitive NP tree for substitution: αDnxG
In other words, for partitive constructions, the semantic head of the NP is the second rather
than the ﬁrst noun in linear order. That the agreement shown in (274) is possible suggests that

18.5.
ADVERBS, NOUN PHRASES, AND DETERMINERS
163
the second noun in linear order in these constructions should also be treated as the syntactic
head. Note that both the partitive and PP readings are usually possible for a particular NP. In
the cases where either the partitive or the PP reading is preferred, we take it to be just that,
a preference, most appropriately modeled not in the grammar but in a component such as the
heuristics used with the XTAG parser for reducing the analyses produced to the most likely.
In our analysis the partitive tree in Figure 18.6 is anchored by one of a limited group of
nouns that can appear in the determiner portion of a partitive construction. A rough semantic
characterization of these nouns is that they either represent quantity (e.g. part, half, most, pot,
cup, pound etc.) or classiﬁcation (e.g. type, variety, kind, version etc.). In the absence of a
more implementable characterization we use a list of such nouns compiled from a descriptive
grammar [Quirk et al., 1985], a thesaurus, and from online corpora. In our grammar the nouns
on the list are the only ones that select the partitive determiner tree.
Like other determiners, partitives can adjoin to an NP consisting of just a noun (‘[a certain
kind of] machine’), or adjoin to NPs that already have determiners (‘[some parts of] these
machines’. Notice that just as for the genitives, the complexity and the recursion are contained
below the D node and rest of the structure is the same as for simple determiners.
18.5
Adverbs, Noun Phrases, and Determiners
Many adverbs interact with the noun phrase and determiner system in English. For example,
consider sentences (275)-(282) below.
(275) Approximately thirty people came to the lecture.
(276) Practically every person in the theater was laughing hysterically during that scene.
(277) Only John’s crazy mother can make stuﬃng that tastes so good.
(278) Relatively few programmers remember how to program in COBOL.
(279) Not every martian would postulate that all humans speak a universal language.
(280) Enough money was gathered to pay oﬀthe group gift.
(281) Quite a few burglaries occurred in that neighborhood last year.
(282) I wanted to be paid double the amount they oﬀered.

164
CHAPTER 18. DETERMINERS AND NOUN PHRASES
NP r
NA decreas
: <5>
compl : <6>
gen : <7>
card : <8>
quan : <9>
definite : <10>
const
: <11>
agr : <13>
wh : <12>
case
: <14>
conj : <15>
displ-const
: <16>
D decreas
: <5>
compl : <6>
gen : <7>
card : <8>
quan : <9>
definite : <10>
const
: <11>
wh : <12>
wh : <4>
NP wh : <4>
wh : <1>
case
: <2>
agr : <3>
N◊wh : <1>
case
: <2>
agr : <3>
P
of
NP f*
NA
rel-clause
: -
agr : <13>
case
: <14> nom/acc
conj : <15>
displ-const
: <16>
Figure 18.6: Partitive Determiner Tree
Although there is some debate in the literature as to whether these should be classiﬁed as
determiners or adverbs, we believe that these items that interact with the NP and determiner
system are in fact adverbs. These items exhibit a broader distribution than either determiners
or adjectives in that they can modify many other phrasal categories, including adjectives, verb
phrases, prepositional phrases, and other adverbs.

18.5.
ADVERBS, NOUN PHRASES, AND DETERMINERS
165
Using the determiner feature system, we can obtain a close approximation to an accurate
characterization of the behavior of the adverbs that interact with noun phrases and determiners.
Adverbs can adjoin to either a determiner or a noun phrase (see ﬁgure 18.7), with the adverbs
restricting what types of NPs or determiners they can modify by imposing feature requirements
on the foot D or NP node. For example, the adverb approximately, seen in (275) above, selects
for determiners that are card+. The adverb enough in (280) is an example of an adverb that
selects for a noun phrase, speciﬁcally a noun phrase that is not modiﬁed by a determiner.
NPr
Dr
Ad
approximately
Df
NA
thirty
NPf
NA
N
people
NPr
Ad
double
NPf
D
the
NPf
NA
N
amount
(a)
(b)
Figure 18.7: (a) Adverb modifying a determiner; (b) Adverb modifying a noun phrase
Most of the adverbs that modify determiners and NPs divide into six classes, with some
minor variation within classes, based on the pattern of these restrictions. Three of the classes
are adverbs that modify determiners, while the other three modify NPs.
The largest of the ﬁve classes is the class of adverbs that modify cardinal determiners. This
class includes, among others, the adverbs about, at most, exactly, nearly, and only. These ad-
verbs have the single restriction that they must adjoin to determiners that are card+. Another
class of adverbs consists of those that can modify the determiners every, all, any, and no. The
adverbs in this class are almost, nearly, and practically. Closely related to this class are the ad-
verbs mostly and roughly, which are restricted to modifying every and all, and hardly, which can
only modify any. To select for every, all, and any, these adverbs select for determiners that are
[quan+, card-, const+, compl+], and to select for no, the adverbs choose a determiner that
is [quan+, decreas+, const+]. The third class of adverbs that modify determiners are those
that modify the determiners few and many, representable by the feature sequences [quan+,
decreas+, const-] and [quan+, decreas-, const-, 3pl, compl+], respectively. Examples of
these adverbs are awfully, fairly, relatively, and very.
Of the three classes of adverbs that modify noun phrases, one actually consists of a single
adverb not, that only modiﬁes determiners that are compl+. Another class consists of the
focus adverbs, at least, even, only, and just. These adverbs select NPs that are wh- and card-.
For the NPs that are card+, the focus adverbs actually modify the cardinal determiner, and so
these adverbs are also included in the ﬁrst class of adverbs mentioned in the previous paragraph.
The last major class that modify NPs consist of the adverbs double and twice, which select NPs
that are [deﬁnite+] (i.e., the, this/that/those/these, and the genitives).

166
CHAPTER 18. DETERMINERS AND NOUN PHRASES
Although these restrictions succeed in recognizing the correct determiner/adverb sequences,
a few unacceptable sequences slip through. For example, in handling the second class of adverbs
mentioned above, every, all, and any share the features [quan+, card-, const+, compl+]
with a and another, and so ∗nearly a man is acceptable in this system. In addition to this
over-generation within a major class, the adverb quite selects for determiners and NPs in what
seems to be a purely idiosyncratic fashion. Consider the following examples.
(283) a. Quite a few members of the audience had to leave.
b. There were quite many new participants at this year’s conference.
c. Quite few triple jumpers have jumped that far.
d. Taking the day oﬀwas quite the right thing to do.
e. The recent negotiation ﬁasco is quite another issue.
f. Pandora is quite a cat!
In examples (283a)-(283c), quite modiﬁes the determiner, while in (283d)-(283f), quite mod-
iﬁes the entire noun phrase.
Clearly, it functions in a diﬀerent manner in the two sets of
sentences; in (283a)-(283c), quite intensiﬁes the amount implied by the determiner, whereas in
(283d)-(283f), it singles out an individual from the larger set to which it belongs. To capture the
selectional restrictions needed for (283a)-(283c), we utilize the two sets of features mentioned
previously for selecting few and many. However, a few cannot be singled out so easily; using the
sequence [quan+, card-, decreas-, const+, 3pl, compl-], we also accept the ungrammatical
NPs ∗quite several members and ∗quite some members (where quite modiﬁes some). In selecting
the as in (d) with the features [deﬁnite+, gen-, 3sg], quite also selects this and that, which
are ungrammatical in this position. Examples (283e) and (283f) present yet another obstacle
in that in selecting another and a, quite erroneously selects every and any.
It may be that there is an undiscovered semantic feature that would alleviate these diﬃcul-
ties. However, on the whole, the determiner feature system we have proposed can be used as a
surprisingly eﬃcient method of characterizing the interaction of adverbs with determiners and
noun phrases.

Chapter 19
Modiﬁers
This chapter covers various types of modiﬁers: adverbs, prepositions, adjectives, and noun
modiﬁers in noun-noun compounds.1 These categories optionally modify other lexical items
and phrases by adjoining onto them. In their modiﬁer function these items are adjuncts; they
are not part of the subcategorization frame of the items they modify. Examples of some of
these modiﬁers are shown in (284)-(286).
(284) [ADV certainly ADV ], the October 13 sell-oﬀdidn’t settle any stomachs . (WSJ)
(285) Mr. Bakes [ADV previously ADV ] had a turn at running Continental . (WSJ)
(286) most [ADJ foreign ADJ] [N government N] [N bond N] [prices] rose [P P during the week
P P ].
The trees used for the various modiﬁers are quite similar in form. The modiﬁer anchors
the tree and the root and foot nodes of the tree are of the category that the particular anchor
modiﬁes. Some modiﬁers, e.g. prepositions, select for their own arguments and those are also
included in the tree. The foot node may be to the right or the left of the anchoring modiﬁer
(and its arguments) depending on whether that modiﬁer occurs before or after the category it
modiﬁes. For example, almost all adjectives appear to the left of the nouns they modify, while
prepositions appear to the right when modifying nouns.
19.1
Adjectives
In addition to being modiﬁers, adjectives in the XTAG English grammar can be also anchor
clauses (see Adjective Small Clauses in Chapter 9). There is also one tree family, Intransitive
with Adjective (Tnx0Vax1), that has an adjective as an argument and is used for sentences
such as Seth felt happy. In that tree family the adjective substitutes into the tree rather than
adjoining as is the case for modiﬁers.
As modiﬁers, adjectives anchor the tree shown in Figure 19.1. The features of the N node
onto which the βAn tree adjoins are passed through to the top node of the resulting N. The
1Relative clauses are discussed in Chapter 14.
167

168
CHAPTER 19. MODIFIERS
Nr
gen : <1>
definite : <2>
decreas : <3>
quan : <4>
const : <5>
card : <6>
conj : <7>
displ-const : <8>
wh : <9>
pron : <10>
assign-comp : <11>
agr : <12>
case : <13>
A◊
Nf*
NA
gen : <1>
definite : <2>
decreas : <3>
quan : <4>
const : <5>
card : <6>
conj : <7>
displ-const : <8>
wh : <9>
pron : <10>
assign-comp : <11>
agr : <12>
case : <13>
Figure 19.1: Standard Tree for Adjective modifying a Noun: βAn
null adjunction marker (NA) on the N foot node imposes right binary branching such that each
subsequent adjective must adjoin on top of the leftmost adjective that has already adjoined.
Due to the NA constraint, a sequence of adjectives will have only one derivation in the XTAG
grammar. The adjective’s morphological features such as superlative or comparative are in-
stantiated by the morphological analyzer. See Chapter 22 for a description of how we handle
comparatives. At this point, the treatment of adjectives in the XTAG English grammar does
not include selectional or ordering restrictions. Consequently, any adjective can adjoin onto

19.2.
NOUN-NOUN MODIFIERS
169
any noun and on top of any other adjective already modifying a noun. All of the modiﬁed noun
phrases shown in (287)-(290) currently parse with the same structure shown for colorless green
ideas in Figure 19.2.
(287) big green bugs
(288) big green ideas
(289) colorless green ideas
(290) ?green big ideas
NP
Nr
A
colorless
Nf
NA
A
green
Nf
NA
ideas
Figure 19.2: Multiple adjectives modifying a noun
While (288)-(290) are all semantically anomalous, (290) also suﬀers from an ordering prob-
lem that makes it seem ungrammatical in the absence of any licensing context.
One could
argue that the grammar should accept (287)-(289) but not (290). One of the future goals for
the grammar is to develop a treatment of adjective ordering similar to that developed by [Hockey
and Mateyak, 1998] for determiners2. An adequate implementation of ordering restrictions for
adjectives would rule out (290).
19.2
Noun-Noun Modiﬁers
Noun-noun compounding in the English XTAG grammar is very similar to adjective-noun
modiﬁcation. The noun modiﬁer tree, shown in Figure 19.3, has essentially the same structure

170
CHAPTER 19. MODIFIERS
Nr assign-comp : <1>
displ-const : <2>
pron : <3> -
wh : <4>
agr : <5>
case : <6> nom/acc
N◊case : nom/acc
pron : -
Nf*
NA
assign-comp : <1>
displ-const : <2>
wh : <4>
agr : <5>
case : <6>
pron : <3>
Figure 19.3: Noun-noun compounding tree: βNn (not all features displayed)
as the adjective modiﬁer tree in Figure 19.1, except for the syntactic category label of the
anchor.
Noun compounds have a variety of scope possibilities not available to adjectives, as illus-
trated by the single bracketing possibility in (291) and the two possibilities for (292). This
ambiguity is manifested in the XTAG grammar by the two possible adjunction sites in the
noun-noun compound tree itself. Subsequent modifying nouns can adjoin either onto the Nr
node or onto the N anchor node of that tree, which results in exactly the two bracketing pos-
sibilities shown in (292). This inherent structural ambiguity results in noun-noun compounds
regularly having multiple derivations. However, the multiple derivations are not a defect in
the grammar because they are necessary to correctly represent the genuine ambiguity of these
phrases.
(291) [N big [N green design N]N]
(292) [N computer [N furniture design N]N]
[N [N computer furniture N] design N]
2See Chapter 18 or [Hockey and Mateyak, 1998] for details of the determiner analysis.

19.3.
TIME NOUN PHRASES
171
Noun-noun compounds have no restriction on number. XTAG allows nouns to be either
singular or plural as in (293)-(295).
(293) Hyun is taking an algorithms course .
(294) waﬄes are in the frozen foods section .
(295) I enjoy the dog shows .
19.3
Time Noun Phrases
Although in general NPs cannot modify clauses or other NPs, there is a class of NPs, with
meanings that relate to time, that can do so.3 We call this class of NPs “Time NPs”. Time NPs
behave essentially like PPs. Like PPs, time NPs can adjoin at four places: to the right of an
NP, to the right and left of a VP, and to the left of an S.
Time NPs may include determiners, as in this month in example (296), or may be single
lexical items as in today in example (297). Like other NPs, time NPs can also include adjectives,
as in example (301).
(296) Elvis left the building this week
(297) Elvis left the building today
(298) It has no bearing on our work force today (WSJ)
(299) The ﬁre yesterday claimed two lives
(300) Today it has no bearing on our work force
(301) Michael late yesterday announced a buy-back program
The XTAG analysis for time NPs is fairly simple, requiring only the creation of proper NP
auxiliary trees. Only nouns that can be part of time NPs will select the relevant auxiliary trees,
and so only these type of NPs will behave like PPs under the XTAG analysis. Currently, about
60 words select Time NP trees, but since these words can form NPs that include determiners
and adjectives, a large number of phrases are covered by this class of modiﬁers.
Corresponding to the four positions listed above, time NPs can select one of the four trees
shown in Figure 19.4.
Determiners can be added to time NPs by adjunction in the same way that they are added
to NPs in other positions. The trees in Figure 19.5 show that the structures of examples (296)
and (297) diﬀer only in the adjunction of this to the time NP in example (296).
The sentence
3 There may be other classes of NPs, such as directional phrases, such as north, south etc., which behave
similarly. We have not yet analyzed these phrases.

172
CHAPTER 19. MODIFIERS
Sr
NP
N◊
S*
NA
VPr
NP
N◊
VP*
NA
VPr
VP*
NA
NP
N◊
NPr
NPf *
NA
NP
N◊
βNs
βNvx
βvxN
βnxN
Figure 19.4: Time Phrase Modiﬁer trees: βNs, βNvx, βvxN, βnxN
S r
NP
N
Elvis
VPr
VP
NA
V
left
NP r
D
the
NP f
NA
N
building
NP r
D
this
NP f
NA
N
week
Sr
NP
N
Elvis
VPr
VP
NA
V
left
NPr
D
the
NPf
NA
N
building
NP
N
today
Figure 19.5: Time NPs with and without a determiner
(302) Esso said the Whiting ﬁeld started production Tuesday (WSJ)
has (at least) two diﬀerent interpretations, depending on whether Tuesday attaches to said or
to started. Valid time NP analyses are available for both these interpretations and are shown
in Figure 19.6.
Derived tree structures for examples (298) – (301), which show the four possible time NP
positions are shown in Figures 19.7 and 19.8. The derivation tree for example (301) is also
shown in Figure 19.8.

19.4.
PREPOSITIONS
173
Sr
NP
N
Esso
VPr
VP
NA
V
said
S1
NA
NPr
D
the
NPf
NA
Nr
N
Whiting
Nf
NA
field
VP
V
started
NP
N
production
NP
N
Tuesday
Sr
NP
N
Esso
VP
V
said
S1
NA
NPr
D
the
NPf
NA
Nr
N
Whiting
Nf
NA
field
VPr
VP
NA
V
started
NP
N
production
NP
N
Tuesday
Figure 19.6: Time NP trees: Two diﬀerent attachments
Sr
NP
N
it
VPr
VP
NA
V
has
NPr
NPf
NA
D
no
NPf
NA
N
bearing
PP
P
on
NPr
D
our
NPf
NA
Nr
N
work
Nf
NA
force
NP
N
today
Sr
NPr
NPf
NA
D
the
NPf
NA
N
fire
NP
N
yesterday
VP
V
claimed
NPr
D
two
NPf
NA
N
lives
Sr
NP
N
today
S
NA
NP
N
it
VP
V
has
NPr
NPf
NA
D
no
NPf
NA
N
bearing
PP
P
on
NPr
D
our
NPf
NA
Nr
N
work
Nf
NA
force
Figure 19.7: Time NPs in diﬀerent positions (βvxN, βnxN and βNs)
19.4
Prepositions
There are three basic types of prepositional phrases, and three places at which they can adjoin.
The three types of prepositional phrases are: Preposition with NP Complement, Preposition

174
CHAPTER 19. MODIFIERS
Sr
NP
N
Michael
VPr
NP
Nr
A
late
Nf
NA
yesterday
VP
NA
V
announced
NPr
D
a
NPf
NA
Nr
N
buy-back
Nf
NA
program
αnx0Vnx1[announced]
αNXN[Michael] (1)
βNvx[yesterday] (2)
βAn[late] (1.1)
αNXN[program] (2.2)
βDnx[a] (0)
βNn[buy-back] (1)
Figure 19.8: Time NPs: Derived tree and Derivation (βNvx position)
with Sentential Complement, and Exhaustive Preposition. The three places are to the right of
an NP, to the right of a VP, and to the left of an S. Each of the three types of PP can adjoin at
each of these three places, for a total of nine PP modiﬁer trees. Table 19.1 gives the tree family
names for the various combinations of type and location. (See Section 23.4.2 for discussion of
the βspuPnx, which handles post-sentential comma-separated PPs.)
position and category modiﬁed
pre-sentential
post-NP
post-VP
Complement type
S modiﬁer
NP modiﬁer
VP modiﬁer
S-complement
βPss
βnxPs
βvxPs
NP-complement
βPnxs
βnxPnx
βvxPnx
no complement
βPs
βnxP
βvxP
(exhaustive)
Table 19.1: Preposition Anchored Modiﬁers
The subset of preposition anchored modiﬁer trees in Figure 19.9 illustrates the locations and
the four PP types. Example sentences using the trees in Figure 19.9 are shown in (303)-(306).
There are also more trees with multi-word prepositions as anchors. Examples of these are:
ahead of, contrary to, at variance with and as recently as.

19.5.
ADVERBS
175
Sr
PP
P◊
S↓
Sf*
NA
NPr
NPf*
NA
PP
P◊
NP↓
VPr
NA
VP*
NA
PP
P◊
VPr
VP*
NA
PP
P
P1
outside
P2
of
NP↓
βPss
βnxPnx
βvxP
βvxPPnx
Figure 19.9: Selected Prepositional Phrase Modiﬁer trees: βPss, βnxPnx, βvxP and βvxPPnx
(303) [P P with Clove healthy P P], the veterinarian’s bill will be more aﬀordable . (βPss4)
(304) The frisbee [P P in the brambles P P] was hidden . (βnxPnx)
(305) Clove played frisbee [P P outside P P] . (βvxP)
(306) Clove played frisbee [P P outside of the house P P] . (βvxPPnx)
Prepositions that take NP complements assign accusative case to those complements (see
section 4.4.3.1 for details). Most prepositions take NP complements. Subordinating conjunc-
tions are analyzed in XTAG as Preps (see Section 15 for details). Additionally, a few non-
conjunction prepositions take S complements (see Section 8.8 for details).
19.5
Adverbs
In the English XTAG grammar, VP and S-modifying adverbs anchor the auxiliary trees βARBs,
βsARB, βvxARB and βARBvx,5 allowing pre and post modiﬁcation of S’s and VP’s. Besides
the VP and S-modifying adverbs, the grammar includes adverbs that modify other categories.
Examples of adverbs modifying an adjective, an adverb, a PP, an NP, and a determiner are
shown in (307)-(314). (See Sections 23.1.5 and 23.4.1 for discussion of the βpuARBpuvx and
βspuARB, which handle pre-verbal parenthetical adverbs and post-sentential comma-separated
adverbs.)
• Modifying an adjective
(307) extremely good
4Clove healthy is an adjective small clause
5In the naming conventions for the XTAG trees, ARB is used for adverbs. Because the letters in A, Ad,
and Adv are all used for other parts of speech (adjective, determiner and verb), ARB was chosen to eliminate
ambiguity. Appendix D contains a full explanation of naming conventions.

176
CHAPTER 19. MODIFIERS
(308) rather tall
(309) rich enough
• Modifying an adverb
(310) oddly enough
(311) very well
• Modifying a PP
(312) right through the wall
• Modifying a NP
(313) quite some time
• Modifying a determiner
(314) exactly ﬁve men
XTAG has separate trees for each of the modiﬁed categories and for pre and post modiﬁ-
cation where needed. The kind of treatment given to adverbs here is very much in line with
the base-generation approach proposed by [Ernst, 1983], which assumes all positions where an
adverb can occur to be base-generated, and that the semantics of the adverb speciﬁes a range
of possible positions occupied by each adverb.
While the relevant semantic features of the
adverbs are not currently implemented, implementation of semantic features is scheduled for
future work. The trees for adverb anchored modiﬁers are very similar in form to the adjec-
tive anchored modiﬁer trees. Examples of two of the basic adverb modiﬁer trees are shown in
Figure 19.10.

19.5.
ADVERBS
177
Like the adjective anchored trees, these trees also have the NA constraint on the foot node to
restrict the number of derivations produced for a sequence of adverbs. Features of the modiﬁed
category are passed from the foot node to the root node, reﬂecting correctly that these types of
properties are unaﬀected by the adjunction of an adverb. A summary of the categories modiﬁed
and the position of adverbs is given in Table 19.2.
In the English XTAG grammar, no traces are posited for wh-adverbs, in-line with the
base-generation approach ([Ernst, 1983]) for various positions of adverbs.
Since convincing
arguments have been made against traces for adjuncts of other types (e.g. [Baltin, 1989]), and
since the reasons for wanting traces do not seem to apply to adjuncts, we make the general
assumption in our grammar that adjuncts do not leave traces.
Sentence initial wh-adverbs
select the same auxiliary tree used for other sentence initial adverbs (βARBs) with the feature
<wh>=+. Under this treatment, the derived tree for the sentence How did you fall? is as in
Figure (19.11), with no trace for the adverb.
S r inv : -
wh : <1>
displ-const
: <2>
agr : <3>
assign-case
: <4>
mode : <5>
tense
: <6>
assign-comp
: <7>
comp : <8> nil
Ad◊wh : <1>
S *
NA
inv : <1>
displ-const
: <2>
agr : <3>
assign-case
: <4>
mode : <5>
tense
: <6>
assign-comp
: <7>
comp : <8>
sub-conj
: nil
sub-conj
: nil
comp : nil
VPr
passive
: <1>
displ-const
: <2>
assign-case
: <3>
assign-comp
: <4>
tense
: <5>
agr : <6>
mode : <7>
VP*
NA
passive
: <1>
displ-const
: <2>
assign-case
: <3>
assign-comp
: <4>
tense
: <5>
agr : <6>
mode : <7>
Ad◊
(a)
(b)
Figure 19.10: Adverb Trees for pre-modiﬁcation of S: βARBs (a) and post-modiﬁcation of a
VP: βvxARB (b)

178
CHAPTER 19. MODIFIERS
S r
Ad
how
S
NA
V
did
S
NA
NP
N
you
VPr
V
ε
VP
NA
V
fall
Figure 19.11: Derived tree for How did you fall?

19.5.
ADVERBS
179
Sr
invlink : <3> +
inv : <3>
wh : <1>
displ-const : <4>
agr : <5>
assign-case : <6>
mode : <7>
tense : <8>
assign-comp : <9>
comp : <10> nil
Adr wh : <1>
wh : <2> +
Ad◊wh : <2>
Adc↓
S*
NA
inv : <3>
displ-const : <4>
agr : <5>
assign-case : <6>
mode : <7>
tense : <8>
assign-comp : <9>
comp : <10>
sub-conj : nil
sub-conj : nil
comp : nil
Figure 19.12: Complex adverb phrase modiﬁer: βARBarbs

180
CHAPTER 19. MODIFIERS
Position with respect to item modiﬁed
Category Modiﬁed
Pre
Post
S
βARBs
βsARB
VP
βARBvx,βpuARBpuvx
βvxARB
A
βARBa
βaARB
PP
βARBpx
βpxARB
ADV
βARBarb
βarbARB
NP
βARBnx
Det
βARBd
Table 19.2: Simple Adverb Anchored Modiﬁers
There is one more adverb modiﬁer tree in the grammar which is not included in Table 19.2.
This tree, shown in Figure 19.12, has a complex adverb phrase and is used for wh+ two-adverb
phrases that occur sentence initially, such as in sentence (315). Since how is the only wh+
adverb, it is the only adverb that can anchor this tree.
(315) how quickly did Srini ﬁx the problem ?
Focus adverbs such as only, even, just and at least are also handled by the system. Since the
syntax allows focus adverbs to appear in practically any position, these adverbs select most of
the trees listed in Table 19.2. It is left up to the semantics or pragmatics to decide the correct
scope for the focus adverb for a given instance. In terms of the ability of the focus adverbs
to modify at diﬀerent levels of a noun phrase, the focus adverbs can modify either cardinal
determiners or noun-cardinal noun phrases, and cannot modify at the level of noun. The tree
for adverbial modiﬁcation of noun phrases is in shown Figure 19.13(a).
In addition to at least, the system handles the other two-word adverbs, at most and up
to, and the three-word as-as adverb constructions, where an adjective substitutes between the
two occurrences of as. An example of a three-word as-as adverb is as little as. Except for the
ability of at least to modify many diﬀerent types of constituents as noted above, the multi-word
adverbs are restricted to modifying cardinal determiners. Example sentences using the trees in
Figure 19.13 are shown in (316)-(320).
• Focus Adverb modifying an NP
(316) only a member of our crazy family could pull oﬀthat kind of a stunt .
(317) even a ﬂying saucer sighting would seem interesting in comparison
with your story .
(318) The report includes a proposal for at least a partial impasse in negotiations .
• Multi-word adverbs modifying cardinal determiners
(319) at most ten people came to the party .

19.5.
ADVERBS
181
NPr
Ad◊
NPf *
Dr
NA
Ad
P1 ◊
A↓
P2 ◊
Df *
NA
Dr
NA
Ad1
P◊
Ad◊
Df *
NA
βARBnx
βPaPd
βPARBd
(a)
(b)
(c)
Figure 19.13: Selected Focus and Multi-word Adverb Modiﬁer trees: βARBnx, βPARBd and
βPaPd
(320) They gave monetary gifts of as little as ﬁve dollars .
The grammar also includes auxiliary trees anchored by multi-word adverbs like a little, a
bit, a mite, sort of, kind of, etc..
Multi-word adverbs like sort of and kind of can pre- modify almost any non-clausal category.
The only strict constraint on their occurrence is that they can’t modify nouns (in which case an
adjectival interpretation would obtain)6. The category which they scope over can be directly
determined from their position, except for when they occur sentence ﬁnally in which case they
are assumed to modify VP’s. The complete list of auxiliary trees anchored by these adverbs
are as follows: βNPax, βNPpx, βNPnx, βNPvx, βvxNP, βNParb. Selected trees are shown in
Figure 19.14, and some examples are given in (321)-(324).
APr
Ad1
NA
N◊
P◊
APf *
NA
VPr
Ad1
NA
N◊
P◊
VPf *
NA
VPr
VPf *
NA
Ad1
NA
N◊
P◊
βNPax
βNPvx
βvxNP
(a)
(b)
(c)
Figure 19.14: Selected Multi-word Adverb Modiﬁer trees (for adverbs like sort of, kind of):
βNPax, βNPvx, βvxNP.
(321) John is sort of [AP tired].
6Note that there are semantic/lexical constraints even for the categories that these adverbs can modify, and
no doubt invite a more in-depth analysis.

182
CHAPTER 19. MODIFIERS
(322) John is sort of [P P to the right].
(323) John could have been sort of [V P eating the cake].
(324) John has been eating his cake sort of [ADV slowly].
There are some multi-word adverbs that are, however, not so free in their distribution.
Adverbs like a little, a bit, a mite modify AP’s in predicative constructions (sentences with the
copula and small clauses, AP complements in sentences with raising verbs, and AP’s when they
are subcategorized for by certain verbs (e.g., John felt angry). They can also post-modify VP’s
and PP’s, though not as freely as AP’s7. Finally, they also function as downtoners for almost
all adverbials8. Some examples are provided in (325)-(328).
(325) Mickey is a little [AP tired].
(326) The medicine [V P has eased John’s pain] a little.
(327) John is a little [P P to the right].
(328) John has been reading his book a little [ADV loudly].
Following their behavior as described above, the auxiliary trees they anchor are βDAax,
βDApx, βvxDA, βDAarb, βDNax, βDNpx, βvxDN, βDNarb.
Selected trees are shown in
Figure 19.15).
19.6
Locative Adverbial Phrases
Locative adverbial phrases are multi-word adverbial modiﬁers whose meanings relate to spatial
location. Locatives consist of a locative adverb (such as ahead or downstream) preceded by
an NP, an adverb, or nothing, as in Examples (329)–(331) respectively.
The modiﬁer as a
whole describes a position relative to one previously speciﬁed in the discourse. The nature of
the relation, which is usually a direction, is speciﬁed by the anchoring locative adverb(behind,
east). If an NP or a second adverb is present in the phrase, it speciﬁes the degree of the relation
(for example: three city blocks, many meters, and far).
(329) The accident three blocks ahead stopped traﬃc
7They can also appear before NP’s, as in, “John wants a little sugar”.
However, here they function as
multi-word determiners and should not be analyzed as adverbs.
8It is to be noted that this analysis, which allows these multiword adverbs to modify adjectival phrases as
well as adverbials, will yield (not necessarily desirable) multiple derivations for a sentence like John is a little
unecessarily stupid. In one derivation, a little modiﬁes the AP and in the other case, it modiﬁes the adverb.

19.6.
LOCATIVE ADVERBIAL PHRASES
183
VPr
VPf *
NA
Ad1
NA
D◊
A◊
APr
Ad1
NA
D◊
A◊
APf *
NA
PPr
Ad1
NA
D◊
N◊
PPf *
NA
βvxDA
βDAax
βDNpx
(a)
(b)
(c)
Figure 19.15: Selected Multi-word Adverb Modiﬁer trees (for adverbs like a little, a bit): βvxDA,
βDAax, βDNpx.
(330) The ship sank far oﬀshore
(331) The trouble ahead distresses me
Locatives can modify NPs, VPs and Ss. They modify NPs only by right-adjoining post-
positively, as in Example (329). Post-positive is also the more common position when a locative
modiﬁes either of the other categories.
Locatives pre-modify VPs only when separated by
balanced punctuation (commas or dashes). The trees locatives select when modifying NPs are
shown in Figure 19.16.
NP r
NP 1*
NA
AdvP
NP 2↓
Ad◊
NP r
NP 1*
NA
AdvP
Ad◊
Figure 19.16: Locative Modiﬁer Trees: βnxnxARB, βnxARB
When the locative phrase consists of only the anchoring locative adverb, as in Example (330),
it uses the βnxARB tree, shown in Figure 19.16, and its VP analogue, βvxARB. In addition,
these are the trees selected when the locative anchor is modiﬁed by an adverb expressing degree,
as in Example 330. The degree adverb adjoins on to the anchor using the βARBarb tree, which
is described in Section 19.5. Figure 19.17 shows an example of these trees in action. Though
there is a tree for a pre-sentential locative phrase, βnxARBs, there is no corresponding post-
sentential tree, as it is highly debatable whether the post-sentential version actually has the
entire sentence or just the preceding verb phrase as its scope. Thus, in accordance with XTAG
practice, which considers ambiguous post-sentential modiﬁers to be VP-modiﬁers rather than
S-modiﬁers, there is only a βvxnxARB tree, as shown in Figure 19.17.

184
CHAPTER 19. MODIFIERS
S r
S
NA
NP
N
I
VP
V
left
NP r
D
my
NP f
NA
N
toupee
AdvP
NP r
D
three
NP f
NA
N
holes
Ad
back
S r
NP
N
I
VPr
VP
NA
V
left
NP r
D
my
NP f
NA
N
toupee
Adr
Ad
NA
far
Ad1
NA
back
Figure 19.17: Locative Phrases featuring NP and Adverb Degree Speciﬁcations
One possible analysis of locative phrases with NPs might maintain that the NP is the head,
with the locative adverb modifying the NP. This is initially attractive because of the similarity
to time NPs, which also feature NPs that can modify clauses. This analysis seems insuﬃcient,
however, in light of the fact that virtually any NP can occur in locative phrases, as in example
(332). Therefore, in the XTAG analysis the locative adverb anchors the locative phrase trees.
A complete summary of all trees selected by locatives is contained in Table 19.3. 269 adverbs
select the locative trees.
(332) I left my toupee and putter three holes back
Degree Phrase Type
Category Modiﬁed
NP
Ad/None
NP
βnxnxARB
βnxARB
VP (post)
βvxnxARB
βvxARB
VP (pre, punct-separated)
βpunxARBpuvx
βpuARBpuvx
S
βnxARBs
βARBs
Table 19.3: Locative Modiﬁers
9Though nearly all of these adverbs are spatial in nature, this number also includes a few temporal adverbs,
such as ago, that also select these trees.

Chapter 20
Auxiliaries
Although there has been some debate about the lexical category of auxiliaries, the English
XTAG grammar follows [McCawley, 1988], [Haegeman, 1991], and others in classifying auxil-
iaries as verbs. The category of verbs can therefore be divided into two sets, main or lexical
verbs, and auxiliary verbs, which can co-occur in a verbal sequence. Only the highest verb in a
verbal sequence is marked for tense and agreement regardless of whether it is a main or auxiliary
verb. Some auxiliaries (be, do, and have) share with main verbs the property of having overt
morphological marking for tense and agreement, while the modal auxiliaries do not. However,
all auxiliary verbs diﬀer from main verbs in several crucial ways.
• Multiple auxiliaries can occur in a single sentence, while a matrix sentence may have at
most one main verb.
• Auxiliary verbs cannot occur as the sole verb in the sentence, but must be followed by a
main verb.
• All auxiliaries precede the main verb in verbal sequences.
• Auxiliaries do not subcategorize for any arguments.
• Auxiliaries impose requirements on the morphological form of the verbs that immediately
follow them.
• Only auxiliary verbs invert in questions (with the sole exception in American English of
main verb be1).
• An auxiliary verb must precede sentential negation (e.g. ∗John not goes).
• Auxiliaries can form contractions with subjects and negation (e.g. he’ll, won’t).
The restrictions that an auxiliary verb imposes on the succeeding verb limits the sequence of
verbs that can occur. In English, sequences of up to ﬁve verbs are allowed, as in sentence (333).
1Some dialects, particularly British English, can also invert main verb have in yes/no questions (e.g. have
you any Grey Poupon ?). This is usually attributed to the inﬂuence of auxiliary have, coupled with the historic
fact that English once allowed this movement for all verbs.
185

186
CHAPTER 20. AUXILIARIES
(333) The music should have been being played [for the president] .
The required ordering of verb forms when all ﬁve verbs are present is:
modal base perfective progressive passive
The rightmost verb is the main verb of the sentence. While a main verb subcategorizes for the
arguments that appear in the sentence, the auxiliary verbs select the particular morphological
forms of the verb to follow each of them. The auxiliaries included in the English XTAG grammar
are listed in Table 20.1 by type. The third column of Table 20.1 lists the verb forms that are
required to follow each type of auxiliary verb.
TYPE
LEX ITEMS
SELECTS FOR
modals
can, could, may, might, will,
base form2
would, ought, shall, should
(e.g. will go, might come)
need
perfective
have
past participle
(e.g. has gone)
progressive
be
gerund
(e.g. is going, was coming)
passive
be
past participle
(e.g. was helped by Jane)
do support
do
base form
(e.g. did go, does come)
inﬁnitive to
to
base form
(e.g. to go, to come)
Table 20.1: Auxiliary Verb Properties
20.1
Non-inverted sentences
This section and the sections that follow describe how the English XTAG grammar accounts
for properties of the auxiliary system described above.
In our grammar, auxiliary trees are added to the main verb tree by adjunction. Figure 20.1
shows the adjunction tree for non-inverted sentences.3
The restrictions outlined in column 3 of Table 20.1 are implemented through the features
<mode>, <perfect>, <progressive> and <passive>. The syntactic lexicon entries for the
auxiliaries gives values for these features on the foot node (VP∗) in Figure 20.1. Since the top
features of the foot node must eventually unify with the bottom features of the node it adjoins
2There are American dialects, particularly in the South, which allow double modals such as might could and
might should. These constructions are not allowed in the XTAG English grammar.
3We saw this tree brieﬂy in section 4.4.3.2, but with most of its features missing. The full tree is presented
here.

20.1.
NON-INVERTED SENTENCES
187
VPr
assign-comp : <1>
neg : <2>
agr : <3>
mainv : <4>
tense : <5>
mode : <6>
assign-case : <7>
displ-const :
set1 : <8>
progressive : <9>
perfect : <10>
conditional : <11>
V◊assign-comp : <1>
neg : <2>
agr : <3>
mainv : <4>
tense : <5>
mode : <6>
assign-case : <7>
displ-const :
set1 : <8>
VP*
NA
displ-const :
set1 : -
progressive : <9>
perfect : <10>
conditional : <11>
Figure 20.1: Auxiliary verb tree for non-inverted sentences: βVvx
onto for the sentence to be valid, this enforces the restrictions made by the auxiliary node. In
addition to these feature values, each auxiliary also gives values to the anchoring node (V⋄), to
be passed up the tree to the root VP (VPr) node; there they will become the new features for
the top VP node of the sentential tree. Another auxiliary may now adjoin on top of it, and so
forth. These feature values thereby ensure the proper auxiliary sequencing. Figure 20.2 shows
the auxiliary trees anchored by the four auxiliary verbs in sentence (333). Figure 20.3 shows
the ﬁnal tree created for this sentence.
The general English restriction that matrix clauses must have tense (or be imperatives) is
enforced by requiring the top S-node of a sentence to have <mode>=ind/imp (indicative or
imperative). Since only the indicative and imperative sentences have tense, non-tensed clauses
are restricted to occurring in embedded environments.
Noun-verb contractions are labeled NVC in their part-of-speech ﬁeld in the morphological
database and then undergo special processing to split them apart into the noun and the reduced
verb before parsing. The noun then selects its trees in the normal fashion. The contraction, say

188
CHAPTER 20. AUXILIARIES
VPr
conditional : <1>
perfect : <2>
progressive : <3>
displ-const :
set1 : <4>
assign-case : <5>
mainv : <6>
agr : <7>
neg : <8>
assign-comp : <9>
tense : <10> pres
mode : <11> ind
V assign-comp : <9>
neg : <8>
agr : <7>
mainv : <6>
tense : <10>
mode : <11>
assign-case : <5>
displ-const :
set1 : <4>
displ-const :
set1 : -
assign-case : nom
assign-comp : ind_nil/that/rel/if/whether
mainv : -
tense : pres
mode : ind
should
VP*
NA
displ-const :
set1 : -
progressive : <3>
perfect : <2>
conditional : <1>
mode : base
VPr
conditional : <1>
progressive : <2>
displ-const :
set1 : <3>
assign-case : <4>
mode : <5>
tense : <6>
agr : <7>
neg : <8>
assign-comp : <9>
perfect : <10> +
mainv : <11> -
V assign-comp : <9>
neg : <8>
agr : <7>
mainv : <11>
tense : <6>
mode : <5>
assign-case : <4>
displ-const :
set1 : <3>
displ-const :
set1 : -
mode : base
have
VP*
NA
displ-const :
set1 : -
progressive : <2>
perfect : <10>
conditional : <1>
mode : ppart
passive : -
VPr
conditional : <1>
perfect : <2>
displ-const :
set1 : <3>
assign-case : <4>
mode : <5>
tense : <6>
agr : <7>
neg : <8>
assign-comp : <9>
progressive : <10> +
mainv : <11> -
V assign-comp : <9>
neg : <8>
agr : <7>
mainv : <11>
tense : <6>
mode : <5>
assign-case : <4>
displ-const :
set1 : <3>
displ-const :
set1 : -
weak : -
mode : ppart
been
VP*
NA
displ-const :
set1 : -
progressive : <10>
perfect : <2>
conditional : <1>
mode : ger
VPr
conditional : <1>
perfect : <2>
progressive : <3>
displ-const :
set1 : <4>
assign-case : <5>
mode : <6>
tense : <7>
agr : <8>
neg : <9>
assign-comp : <10>
mainv : <11> -
V assign-comp : <10>
neg : <9>
agr : <8>
mainv : <11>
tense : <7>
mode : <6>
assign-case : <5>
displ-const :
set1 : <4>
displ-const :
set1 : -
assign-case : none
mode : ger
being
VP*
NA
displ-const :
set1 : -
progressive : <3>
perfect : <2>
conditional : <1>
mode : ppart
passive : +
mainv : +
Figure 20.2: Auxiliary trees for The music should have been being played .

20.2.
INVERTED SENTENCES
189
Sr
NP
D
the
N
music
VPr
V
should
VP
NA
V
have
VP
NA
V
been
VP
NA
V
being
VP
NA
V
played
Figure 20.3: The music should have been being played .
’ll or ’d, likewise selects the normal auxiliary verb tree, βVvx. However, since the contracted
form, rather than the verb stem, is given in the morphology, the contracted form must also be
listed as a separate syntactic entry. These entries have all the same features of the full form
of the auxiliary verbs, with tense constraints coming from the morphological entry (e.g. it’s is
listed as it ’s NVC 3sg PRES). The ambiguous contractions ’d (had/would) and ‘s (has/is)
behave like other ambiguous lexical items; there are simply multiple entries for those lexical
items in the lexicon, each with diﬀerent features. In the resulting parse, the contracted form is
shown with features appropriate to the full auxiliary it represents.
20.2
Inverted Sentences
In inverted sentences, the two trees shown in Figure 20.4 adjoin to an S tree anchored by a
main verb. The tree in Figure 20.4(a) is anchored by the auxiliary verb and adjoins to the S
node, while the tree in Figure 20.4(b) is anchored by an empty element and adjoins at the VP

190
CHAPTER 20. AUXILIARIES
node. Figure 20.5 shows these trees (anchored by will) adjoined to the declarative transitive
tree4 (anchored by main verb buy).
Sr displ-const :
set1 : -
neg : <1>
agr : <2>
tense : <3>
progressive : <7>
perfect : <8>
conditional : <9>
assign-case : <5>
mode : <4>
inv : +
V◊neg : <1>
agr : <2>
tense : <3>
mode : <4> ind
assign-case : <5>
agr : <6>
S*
NA
progressive : <7>
perfect : <8>
conditional : <9>
assign-case : <5>
agr : <6>
displ-const :
set1 : +
comp : nil
inv : -
VPr
conditional : <1>
perfect : <2>
progressive : <3>
displ-const :
set1 : <7>
assign-case : <8>
tense : <9>
neg : <10>
assign-comp : <11>
agr : <4>
passive : <5>
mode : <6>
mainv : <12> -
V assign-comp : <11>
neg : <10>
agr : <4>
mainv : <12>
tense : <9>
mode : <6>
assign-case : <8>
displ-const :
set1 : <7>
displ-const :
set1 : +
ε
VP*
NA
conditional : <1>
perfect : <2>
progressive : <3>
displ-const :
set1 : -
agr : <4>
passive : <5>
mode : <6>
(a)
(b)
Figure 20.4: Trees for auxiliary verb inversion: βVs (a) and βVvx (b)
The feature <displ-const> ensures that both of the trees in Figure 20.4 must adjoin to
an elementary tree whenever one of them does. For more discussion on this mechanism, which
simulates tree local multi-component adjunction, see [Hockey and Srinivas, 1993]. The tree in
Figure 20.4(b), anchored by ǫ, represents the originating position of the inverted auxiliary. Its
adjunction blocks the <assign-case> values of the VP it dominates from being co-indexed
with the <case> value of the subject. Since <assign-case> values from the VP are blocked,
the <case> value of the subject can only be co-indexed with the <assign-case> value of
the inverted auxiliary (Figure 20.4(a)). Consequently, the inverted auxiliary functions as the
case-assigner for the subject in these inverted structures. This is in contrast to the situation in
uninverted structures where the anchor of the highest (leftmost) VP assigns case to the subject
4The declarative transitive tree was seen in section 6.2.

20.3.
DO-SUPPORT
191
Sr
V
will
S
NA
NP
N
John
VPr
V
ε
VP
NA
V
buy
NP
D
a
N
backpack
Figure 20.5: will John buy a backpack ?
(see section 4.4.3.2 for more on case assignment). The XTAG analysis is similar to GB accounts
where the inverted auxiliary plus the ǫ-anchored tree are taken as representing I to C movement.
20.3
Do-Support
It is well-known that English requires a mechanism called ‘do-support’ for negated sentences
and for inverted yes-no questions without auxiliaries.
(334) John does not want a car .
(335) ∗John not wants a car .
(336) John will not want a car .
(337) Do you want to leave home ?
(338) ∗want you to leave home ?
(339) will you want to leave home ?

192
CHAPTER 20. AUXILIARIES
20.3.1
In negated sentences
The GB analysis of do-support in negated sentences hinges on the separation of the INFL and
VP nodes (see [Chomsky, 1965], [Jackendoﬀ, 1972] and [Chomsky, 1986]). The claim is that
the presence of the negative morpheme blocks the main verb from getting tense from the INFL
node, thereby forcing the addition of a verbal lexeme to carry the inﬂectional elements.
If
an auxiliary verb is present, then it carries tense, but if not, periphrastic or ‘dummy’, do is
required. This seems to indicate that do and other auxiliary verbs would not co-occur, and
indeed this is the case (see sentences (340)-(341)). Auxiliary do is allowed in English when no
negative morpheme is present, but this usage is marked as emphatic. Emphatic do is also not
allowed to co-occur with auxiliary verbs (sentences (342)-(345)).
(340) ∗We will have do bought a sleeping bag .
(341) ∗We do will have bought a sleeping bag .
(342) You do have a backpack, don’t you ?
(343) I do want to go !
(344) ∗You do can have a backpack, don’t you ?
(345) ∗I did have had a backpack !
At present, the XTAG grammar does not have analyses for emphatic do.
In the XTAG grammar, do is prevented from co-occurring with other auxiliary verbs by a
requirement that it adjoin only onto main verbs (<mainv> = +). It has indicative mode, so
no other auxiliaries can adjoin above it.5 The lexical item not is only allowed to adjoin onto a
non-indicative (and therefore non-tensed) verb. Since all matrix clauses must be indicative (or
imperative), a negated sentence will fail unless an auxiliary verb, either do or another auxiliary,
adjoins somewhere above the negative morpheme, not. In addition to forcing adjunction of an
auxiliary, this analysis of not allows it freedom to move around in the auxiliaries, as seen in the
sentences (346)-(349).
(346) John will have had a backpack .
(347) ∗John not will have had a backpack .
(348) John will not have had a backpack .
(349) John will have not had a backpack .
5Earlier, we said that indicative mode carries tense with it. Since only the topmost auxiliary carries the tense,
any subsequent verbs must not have indicative mode.

20.4.
INFINITIVES
193
20.3.2
In inverted yes/no questions
In inverted yes/no questions, do is required if there is no auxiliary verb to invert, as seen in
sentences (337)-(339), replicated here as (350)-(352).
(350) do you want to leave home ?
(351) ∗want you to leave home ?
(352) will you want to leave home ?
(353) ∗do you will want to leave home ?
In English, unlike other Germanic languages, the main verb cannot move to the beginning
of a clause, with the exception of main verb be.6 In a GB account of inverted yes/no questions,
the tense feature is said to be in C0 at the front of the sentence. Since main verbs cannot move,
they cannot pick up the tense feature, and do-support is again required if there is no auxiliary
verb to perform the role. Sentence (353) shows that do does not interact with other auxiliary
verbs, even when in the inverted position.
In XTAG, trees anchored by a main verb that lacks tense are required to have an auxiliary
verb adjoin onto them, whether at the VP node to form a declarative sentence, or at the S node
to form an inverted question. Do selects the inverted auxiliary trees given in Figure 20.4, just
as other auxiliaries do, so it is available to adjoin onto a tree at the S node to form a yes/no
question. The mechanism described in section 20.3.1 prohibits do from co-occurring with other
auxiliary verbs, even in the inverted position.
20.4
Inﬁnitives
The inﬁnitive to is considered an auxiliary verb in the XTAG system, and selects the auxiliary
tree in Figure 20.1. To, like do, does not interact with the other auxiliary verbs, adjoining only
to main verb base forms, and carrying inﬁnitive mode. It is used in embedded clauses, both
with and without a complementizer, as in sentences (354)-(356). Since it cannot be inverted,
it simply does not select the trees in Figure 20.4.
(354) John wants to have a backpack .
(355) John wants Mary to have a backpack .
(356) John wants for Mary to have a backpack .
The usage of inﬁnitival to interacts closely with the distribution of null subjects (PRO), and
is described in more detail in section 8.5.
6The inversion of main verb have in British English was previously noted.

194
CHAPTER 20. AUXILIARIES
20.5
Semi-Auxiliaries
Under the category of semi-auxiliaries, we have placed several verbs that do not seem to closely
follow the behavior of auxiliaries. One of these auxiliaries, dare, mainly behaves as a modal
and selects for the base form of the verb. The other semi-auxiliaries all select for the inﬁnitival
form of the verb. Examples of this second type of semi-auxiliary are used to, ought to, get to,
have to, and BE to.
20.5.1
Marginal Modal dare
The auxiliary dare is unique among modals in that it both allows DO-support and exhibits
a past tense form. It clearly falls in modal position since no other auxiliary (except do) may
precede it in linear order7. Examples appear below.
(357) she dare not have been seen .
(358) she does not dare succeed .
(359) Jerry dared not look left or right .
(360) only models dare wear such extraordinary outﬁts .
(361) dare Dale tell her the secret ?
(362) ∗Louise had dared not tell a soul .
As mentioned above, auxiliaries are prevented from having DO-support within the XTAG
system. To allow for DO-support in this case, we had to create a lexical entry for dare that
allowed it to have the feature mainv+ and to have base mode (this measure is what also
allows dare to occur in double-modal sequences). A second lexical entry was added to handle
the regular modal occurrence of dare. Additionally, all other modals are classiﬁed as being
present tense, while dare has both present and past forms. To handle this behavior, dare was
given similar features to the other modals in the morphology minus the speciﬁcation for tense.
7Some speakers accept dare preceded by a modal, as in I might dare ﬁnish this report today. In the XTAG
analysis, this particular double modal usage is accounted for. Other cases of double modal occurrence exist in
some dialects of American English, although these are not accounted for in the system, as was mentioned earlier.

20.5.
SEMI-AUXILIARIES
195
20.5.2
Other semi-auxiliaries
The other semi-auxiliaries all select for the inﬁnitival form of the verb. Many of these auxiliaries
allow for DO-support and can appear in both base and past participle forms, in addition to
being able to stand alone (indicative mode). Examples of this type appear below.
(363) Alex used to attend karate workshops .
(364) Angelina might have used to believe in fate .
(365) Rich did not used to want to be a physical therapist .
(366) Mick might not have to play the game tonight .
(367) Singer had to have been there .
(368) Heather has got to ﬁnish that project before she goes insane .
The auxiliaries ought to and BE to may not be preceded by any other auxiliary.
(369) Biﬀought to have been working harder .
(370) ∗Carson does ought to have been working harder .
(371) the party is to take place this evening .
(372) ∗the party had been to take place this evening .
The trickiest element in this group of auxiliaries is used to. While the other verbs behave
according to standard inﬂection for auxiliaries, used to has the same form whether it is in mode
base, past participle, or indicative forms.
The only connection used to maintains with the
inﬁnitival form use is that occasionally, the bare form use will appear with DO-support. Since
the three modes mentioned above are mutually exclusive in terms of both the morphology and
the lexicon, used has three entries in each.

196
CHAPTER 20. AUXILIARIES
20.5.3
Other Issues
There is a lingering problem with the auxiliaries that stems from the fact that there currently
is no way to distinguish between the main verb and auxiliary verb behaviors for a given letter
string within the morphology.
This situation results in many unacceptable sentences being
successfully parsed by the system. Examples of the unacceptable sentences are given below.
(373) the miller cans tell a good story . (vs the farmer cans peaches in July .)
(374) David wills have ﬁnished by noon . (vs the old man wills his fortune to me .)
(375) Sarah needs not leave . (vs Sarah needs to leave .)
(376) Jennifer dares not be seen . (vs the young woman dares him to do the stunt .)
(377) Lila does use to like beans . (vs Lila does use her new cookware .)

Chapter 21
Conjunction
21.1
Introduction
The XTAG system can handle sentences with conjunction of two constituents of the same
syntactic category. The coordinating conjunctions which select the conjunction trees are and,
or and but.1 There are also multi-word conjunction trees, anchored by either-or, neither-nor,
both-and, and as well as. There are eight syntactic categories that can be coordinated, and in
each case an auxiliary tree is used to implement the conjunction. These eight categories can
be considered as four diﬀerent cases, as described in the following sections. In all cases the
two constituents are required to be of the same syntactic category, but there may also be some
additional constraints, as described below.
21.2
Adjective, Adverb, Preposition and PP Conjunction
Each of these four categories has an auxiliary tree that is used for conjunction of two constituents
of that category. The auxiliary tree adjoins into the left-hand-side component, and the right-
hand-side component substitutes into the auxiliary tree.
Figure 21.1(a) shows the auxiliary tree for adjective conjunction, and is used, for example,
in the derivation of the parse tree for the noun phrase the dark and dreary day, as shown in
Figure 21.1(b). The auxiliary tree adjoins onto the node for the left adjective, and the right
adjective substitutes into the right hand side node of the auxiliary tree. The analysis for adverb,
preposition and PP conjunction is exactly the same and there is a corresponding auxiliary tree
for each of these that is identical to that of Figure 21.1(a) except, of course, for the node labels.
21.3
Noun Phrase and Noun Conjunction
The tree for NP conjunction, shown in Figure 21.2(a), has the same basic analysis as in the
previous section except that the <wh> and <case> features are used to force the two noun
phrases to have the same <wh> and <case> values. This allows, for example, he and she
wrote the book together while disallowing ∗he and her wrote the book together. Agreement is
1We believe that the restriction of but to conjoining only two items is a pragmatic one, and our grammars
accepts sequences of any number of elements conjoined by but.
197

198
CHAPTER 21. CONJUNCTION
A
A1*
Conj◊
A2↓
NP
DetP
D
the
Nr
A
A1
dark
Conj
and
A
dreary
Nf
NA
day
(a)
(b)
Figure 21.1: Tree for adjective conjunction: βa1CONJa2 and a resulting parse tree
lexicalized, since the various conjunctions behave diﬀerently. With and, the root <agr num>
value is <plural>, no matter what the number of the two conjuncts. With or, however, the root
<agr num> is co-indexed with the <agr num> feature of the right conjunct. This ensures
that the entire conjunct will bear the number of both conjuncts if they agree (Figure 21.2(b)),
or of the most “recent” one if they diﬀer (Either the boys or John is going to help you.). There
is no rule per se on what the agreement should be here, but people tend to make the verb agree
with the last conjunct (cf. [Quirk et al., 1985], section 10.41 for discussion). The tree for N
conjunction is identical to that for the NP tree except for the node labels. (The multi-word
conjunctions do not select the N conjunction tree - ∗the both dogs and cats).
21.4
Determiner Conjunction
In determiner coordination, all of the determiner feature values are taken from the left deter-
miner, and the only requirement is that the <wh> feature is the same, while the other features,
such as <card>, are unconstrained. For example, which and what and all but one are both
acceptable determiner conjunctions, but ∗which and all is not.
(378) how many and which people camp frequently ?
(379) ∗some or which people enjoy nature .
21.5
Sentential Conjunction
The tree for sentential conjunction, shown in Figure 21.4, is based on the same analysis as the
conjunctions in the previous two sections, with a slight diﬀerence in features. The <mode>

21.6.
COMMA AS A CONJUNCTION
199
NP
decreas : <4>
card : <5>
quan : <6>
definite : <7>
gen : <8>
const : <9>
conj : <1>
displ-const : <10>
wh : <2>
case : <3>
Conj1 ◊conj : <1>
NP1 *
NA
decreas : <4>
card : <5>
quan : <6>
definite : <7>
gen : <8>
const : <9>
displ-const : <10>
wh : <2>
case : <3>
Conj2 ◊
NP2 ↓wh : <2>
case : <3> nom/acc
NP case : <1> nom/acc
wh : <2> -
displ-const : <3>
conj : <4> or
const : <5> -
gen : <6> -
definite : <7> -
quan : <8> -
card : <9> -
decreas : <10> -
predet : <11>
agr :
num : <12> plur
Conj1
either
NP1
NA
N
aardvarks
Conj2
or
NP
N
emus
(a)
(b)
Figure 21.2: Tree for NP conjunction: βCONJnx1CONJnx2 and a resulting parse tree
feature2 is used to constrain the two sentences being conjoined to have the same mode so that the
day is dark and the phone never rang is acceptable, but ∗the day dark and the phone never rang
is not. Similarly, the two sentences must agree in their <wh>, <comp> and <extracted>
features. Co-indexation of the <comp> feature ensures that either both conjuncts have the
same complementizer, or there is a single complementizer adjoined to the complete conjoined
S. The <assign-comp> feature3 feature is used to allow conjunction of inﬁnitival sentences,
such as to read and to sleep is a good life.
21.6
Comma as a conjunction
We treat comma as a conjunction in conjoined lists. It anchors the same trees as the lexical
conjunctions, but is considerably more restricted in how it combines with them. The trees
anchored by commas are prohibited from adjoining to anything but another comma conjoined
element or a non-coordinate element. (All scope possibilities are allowed for elements coordi-
nated with lexical conjunctions.) Thus, structures such as Tree 21.5(a) are permitted, with
each element stacking sequentially on top of the ﬁrst element of the conjunct, while structures
such as Tree 21.5(b) are blocked.
2See section 8.3 for an explanation of the <mode> feature.
3See section 8.5 for an explanation of the <assign-comp> feature.

200
CHAPTER 21. CONJUNCTION
D
conj : <1>
wh : <2>
const : <3>
decreas : <4>
gen : <5>
card : <6>
quan : <7>
agr : <8>
definite : <9>
predet : <10>
displ-const : <11>
D1 *
NA
wh : <2>
const : <3>
decreas : <4>
gen : <5>
card : <6>
quan : <7>
agr : <8>
definite : <9>
predet : <10>
displ-const : <11>
Conj◊conj : <1>
D2 ↓wh : <2>
Figure 21.3: Tree for determiner conjunction: βd1CONJd2.ps

21.6.
COMMA AS A CONJUNCTION
201
S
comp : <2>
extracted : <3>
wh : <4>
conj : <1>
displ-const : <5>
mode : <6> ind/inf/ger/nom/prep/imp
S1*
NA
comp : <2>
extracted : <3>
wh : <4>
displ-const : <5>
assign-comp : inf_nil/ind_nil
mode : <6>
Conj◊conj : <1>
S2↓comp : <2>
extracted : <3>
wh : <4>
assign-comp : inf_nil/ind_nil
mode : <6>
Figure 21.4: Tree for sentential conjunction: βs1CONJs2
NP
Nr
A
A1
NA
A1
NA
beautiful
Conj
,
A
red
Conj
,
A
fragrant
Nf
NA
roses
NP
Nr
A
A1
NA
beautiful
Conj
,
A
A1
NA
red
Conj
,
A
fragrant
Nf
NA
roses
(a) Valid tree with comma conjunction
(b) Invalid tree
Figure 21.5:
This is accomplished by using the <conj> feature, which has the values and/or/but
and comma to diﬀerentiate the lexical conjunctions from commas. The <conj> values for a
comma-anchored tree and and-anchored tree are shown in Figure 21.6. The feature <conj>
= comma/none on A1 in (a) only allows comma conjoined or non-conjoined elements as the
left-adjunct, and <conj> = none on A in (a) allows only a non-conjoined element as the right

202
CHAPTER 21. CONJUNCTION
conjunct. We also need the feature <conj> = and/or/but/none on the right conjunct of
the trees anchored by lexical conjunctions like (b), to block comma-conjoined elements from
substituting there. Without this restriction, we would get multiple parses of the NP in Tree
21.5; with the restrictions we only get the derivation with the correct scoping, shown as (a).
Since comma-conjoined lists can appear without a lexical conjunction between the ﬁnal two
elements, as shown in example (380), we cannot force all comma-conjoined sequences to end
with a lexical conjunction.
(380) So it is too with many other spirits which we all know: the spirit of Nazism or Com-
munism, school spirit , the spirit of a street corner gang or a football team, the spirit of
Rotary or the Ku Klux Klan.
[Brown cd01]
Nr
A neg : -
conj : <14> comma
displ-const : <15>
A1
NA
wh : -
displ-const : <15>
neg : -
conj : comma/none
large
Conj conj : <14>
,
A wh : -
neg : -
conj : none
white
Nf*
NA
Nr
A neg : -
conj : <14> and
displ-const : <15>
A1
NA
wh : -
neg : -
displ-const : <15>
red
Conj conj : <14>
and
A wh : -
neg : -
conj : and/or/but/none
white
Nf*
NA
Figure 21.6: βa1CONJa2 (a) anchored by comma and (b) anchored by and
21.7
But-not, not-but, and-not and ǫ-not
We are analyzing conjoined structures such as The women but not the men with a multi-anchor
conjunction tree anchored by the conjunction plus the adverb not. The alternative is to allow
not to adjoin to any constituent. However, this is the only construction where not can freely
occur onto a constituent other than a VP or adjective (cf. βNEGvx and βNEGa trees). It can
also adjoin to some determiners, as discussed in Section 18. We want to allow sentences like
(381) and rule out those like (382). The tree for the good example is shown in Figure 21.7.
There are similar trees for and-not and ǫ-not, where ǫ is interpretable as either and or but, and
a tree with not on the ﬁrst conjunct for not-but.
(381) Beth grows basil in the house (but) not in the garden .
(382) ∗Beth grows basil (but) not in the garden .

21.8. TO AS A CONJUNCTION
203
PP
PP1*
NA
Conj
but
PP0
NA
Ad
not
PP2↓
Figure 21.7: Tree for conjunction with but-not: βpx1CONJARBpx2
Although these constructions sound a bit odd when the two conjuncts do not have the
same number, they are sometimes possible. The agreement information for such NPs is always
that of the non-negated conjunct: his sons, and not Bill, are in charge of doing the laundry
or not Bill, but his sons, are in charge of doing the laundry (Some people insist on having the
commas here, but they are frequently absent in corpus data.) The agreement feature from the
non-negated conjunct in passed to the root NP, as shown in Figure 21.8. Aside from agreement,
these constructions behave just like their non-negated counterparts.
21.8
To as a Conjunction
To can be used as a conjunction for adjectives (Fig. 21.9) and determiners, when they denote
points on a scale:
(383) two to three degrees
(384) high to very high temperatures
As far as we can tell, when the conjuncts are determiners they must be cardinal.
21.9
Predicative Coordination
This section describes the method for predicative coordination (including VP coordination of
various kinds) used in XTAG. The description is derived from work described in ([Sarkar and
Joshi, 1996]). It is important to say that this implementation of predicative coordination is
not part of the XTAG release at the moment due massive parsing ambiguities. This is partly
because of the current implementation and also the inherent ambiguities due to VP coordination
that cause a combinatorial explosion for the parser. We are trying to remedy both of these

204
CHAPTER 21. CONJUNCTION
NP neg : +
wh : <1>
case : <2> nom/acc
displ-const : <3>
conj : <4> but
agr :
num : <5>
NP0
NA
displ-const : <3>
case : <2>
wh : <1>
Ad
not
NP1*
NA
displ-const : <3>
wh : <1>
case : <2>
Conj conj : <4>
but
NP2↓wh : <1>
case : <2>
agr :
num : <5>
conj : and/or/but/none
Figure 21.8: Tree for conjunction with not-but: βARBnx1CONJnx2
limitations using a probability model for coordination attachments which will be included as
part of a later XTAG release.
This extended domain of locality in a lexicalized Tree Adjoining Grammar causes problems
when we consider the coordination of such predicates. Consider (385) for instance, the NP the
beans that I bought from Alice in the Right-Node Raising (RNR) construction has to be shared
by the two elementary trees (which are anchored by cooked and ate respectively).
(385) (((Harry cooked) and (Mary ate)) the beans that I bought from Alice)
We use the standard notion of coordination which is shown in Figure 21.10 which maps two
constituents of like type, but with diﬀerent interpretations, into a constituent of the same type.
We add a new operation to the LTAG formalism (in addition to substitution and adjunction)
called conjoin (later we discuss an alternative which replaces this operation by the traditional
operations of substitution and adjunction). While substitution and adjunction take two trees
to give a derived tree, conjoin takes three trees and composes them to give a derived tree.
One of the trees is always the tree obtained by specializing the schema in Figure 21.10 for a
particular category. The tree obtained will be a lexicalized tree, with the lexical anchor as the
conjunction: and, but, etc.
The conjoin operation then creates a contraction between nodes in the contraction sets of
the trees being coordinated. The term contraction is taken from the graph-theoretic notion of
edge contraction. In a graph, when an edge joining two vertices is contracted, the nodes are

21.9.
PREDICATIVE COORDINATION
205
NP
Nr
A
A1
NA
high
Conj
to
Ar
Ad
very
A
NA
high
Nf
NA
temperatures
Figure 21.9: Example of conjunction with to
110
X
X
Conj
X
Figure 21.10: Coordination schema
merged and the new vertex retains edges to the union of the neighbors of the merged vertices.
The conjoin operation supplies a new edge between each corresponding node in the contraction
set and then contracts that edge.
For example, applying conjoin to the trees Conj(and), α(eats) and α(drinks) gives us the
derivation tree and derived structure for the constituent in 386 shown in Figure 21.11.
(386) . . . eats cookies and drinks beer
Another way of viewing the conjoin operation is as the construction of an auxiliary structure
from an elementary tree. For example, from the elementary tree α(drinks), the conjoin oper-
ation would create the auxiliary structure β(drinks) shown in Figure 21.12. The adjunction
operation would now be responsible for creating contractions between nodes in the contraction
sets of the two trees supplied to it. Such an approach is attractive for two reasons. First, it
uses only the traditional operations of substitution and adjunction. Secondly, it treats conj
X as a kind of “modiﬁer” on the left conjunct X. This approach reduces some of the parsing
ambiguities introduced by the predicative coordination trees and forms the basis of the XTAG
implementation.

206
CHAPTER 21. CONJUNCTION
110
VP
Conj(and)
VP
and
VP
Derived structure
and
S
NP
VP
V
NP
VP
eats
S
VP
V
NP
cookies
beer
drinks
α
Conj(and)
α
α
1
2.2
(cookies)
(eats){1}
(drinks)
{1}
α (beer)
2.2
3
Derivation tree
Figure 21.11: An example of the conjoin operation. {1} denotes a shared dependency.
110
NP
VP*
and
VP
S
NP
S
VP
V
NP
eats
VP
V
NP
drinks
(eats)
α
(drinks)
β
{1}
{1}
Figure 21.12: Coordination as adjunction.

21.10.
PSEUDO-COORDINATION
207
More information about predicative coordination can be found in ([Sarkar and Joshi, 1996]),
including an extension to handle gapping constructions.
21.10
Pseudo-coordination
The XTAG grammar does handle one sort of verb pseudo-coordination. Semi-idiomatic phrases
such as ’try and’ and ’up and’ (as in ’they might try and come today’) are handled as multi-
anchor modiﬁers rather than as true coordination. These items adjoin to a V node, using the
βVCONJv tree. This tree adjoins only to verbs in their base morphological (non-inﬂected) form.
The verb anchor of the βVCONJv must also be in its base form, as shown in examples (387)-
(389). This blocks 3rd-person singular derivations, which are the only person morphologically
marked in the present, except when an auxiliary verb is present or the verb is in the inﬁnitive.
(387) ∗He tried and came yesterday.
(388) They try and exercise three times a week.
(389) He wants to try and sell the puppies.

Chapter 22
Comparatives
22.1
Introduction
Comparatives in English can manifest themselves in many ways, acting on many diﬀerent
grammatical categories and often involving ellipsis. A distinction must be made at the outset
between two very diﬀerent sorts of comparatives—those which make a comparison between two
propositions and those which compare the extent to which an entity has one property to a
greater or lesser extent than another property. The former, which we will refer to as proposi-
tional comparatives, is exempliﬁed in (390), while the latter, which we will call metalinguistic
comparatives (following Hellan 1981), is seen in (391):
(390) Ronaldo is more angry than Romario.
(391) Ronaldo is more angry than upset.
In (390), the extent to which Ronaldo is angry is greater than the extent to which Romario is
angry. Sentence (391) indicates that the extent to which Ronaldo is angry is greater than the
extent to which he is upset.
Apart from certain of the elliptical cases, both kinds of comparatives can be handled straight-
forwardly in the XTAG system. Elliptical cases which are not presently covered include those
exempliﬁed by the following sentences, which would presumably be handled in the same way
as other sorts of VP ellipsis would.
(392) Ronaldo is more angry than Romario is.
(393) Bill eats more broccoli than George eats.
(394) Bill eats more broccoli than George does.
We turn to the analysis of metalinguistic comparatives ﬁrst.
208

22.2.
METALINGUISTIC COMPARATIVES
209
22.2
Metalinguistic Comparatives
A metalinguistic comparison can be performed on basically all of the predicational categories—
adjectives, verb phrases, prepositional phrases, and nouns—as in the following examples:
(395) The table is more long than wide. (AP)
(396) Clark more makes the rules than follows them. (VP)
(397) Calvin is more in the living room than in the kitchen. (PP)
(398) That unindentiﬁed amphibian in the bush is more frog than toad, I would say. (NP)
At present, we only deal with the adjectival metalinguistic comparatives as in (395).
The
analysis given here for these can be easily extended to prepositional phrases and nominal com-
paratives of the metalinguistic sort, but, as with coordination in XTAG, verb phrases will prove
more diﬃcult.
Adjectival comparatives appear to distribute with simple adjectives, as in the following
examples:
(399) Herbert is more livid than angry.
(400) Herbert is more livid and furious than angry.
(401) The more innovative than conventional medication cured everyone in the sick ward.
(402) The elephant, more wobbly than steady, fell from the circus ball.
This patterning indicates that we can give these comparatives a tree that adjoins quite
freely onto adjectives, as in Figure 22.1. This tree is anchored by more/less - than. To avoid
grammatically incorrect comparisons such as more brighter than dark, the feature compar
is used to block this tree from adjoining onto morphologically comparative adjectives. The
foot node is compar-, while brighter and its comparative siblings are compar+1. We also
wish to block strings like more brightest than dark, which is accomplished with the feature
super, indicating superlatives. This feature is negative at the foot node so that βARBaPa
cannot adjoin to superlatives like nicest, which are speciﬁed as super+ from the morphology.
Furthermore, the root node is super+ so that βARBaPa cannot adjoin onto itself and produce
monstrosities such as (403):
(403) *Herbert is more less livid than angry than furious.
1The analysis given later for adjectival propositional comparatives produces aggregated compar+ adjectives
such as more bright, which will also be incompatible (as desired) with βARBaPa.

210
CHAPTER 22. COMPARATIVES
Ar
Ad◊
Af*
PP
P◊
A↓
Figure 22.1: Tree for Metalinguistic Adjective Comparative: βARBaPa
Thus, the use of the super feature is less to indicate superlativeness speciﬁcally, but rather to
indicate that the subtree below a super+ node contains a full-ﬂeshed comparison. In the case
of lexical superlatives, the comparison is against everything, implicitly.
A beneﬁt of the multiple-anchor approach here is that we will never allow sentences such
as (404), which would be permissible if we split the comparative component and the than
component of metalinguistic comparatives into two separate trees.
(404) *Ronaldo is angrier than upset.
We also see another variety of adjectival comparatives of the form more/less than X, which
indicates some property which is more or less extreme than the property X. In a sentence such
as (405), some property is being said to hold of Francis such that it is of a kind with stupid and
that it exceeds stupid on some scale (intelligence, for example). Quirk et al. also note that these
constructions remark on the inadequacy of the lexical item. Thus, in (404), it could be that
stupid is a starting point from which the speaker makes an approximation for some property
which the speaker feels is beyond the range of the English lexicon, but which expresses the
supreme lack of intellect of the individual it is predicated of.
(405) Francis is more than stupid.
(406) Romario is more than just upset.
Taking our inspiration from βARBaPa, we can handle these comparatives, which have the
same distribution but contain an empty adjective, by using the tree shown in Figure 22.2.
This sort of metalinguistic comparative also occurs with the verb phrase, prepositional
phrase, and noun varieties.
(407) Clark more than makes the rules. (VP)
(408) Calvin’s hands are more than near the cookie jar. (PP)
(409) That stuﬀon her face is more than mud. (NP)
Presumably, the analysis for these would parallel that for adjectives, though it has not yet been
implemented.

22.3.
PROPOSITIONAL COMPARATIVES
211
Ar
Ad◊
A
NA
ε
PP
P◊
Af*
Figure 22.2: Tree for Adjective-Extreme Comparative: βARBPa
22.3
Propositional Comparatives
22.3.1
Nominal Comparatives
Nominal comparatives are considered here to be those which compare the cardinality of two
sets of entities denoted by nominal phrases. The following data lay out a basic distribution of
these comparatives.
(410) More vikings than mongols eat spam.
(411) *More the vikings than mongols eat spam.
(412) Vikings eat less spaghetti than spam.
(413) More men that walk to the store than women who despise spam enjoyed the football
game.
(414) More men than James like scotch on the rocks.
(415) Elmer knows fewer martians than rabbits.
Looking at these examples, we are tempted to produce a tree for this construction that is
similar to βARBaPa. However, it is quite common for the than portion of these comparatives
to be left out, as in the following sentences:
(416) More vikings eat spam.
(417) Mongols eat less spam.

212
CHAPTER 22. COMPARATIVES
Furthermore, than NP cannot occur without more. These facts indicate that we can and should
build up nominal comparatives with two separate trees. The ﬁrst, which allows a comparative
adverb to adjoin to a noun, is given in Figure 22.3(a). The second is the noun-phrase modifying
prepositional tree. The tree βCARBn is anchored by more/less/fewer and βCnxPnx is anchored
by than. The feature compar is used to ensure that only one βCARBn tree can adjoin to any
given noun—its foot node is compar- and the root node is compar+. All nouns are compar-,
and the compar value is passed up through all trees which adjoin to N or NP. In order to ensure
that we do not allow sentences like *Vikings than mongols eat spam, the compar feature is
used. The NP foot node of βCnxPnx is compar+; thus, βCnxPnx will adjoin only to NP’s
which have been already modiﬁed by βCARBn (and thereby comparativized). In this way, we
capture sentences like (416) en route to deriving sentences like (410), in a principled and simple
manner.
Nr
equiv : <1>
super
: -
compar : +
Ad◊equiv : <1>
compar : +
super
: -
Nf*
compar : -
super
: -
NP r
NP f*
PP
P◊
NP ↓
(a) βCARBn tree
(b) βCnxPnx tree
Figure 22.3: Nominal comparative trees
Further evidence for this approach comes from comparative clauses which are missing the
noun phrase which is being compared against something, as in the following:
(418) The vikings ate more.2
(419) The vikings ate more than a boar.3
Sometimes the missing noun refers to an entity or set available in the prior discourse, while at
other times it is a reference to some anonymous, unspeciﬁed set. The former is exempliﬁed in
a mini-discourse such as the following:
2We ignore here the interpretation in which the comparison covers the eating event, focussing only on the one
which the comparison involves the stuﬀbeing eaten.
3This sentence diﬀers from the metalinguistic comparison That stuﬀon her face is more than mud in that
it involves a comment on the quantity and/or type of the compared NP, whereas the other expresses that the
property denoted by the compared noun is an inadequate characterization of the thing being described.

22.3.
PROPOSITIONAL COMPARATIVES
213
Calvin: “The mongols ate spam.”
Hobbes: “The vikings ate more.”
The latter can be seen in the following example:
Calvin: “The vikings ate a a boar.”
Hobbes: “Indeed. But in fact, the vikings ate more than a boar.”
Since the lone comparatives more/less/fewer have the same basic distribution as noun
phrases, the tree in Figure 22.4 is employed to capture this fact. The root node of αCARB is
compar+. Not only does this accord with our intuitions about what the compar feature is
supposed to indicate, it also permits βnxPnx to adjoin, giving us strings such as more than NP
for free.
NP
Ad◊
N
NA
ε
Figure 22.4: Tree for Lone Comparatives: αCARB
Thus, by splitting nominal comparatives into multiple trees, we make correct predictions
about their distribution with a minimal number of simple trees. Furthermore, we now also get
certain comparative coordinations for free, once we place the requirement that nouns and noun
phrases must match for compar if they are to be coordinated. This yields strings such as the
following:
(420) Julius eats more grapes and fewer boars than avocados.
(421) Were there more or less than ﬁfty people (at the party)?
The structures are given in Figure 22.5. Also, it will block strings like more men and women than
children under the (impossible) interpretation that there are more men than children but the
comparison of the quantity of women to children is not performed. Unfortunately, it will permit
comparative clauses such as more grapes and fewer than avocados under the interpretation in
which there are more grapes than avocados and fewer of some unspeciﬁed thing than avocados
(see Figure 22.6).
One aspect of this analysis is that it handles the elliptical comparatives such as the following:

214
CHAPTER 22. COMPARATIVES
NP r
NP
NP 1
NA
Nr
Ad
more
Nf
grapes
Conj
and
NP
Nr
Ad
fewer
Nf
boars
PP
P
than
NP
N
avocados
NP r
NP f
NP 1
NA
Ad
more
N
NA
ε
Conj
or
NP
Ad
less
N
NA
ε
PP
P
than
NP
Nr
N
fifty
Nf
NA
people
Figure 22.5: Comparative conjunctions.
(422) Arnold kills more bad guys than Steven.
In a sense, this is actually only simulating the ellipsis of these constructions indirectly. However,
consider the following sentences:
(423) Arnold kills more bad guys than I do.
(424) Arnold kills more bad guys than I.

22.3.
PROPOSITIONAL COMPARATIVES
215
NP r
NP f
NA
NP 1
NA
Nr
Ad
more
Nf
NA
grapes
Conj
and
NP
Ad
fewer
N
NA
ε
PP
P
than
NP
N
avocados
Figure 22.6: Comparative conjunctions.
(425) Arnold kills more bad guys than me.
The ﬁrst of these has a pro-verb phrase which has a nominative subject. If we totally drop the
second verb phrase, we ﬁnd that the second NP can be in either the nominative or the accusative
case. Prescriptive grammars disallow accusative case, but it actually is more common to ﬁnd
accusative case—use of the nominative in conversation tends to sound rather stiﬀand unnatural.
This accords with the present analysis in which the second noun phrase in these comparatives
is the complement of than in βnxPnx, and receives its case-marking from than.
This does
mean that the grammar will not currently accept (424), and indeed such sentences will only
be covered by an analysis which really deals with the ellipsis. Yet the fact that most speakers
produce (425) indicates that some sort of restructuring has occured that results in the kind of
structure the present analysis oﬀers.
There is yet another distributional fact which falls out of this analysis. When comparative
or comparativized adjectives modify a noun phrase, they can stand alone or occur with a than
phrase; furthermore, they are obligatory when a than-phrase is present.
(426) Hobbes is a better teacher.
(427) Hobbes is a better teacher than Bill.
(428) A more exquisite horse launched onto the racetrack.
(429) A more exquisite horse than Black Beauty launched onto the racetrack.

216
CHAPTER 22. COMPARATIVES
(430) *Hobbes is a teacher than Bill.
Comparative adjectives such as better come from the lexicon as compar+. By having trees
such as βAn transmit the compar value of the A node to the root N node, we can signal to
βCnxPnx that it may adjoin when a comparative adjective has adjoined. An example of such
an adjunction is given in Figure 22.7. Of course, if no comparative element is present in the
lower part of the noun phrase, βnxPnx will not be able to adjoin since nouns themselves are
compar-. In order to capture the fact that a comparative element blocks further modiﬁcation
to N, βAn must only adjoin to N nodes which are compar- in their lower feature matrix.
NP r
NP f
NA
Nr
A
better
Nf
NA
teacher
PP
P
than
NP
N
Bill
Figure 22.7: Adjunction of βnxPnx to NP modiﬁed by comparative adjective.
In order to obtain this result for phrases like more exquisite horse, we need to provide a
way for more and less to modify adjectives without a than-clause as we have with βARBaPa.
Actually, we need this ability independently for comparative adjectival phrases, as discussed in
the next section.
22.3.2
Adjectival Comparatives
With nominal comparatives, we saw that a single analysis was amenable to both “pure” com-
paratives and elliptical comparatives. This is not possible for adjectival comparatives, as the
following examples demonstrate:
(431) The dog is less patient.
(432) The dog is less patient than the cat.
(433) The dog is as patient.

22.3.
PROPOSITIONAL COMPARATIVES
217
(434) The dog is as patient as the cat.
(435) The less patient dog waited eagerly for its master.
(436) *The less patient than the cat dog waited eagerly for its master.
The last example shows that comparative adjectival phrases cannot distribute quite as freely
as comparative nominals.
The analysis of elliptical comparative adjectives follows closely to that of comparative nom-
inals. We build them up by ﬁrst adjoining the comparative element to the A node, which then
signals to the AP node, via the compar feature, that it may allow a than-clause to adjoin. The
relevant trees are given in Figure 22.8. βCARBa is anchored by more, less and as, and βaxPnx
is anchored by both than and as.
Ar
Ad◊
Af*
NA
APr
APf*
PP
P◊
NP ↓
(a) βCARBa tree
(b) βaxPnx tree
Figure 22.8: Elliptical adjectival comparative trees
The advantages of this analysis are many. We capture the distribution exhibited in the
examples given in (431) - (436). With βCARBa, comparative elements may modify adjectives
wherever they occur. However, than clauses for adjectives have a more restricted distribution
which coincides nicely with the distribution of AP’s in the XTAG grammar. Thus, by making
them adjoin to AP rather than A, ill-formed sentences like (436) are not allowed.
There are two further advantages to this analysis.
One is that βCARBa interacts with
βnxPnx to produce sequences like more exquisite horse than Black Beauty, a result alluded
to at the end of Section 22.3.1. We achieve this by ensuring that the comparativeness of an
adjective is controlled by a comparative adverb which adjoins to it. A sample derivation is
given in Figure 22.9. The second advantage is that we get sentences such as (437) for free.
(437) Hobbes is better than Bill.
Since better comes from the lexicon as compar+ and this value is passed up to the AP node,
βaxPnx can adjoin as desired, giving us the derivation given in Figure 22.10.
Notice that the root AP node of Figure 22.10 is compar-, so we are basically saying that
strings such as better than Bill are not “comparative.” This accords with our use of the compar

218
CHAPTER 22. COMPARATIVES
NP r
NP f
Nr
Ar
Ad
more
Af
NA
exquisite
Nf
NA
horse
PP
P
than
NP
Nr
A
Black
Nf
NA
Beauty
Figure 22.9: Comparativized adjective triggering βCnxPnx.
feature—a positive value for compar signals that the clause beneath it is to be compared
against something else. In the case of better than Bill, the comparison has been fulﬁlled, so we
do not want it to signal for further comparisons. A nice result which follows is that βaxPnx
cannot adjoin more than once to any given AP spine, and we have no need for the NA constraint
on the tree’s root node. Also, this treatment of the comparativeness of various strings proves
important in getting the coordination of comparative constructions to work properly.
A note needs to be made about the analysis regarding the interaction of the equivalence
comparative construction as ... as and the inequivalence comparative construction more/less
...
than.
In the grammar, more, less, and as all anchor βCARBa, and both than and as
anchor βaxPnx. Without further modiﬁcations, this of course will give us sentences such as the
following:
(438) *?Hobbes is as patient than Bill.
(439) *?Hobbes is more patient as Bill.
Such cases are blocked with the feature equiv: more, less, fewer and than are equiv- while
as (in both adverbial and prepositional uses) is equiv+. The prepositional trees then require
that their P node and the node to which they are adjoining match for equiv.
An interesting phenomena in which comparisons seem to be paired with an inappropriate
as/than-clause is exhibited in (440) and (441).

22.3.
PROPOSITIONAL COMPARATIVES
219
APr
NA
compar : -
APf
NA
wh : <1> -
compar : <2> +
A compar : <2>
wh : <1>
better
PP
P
than
NP
N
Bill
Figure 22.10: Adjunction of βaxPnx to comparative adjective.
(440) Hobbes is as patient or more patient than Bill.
(441) Hobbes is more patient or as patient as Bill.
Though prescriptive grammars disfavor these sentences, these are perfectly acceptable. We can
capture the fact that the as/than-clause shares the equiv value with the latter of the comparison
phrases by passing the equiv value for the second element to the root of the coordination tree.
22.3.3
Adverbial Comparatives
The analysis of adverbial comparatives encouragingly parallels the analysis for nominal and
elliptical adjectival comparatives—with, however, some interesting diﬀerences. Some examples
of adverbial comparatives and their distribution are given in the following:
(442) Albert works more quickly.
(443) Albert works more quickly than Richard.
(444) Albert works more.

220
CHAPTER 22. COMPARATIVES
(445) *Albert more works.
(446) Albert works more than Richard.
(447) Hobbes eats his supper more quickly than Calvin.
(448) Hobbes more quickly eats his supper than Calvin.
(449) *Hobbes more quickly than Calvin eats his supper.
When more is used alone as an adverb, it must also occur after the verb phrase.
Also, it
appears that adverbs modiﬁed by more and less have the same distribution as when they are
not modiﬁed. However, the than portion of an adverbial comparative is restricted to post verb
phrase positions.
The ﬁrst observation can be captured by having more and less select only βvxARB from the
set of adverb trees. Comparativization of adverbs looks very similar to that of other categories,
and we follow this trend by giving the tree in Figure 22.11(a), which parallels the adjectival and
nominal trees, for these instances. This handles the quite free distribution of adverbs which
have been comparativized, while the tree in Figure 22.11(b), βvxPnx, allows the than portion of
an adverbial comparative to occur only after the verb phrase, blocking examples such as (449).
Adr
Ad◊
Adf*
NA
VPr
VPf*
PP
P◊
NP ↓
(a) βCARBarb tree
(b) βvxPnx tree
Figure 22.11: Adverbial comparative trees
The usage of the compar feature parallels that of the adjectives and nominals; however,
trees which adjoin to VP are compar- on their root VP node. In this way, βvxPnx anchored
by than or as (which must adjoin to a compar+ VP) can only adjoin immediately above
a comparative or comparativized adverb. This avoids extra parses in which the comparative
adverb adjoins at a VP node lower than the than-clause.
A ﬁnal note is that as may anchor βvxPnx non-comparatively, as in sentence (450). This
means that there will be two parses for sentences such as (451).

22.4.
FUTURE WORK
221
(450) John works as a carpenter.
(451) John works as quickly as a carpenter.
This appears to be a legitimate ambiguity. One is that John works as quickly as a carpenter
(works quickly), and the other is that John works quickly when he is acting as a carpenter (but
maybe he is slow when he acting as a plumber).
22.4
Future Work
• Interaction with determiner sequencing (e.g., several more men than women but not *every
more men than women).
• Handle sentential complement comparisons (e.g., Bill eats more pasta than Angus drinks
beer).
• Add partitives.
• Deal with constructions like as many and as much.
• Look at so...as construction.

Chapter 23
Punctuation Marks
Many parsers require that punctuation be stripped out of the input. Since punctuation is often
optional, this sometimes has no eﬀect. However, there are a number of constructions which
must obligatorily contain punctuation and adding analyses of these to the grammar without
the punctuation would lead to severe overgeneration. An especially common example is noun
appositives.
Without access to punctuation, one would have to allow every combinatorial
possibility of NPs in noun sequences, which is clearly undesirable (especially since there is
already unavoidable noun-noun compounding ambiguity).
Aside from coverage issues, it is
also preferable to take input “as is” and do as little editing as possible. With the addition
of punctuation to the XTAG grammar, we need only do/assume the conversion of certain
sequences of punctuation into the “British” order (this is discussed in more detail below in
Section 23.2).
The XTAG POS tagger currently tags every punctuation mark as itself. These tags are all
converted to the POS tag Punct before parsing. This allows us to treat the punctuation marks
as a single POS class. They then have features which distinguish amongst them. Wherever
possible we have the punctuation marks as anchors, to facilitate early ﬁltering.
The full set of punctuation marks is separated into three classes: balanced, separating
and terminal. The balanced punctuation marks are quotes and parentheses, separating are
commas, dashes, semi-colons and colons, and terminal are periods, exclamation points and
question marks. Thus, the <punct> feature is complex (like the <agr> feature), yielding
feature equations like <Punct bal = paren> or <Punct term = excl>. Separating and
terminal punctuation marks do not occur adjacent to other members of the same class, but may
occasionally occur adjacent to members of the other class, e.g. a question mark on a clause
which is separated by a dash from a second clause. Balanced punctuation marks are sometimes
adjacent to one another, e.g. quotes immediately inside of parentheses. The <punct> feature
allows us to control these local interactions.
We also need to control non-local interaction of punctuation marks.
Two cases of this
are so-called quote alternation, wherein embedded quotation marks must alternate between
single and double, and the impossibility of embedding an item containing a colon inside of
another item containing a colon.
Thus, we have a fourth value for <punct>, <contains
colon/dquote/etc. +/->, which indicates whether or not a constituent contains a particular
punctuation mark. This feature is percolated through all auxiliary trees. Things which may
not embed are: colons under colons, semi-colons, dashes or commas; semi-colons under semi-
222

23.1.
APPOSITIVES, PARENTHETICALS AND VOCATIVES
223
colon or commas. Although it is rare, parentheses may appear inside of parentheses, say with
a bibliographic reference inside a parenthesized sentence.
23.1
Appositives, parentheticals and vocatives
These trees handle constructions where additional lexical material is only licensed in conjunction
with particular punctuation marks. Since the lexical material is unconstrained (virtually any
noun can occur as an appositive), the punctuation marks are anchors and the other nodes are
substitution sites. There are cases where the lexical material is restricted, as with parenthetical
adverbs like however, and in those cases we have the adverb as the anchor and the punctuation
marks as substitution sites.
When these constructions can appear inside of clauses (non-peripherally), they must be sep-
arated by punctuation marks on both sides. However, when they occur peripherally they have
either a preceding or following punctuation mark. We handle this by having both peripheral
and non-peripheral trees for the relevant constructions. The alternative is to insert the second
(following) punctuation mark in the tokenization process (i.e. insert a comma before the period
when an appositive appears on the last NP of a sentence). However, this is very diﬃcult to do
accurately.
23.1.1
βnxPUnxPU
The symmetric (non-peripheral) tree for NP appositives, anchored by: comma, dash or paren-
theses. It is shown in Figure 23.1 anchored by parentheses.
(452) The music here , Russell Smith’s “Tetrameron ” , sounded good . [Brown:cc09]
(453) ...cost 2 million pounds (3 million dollars)
(454) Sen. David Boren (D., Okla.)...
(455) ...some analysts believe the two recent natural disasters – Hurricane Hugo and the San
Francisco earthquake – will carry economic ramiﬁcations.... [WSJ]
The punctuation marks are the anchors and the appositive NP is substituted. The appositive
can be conjoined, but only with a lexical conjunction (not with a comma). Appositives with
commas or dashes cannot be pronouns, although they may be conjuncts containing pronouns.
When used with parentheses this tree actually presents an alternative rather than an appositive,
so a pronoun is possible. Finally, the appositive position is restricted to having nominative or
accusative case to block PRO from appearing here.
Appositives can be embedded, as in (456), but do not seem to be able to stack on a single
NP. In this they are more like restrictive relatives than appositive relatives, which typically can
stack.
(456) ...noted Simon Briscoe, UK economist for Midland Montagu, a unit of Midland Bank
PLC.

224
CHAPTER 23. PUNCTUATION MARKS
NPr
NPf*
NA
Punct1
(
NPr
D
3
NPf
NA
Nr
N
million
Nf
NA
dollars
Punct2
)
Figure 23.1: The βnxPUnxPU tree, anchored by parentheses
23.1.2
βnPUnxPU
The symmetric (non-peripheral) tree for N-level NP appositives, is anchored by comma. The
modiﬁer is typically an address. It is clear from examples such as (457) that these are attached
at N, rather than NP. Carrier
is not an appositive on Menlo Park, as it would be if these
were simply stacked appositives. Rather, Calif. modiﬁes Menlo Park, and that entire complex
is compounded with carrier, as shown in the correct derivation in Figure 23.2. Because this
distinction is less clear when the modiﬁer is peripheral (e.g. ends the sentence), and it would be
diﬃcult to distinguish between NP and N attachment, we do not currently allow a peripheral
N-level attachment.
(457) An oﬃcial at Consolidated Freightways Inc., a Menlo Park, Calif., less-than-truckload
carrier , said...
(458) Rep. Ronnie Flippo (D., Ala.), of the delegation, says...
23.1.3
βnxPUnx
This tree, which can be anchored by a comma, dash or colon, handles asymmetric (peripheral)
NP appositives and NP colon expansions of NPs. Figure 23.3 shows this tree anchored by a
dash and a colon. Like the symmetric appositive tree, βnxPUnxpu, the asymmetric appositive
cannot be a pronoun, while the colon expansion can. Thus, this constraint comes from the
syntactic entry in both cases rather than being built into the tree.
(459) the bank’s 90% shareholder – Petroliam Nasional Bhd. [Brown]

23.1.
APPOSITIVES, PARENTHETICALS AND VOCATIVES
225
NPr
NPf
NA
N
Consolidated
Punct1
,
NPr
D
a
NPf
NA
Nr
Nr
Nf
NA
Menlo-Park
Punct1
,
NP
N
Calif
Punct2
,
Nf
NA
carrier
Punct2
,
Figure 23.2: An N-level modiﬁer, using the βnPUnx tree
(460) ...said Chris Dillow, senior U.K. economist at Nomura Research Institute .
(461) ...qualities that are seldom found in one work: Scrupulous scholarship, a fund of personal
experience,... [Brown:cc06]
(462) I had eyes for only one person : him .
The colon expansion cannot itself contain a colon, so the foot S has the feature NP.t:<
punctcontainscolon >= −.
23.1.4
βPUpxPUvx
Tree for pre-VP parenthetical PP, anchored by commas or dashes -
(463) John , in a ﬁt of anger , broke the vase
(464) Mary , just within the last year , has totalled two cars
These are clearly not NP modiﬁers.
Figures 23.4 and 23.5 show this tree alone and as part of the parse for (463).

226
CHAPTER 23. PUNCTUATION MARKS
NPr
D
NPr
D
the
NPf
NA
N
bank
G
’s
NPr
NPf
NA
Nr
N
90%
Nf
NA
shareholder
Punct
-
NP
Nr
N
Paetroliam
Nf
NA
N
Naasional
Nf
NA
Bhd
Sr
NPr
D
our
NPf
NA
N
family
VPr
Ad
always
VP
NA
V
HATED
NPr
NPf
NA
N
cats
Punct
:
NP
Nr
A
A1
NA
A1
NA
nasty
Conj
,
A
low
Conj
,
A
vulgar
Nf
NA
things
(a)
(b)
Figure 23.3: The derived trees for an NP with (a) a peripheral, dash-separated appositive and
(b) an NP colon expansion (uttered by the Mouse in Alice’s Adventures in Wonderland)
VPr
Punct1
,
PP↓
Punct2
,
VP*
NA
Figure 23.4: The βPUpxPUvx tree, anchored by commas

23.1.
APPOSITIVES, PARENTHETICALS AND VOCATIVES
227
Sr
NP
N
John
VPr
Punct1
,
PP
P
in
NPr
D
a
NPf
NA
NPf
NA
N
fit
PP
P
of
NP
N
anger
Punct2
,
VP
NA
V
broke
NPr
D
the
NPf
NA
N
vase
Figure 23.5: Tree illustrating the use of βPUpxPUvx
23.1.5
βpuARBpuvx
Parenthetical adverbs - however, though, etc. Since the class of adverbs is highly restricted, this
tree is anchored by the adverb and the punctuation marks substitute. The punctuation marks
may be either commas or dashes. Like the parenthetical PP above, these are clearly not NP
modiﬁers.
(465) The new argument over the notiﬁcation guideline , however , could sour any atmosphere
of cooperation that existed .
[WSJ]
23.1.6
βsPUnx
Sentence ﬁnal vocative, anchored by comma:
(466) You were there , Stanley/my boy .
Also, when anchored by colon, NP expansion on S. These often appear to be extraposed
modiﬁers of some internal NP. The NP must be quite heavy, and is usually a list:
(467) Of the major expansions in 1960, three were ﬁnanced under the R. I. Industrial Building
Authority’s 100% guaranteed mortgage plan: Collyer Wire, Leesona Corporation, and
American Tube & Controls.

228
CHAPTER 23. PUNCTUATION MARKS
A simpliﬁed version of this sentence is shown in ﬁgure 23.6. The NP cannot be a pronoun
in either of these cases. Both vocatives and colon expansions are restricted to appear on tensed
clauses (indicative or imperative).
Sr
S
NA
NPr
D
three
NPf
NA
N
expansions
VPr
V
were
VP
NA
VP
NA
V
financed
PP
P
under
NPr
D
the
NPf
NA
N
plan
Punct
:
NP
NP1
NA
NP1
NA
Nr
N
Collyer
Nf
NA
Wire
Conj
,
NP
Nr
N
Leesona
Nf
NA
Corporation
Conj
and
NP
Nr
N
American
Nf
NA
Controls
Figure 23.6: A tree illustrating the use of sPUnx for a colon expansion attached at S.
23.1.7
βnxPUs
Tree for sentence initial vocatives, anchored by a comma:
(468) Stanley/my boy , you were there .
The noun phrase may be anything but a pronoun, although it is most commonly a proper
noun. The clause adjoined to must be indicative or imperative.
23.2
Bracketing punctuation
23.2.1
Simple bracketing
Trees: βPUsPU, βPUnxPU, βPUnPU, βPUvxPU, βPUvPU, βPUarbPU, βPUaPU, βPUdPU,
βPUpxPU, βPUpPU

23.2.
BRACKETING PUNCTUATION
229
These trees are selected by parentheses and quotes and can adjoin onto any node type, whether
a head or a phrasal constituent. This handles things in parentheses or quotes which are syn-
tactically integrated into the surrounding context. Figure 23.7 shows the βPUsPU anchored by
parentheses, and this tree along with βPUnxPU in a derived tree.
(469) Dick Carroll and his accordion (which we now refer to as “Freida”) held over at Bahia
Cabana where “Sir” Judson Smith brings in his calypso capers Oct. 13 .
[Brown:ca31]
(470) ...noted that the term “teacher-employee” (as opposed to, e.g., “maintenance employee”)
was a not inapt description.
[Brown:ca35]
Sr
Punct1
(
Sf*
NA
Punct2
)
NPr
NPf
NA
D
his
NPf
NA
N
accordion
Sr
Punct1
(
Sf
NA
Comp
which
Sr
NA
NP
N
we
VPr
VP
NA
V
refer
PP1
P
to
NP1
NA
ε
PP
P
as
NPr
Punct1
‘‘
NPf
NA
N
Freida
Punct2
’’
Punct2
)
(a)
(b)
Figure 23.7: βPUsPU anchored by parentheses, and in a derivation, along with βPUnxPU
There is a convention in English that quotes embedded in quotes alternate between single
and double; in American English the outermost are double quotes, while in British English they
are single. The contains feature is used to control this alternation. The trees anchored by
double quotation marks have the feature punct contains dquote = - on the foot node and
the feature punct contains dquote = + on the root. All adjunction trees are transparent to
the contains feature, so if any tree below the double quote is itself enclosed in double quotes
the derivation will fail. Likewise with the trees anchored by single quotes. The quote trees in
eﬀect “toggle” the contains Xquote feature. Immediate proximity is handled by the punct
balanced feature, which allows quotes inside of parentheses, but not vice-versa.

230
CHAPTER 23. PUNCTUATION MARKS
In addition, American English typically places/moves periods (and commas) inside of quo-
tation marks when they would logically occur outside, as in example 471. The comma in the
ﬁrst part of the quote is not part of the quote, but rather part of the parenthetical quoting
clause. However, by convention it is shifted inside the quote, as is the ﬁnal period. British
English does not do this. We assume here that the input has already been tokenized into the
“British” format.
(471) “You can’t do this to us ,” Diane screamed . “We are Americans.”
The βPUsPU can handle quotation marks around multiple sentences, since the sPUs tree
allows us to join two sentences with a period, exclamation point or question mark. Currently,
however, we cannot handle the style where only an open quote appears at the beginning of a
paragraph when the quotation extends over multiple paragraphs. We could allow a lone open
quote to select the βPUs tree, if this is deemed desirable.
Also, the βPUsPU is selected by a pair of commas to handle non-peripheral appositive
relative clauses, such as in example (472). Restrictive and appositive relative clauses are not
syntactically diﬀerentiated in the XTAG grammar (cf. Chapter 14).
(472) This news , announced by Jerome Toobin , the orchestra’s administrative director ,
brought applause ... [Brown:cc09]
The trees discussed in this section will only allow balanced punctuation marks to adjoin to
constituents. We will not get them around non-constituents, as in (473).
(473) Mary asked him to leave (and he left)
23.2.2
βsPUsPU
This tree allows a parenthesized clause to adjoin onto a non-parenthesized clause.
(474) Innumerable motels from Tucson to New York boast swimming pools ( “ swim at your
own risk ” is the hospitable sign poised at the brink of most pools ) .
[Brown:ca17]
23.3
Punctuation trees containing no lexical material
23.3.1
αPU
This is the elementary tree for substitution of punctuation marks. This tree is used in the
quoted speech trees, where including the punctuation mark as an anchor along with the verb
of saying would require a new entry for every tree selecting the relevant tree families. It is also
used in the tree for parenthetical adverbs (βpuARBpuvx), and for S-adjoined PPs and adverbs
(βspuARB and βspuPnx).

23.3.
PUNCTUATION TREES CONTAINING NO LEXICAL MATERIAL
231
23.3.2
βPUs
Anchored by comma: allows comma-separated clause initial adjuncts, (475-476).
(475) Here , as in “Journal” , Mr. Louis has given himself the lion’s share of the dancing...
[Brown:cc09]
(476) Choreographed by Mr. Nagrin, the work ﬁlled the second half of a program
To keep this tree from appearing on root Ss (i.e. , sentence), we have a root constraint that
<punct struct = nil> (similar to the requirement that root Ss be tensed, i.e. <mode = ind/imp>).
The <punct struct> = nil feature on the foot blocks stacking of multiple punctuation marks.
This feature is shown in the tree in Figure 23.8.
Sr
invlink : <1>
inv : <1>
punct :
struct : <2>
displ-const : <3>
agr : <4>
assign-case : <5>
mode : <6>
sub-conj : <7>
extracted : <8>
tense : <9>
assign-comp : <10>
comp : <11>
Punct punct :
struct : <2>
punct :
struct : comma
,
S*
NA
inv : <1>
punct :
struct : nil
displ-const : <3>
agr : <4>
assign-case : <5>
mode : <6>
sub-conj : <7>
extracted : <8>
tense : <9>
assign-comp : <10>
comp : <11>
Figure 23.8: βPUs, with features displayed
This tree can be also used by adjuncts on embedded clauses:

232
CHAPTER 23. PUNCTUATION MARKS
(477) One might expect that in a poetic career of seventy-odd years, some changes in style and
method would have occurred, some development taken place.
[Brown:cj65]
These adjuncts sometimes have commas on both sides of the adjunct, or, like (477), only
have them at the end of the adjunct.
Finally, this tree is also used for peripheral appositive relative clauses.
(478) Interest may remain limited into tomorrow’s U.K. trade ﬁgures, which the market will
be watching closely to see if there is any improvement after disappointing numbers in the
previous two months.
23.3.3
βsPUs
This tree handles clausal “coordination” with comma, dash, colon, semi-colon or any of the
terminal punctuation marks. The ﬁrst clause must be either indicative or imperative. The
second may also be inﬁnitival with the separating punctuation marks, but must be indicative or
imperative with the terminal marks; with a comma, it may only be indicative. The two clauses
need not share the same mode. NB: Allowing the terminal punctuation marks to anchor this
tree allows us to parse sequences of multiple sentences. This is not the usual mode of parsing;
if it were, this sort of sequencing might be better handled by a higher level of processing.
(479) For critics , Hardy has had no poetic periods – one does not speak of early Hardy or late
Hardy , or of the London or Max Gate period....
(480) Then there was exercise , boating and hiking , which was not only good for you but also
made you more virile : the thought of strenuous activity left him exhausted.
This construction is one of the few where two non-bracketing punctuation marks can be
adjacent. It is possible (if rare) for the ﬁrst clause to end with a question mark or exclamation
point, when the two clauses are conjoined with a semi-colon, colon or dash. Features on the
foot node, as shown in Figure 23.9, control this interaction.
Complementizers are not permitted on either conjunct. Subordinating conjunctions some-
times appear on the right conjunct, but seem to be impossible on the left:
(481) Killpath would just have to go out and drag Gun back by the heels once an hour ; because
he’d be damned if he was going to be a mid-watch pencil-pusher . [Brown:cl17]
(482) The best rule of thumb for detecting corked wine (provided the eye has not already
spotted it) is to smell the wet end of the cork after pulling it : if it smells of wine ,
the bottle is probably all right ; if it smells of cork , one has grounds for suspicion.
[Brown:cf27]

23.3.
PUNCTUATION TREES CONTAINING NO LEXICAL MATERIAL
233
Sr
wh : <1>
displ-const : <2>
agr : <3>
assign-case : <4>
mode : <5> ind/imp
tense : <6>
assign-comp : <7>
comp : <8> nil
punct :
contains : <9>
Sf*
NA
mode : <5>
comp : <8>
assign-comp : <7>
tense : <6>
assign-case : <4>
agr : <3>
displ-const : <2>
wh : <1>
sub-conj : nil
punct :
struct : none
term : excl/qmark
contains :
colon : -
Punct punct :
contains : <9>
punct :
contains :
scolon : +
struct : scolon
;
S1↓comp : nil
punct :
struct : none
contains :
colon : -
mode : ind/imp/inf
Figure 23.9: βsPUs, with features displayed
23.3.4
βsPU
This tree handles the sentence ﬁnal punctuation marks when selected by a question mark,
exclamation point or period. One could also require a ﬁnal punctuation mark for all clauses,
but such an approach would not allow non-periods to occur internally, for instance before a semi-
colon or dash as noted above in Section 23.3.3. This tree currently only adjoins to indicative
or imperative (root) clauses.
(483) He left !
(484) Get lost .
(485) Get lost ?
The feature punct bal= nil on the foot node ensures that this tree only adjoins inside
of parentheses or quotes completely enclosing a sentence (486), but does not restrict it from
adjoining to clause which ends with balanced punctuation if only the end of the clause is
contained in the parentheses or quotes (487).

234
CHAPTER 23. PUNCTUATION MARKS
(486) (John then left .)
(487) (John then left) .
(488) Mary asked him to leave (immediately) .
This tree is also selected by the colon to handle a colon expansion after adjunct clause –
(489) Expressed diﬀerently : if the price for becoming a faithful follower...
[Brown:cd02]
(490) Expressing it diﬀerently : if the price for becoming a faithful follower...
(491) To express it diﬀerently : if the price for becoming a faithful follower...
[Brown:cd02]
This tree is only used after adjunct (untensed) clauses, which adjoin to the tensed clause
using the adjunct clause trees (cf Section 15 ); the mode of the complete clause is that of the
matrix rather than the adjunct. Indicative or imperative (i.e. root) clauses separated by a
colon use the βsPUs tree (Section 23.3.3).
23.3.5
βvPU
This tree is anchored by a colon or a dash, and occurs between a verb and its complement.
These typically are lists.
(492) Printed material Available , on request , from U.S. Department of Agriculture , Wash-
ington 25 , D.C. , are : Cooperative Farm Credit Can Assist......
[Brown:ch01]
23.3.6
βpPU
This tree is anchored by a colon or a dash, and occurs between a preposition and its complement.
It typically occurs with a sequence of complements. As with the tree above, this typically occurs
with a conjoined complement.
(493) ...and utilization such as : (A) the protection of forage...
(494) ...can be represented as : Af.
23.4
Other trees
23.4.1
βspuARB
In general, we attach post-clausal modiﬁers at the VP node, as you typically get scope ambiguity
eﬀects with negation (John didn’t leave today – did he leave or not?). However, with post-
sentential, comma-separated adverbs, there is no ambiguity - in John didn’t leave, today he
deﬁnitely did not leave. Since this tree is only selected by a subset of the adverbs (namely,
those which can appear pre-sententially, without a punctuation mark), it is anchored by the
adverb.
(495) The names of some of these products don’t suggest the risk involved in buying them ,
either .
[WSJ]

23.4.
OTHER TREES
235
23.4.2
βspuPnx
Clause-ﬁnal PP separated by a comma. Like the adverbs described above, these diﬀer from VP
adjoined PPs in taking widest scope.
(496) ...gold for current delivery settled at $367.30 an ounce , up 20 cents .
(497) It increases employee commitment to the company , with all that means for eﬃciency
and quality control .
23.4.3
βnxPUa
Anchored by colon or dash, allows for post-modiﬁcation of NPs by adjectives.
(498) Make no mistake , this Gorky Studio drama is a respectable import – aptly grave ,
carefully written , performed and directed .

Part V
Appendices
236


Appendix A
Future Work
A.1
Adjective ordering
At this point, the treatment of adjectives in the XTAG English grammar does not include
selectional or ordering restrictions.1 Consequently, any adjective can adjoin onto any noun and
on top of any other adjective already modifying a noun. All of the modiﬁed noun phrases shown
in (499)-(502) currently parse.
(499) big green bugs
(500) big green ideas
(501) colorless green ideas
(502) ∗green big ideas
While (500)-(502) are all semantically anomalous, (502) also suﬀers from an ordering prob-
lem that makes it seem ungrammatical as well. Since the XTAG grammar focuses on syntactic
constructions, it should accept (499)-(501) but not (502). Both the auxiliary and determiner
ordering systems are structured on the idea that certain types of lexical items (speciﬁed by fea-
tures) can adjoin onto some types of lexical items, but not others. We believe that an analysis
of adjectival ordering would follow the same type of mechanism.
A.2
More work on Determiners
In addition to the analysis described in Chapter 18, there remains work to be done to complete
the analysis of determiner constructions in English.2 Although constructions such as determiner
coordination are easily handled if overgeneration is allowed, blocking sequences such as one and
some while allowing sequences such as ﬁve or ten still remains to be worked out. There are
1This section is a repeat of information found in section 19.1.
2This section is from [Hockey and Mateyak, 1998].
238

A.3. -ING ADJECTIVES
239
still a handful of determiners that are not currently handled by our system. We do not have
an analysis to handle most, such, certain, other and own3. In addition, there is a set of lexical
items that we consider adjectives (enough, less, more and much) that have the property that
they cannot cooccur with determiners. We feel that a complete analysis of determiners should
be able to account for this phenomenon, as well.
A.3
-ing adjectives
An analysis has already been provided for past participal (-ed) adjectives (as in sentence (503)),
which are restricted to the Transitive Verb family.4 A similar analysis needs to take place for
the present participle (-ing) used as a pre-nominal modiﬁer. This type of adjective, however,
does not seem to be as restricted as the -ed adjectives, since verbs in other tree families seem
to exhibit this alternation as well (e.g. sentences (504) and (505)).
(503) The murdered man was a doctoral student at UPenn .
(504) The man died .
(505) The dying man pleaded for his life .
A.4
Verb selectional restrictions
Although we explicitly do not want to model semantics in the XTAG grammar, there is some
work along the syntax/semantics interface that would help reduce syntactic ambiguity and
thus decrease the number of semantically anomalous parses.
In particular, verb selectional
restrictions, particularly for PP arguments and adjuncts, would be quite useful.
With the
exception of the required to in the Ditransitive with PP Shift tree family (Tnx0Vnx1Pnx2),
any preposition is allowed in the tree families that have prepositions as their arguments. In
addition, there are no restrictions as to which prepositions are allowed to adjoin onto a given
verb. The sentences in (506)-(508) are all currently accepted by the XTAG grammar. Their
violations are stronger than would be expected from purely semantic violations, however, and
the presence of verb selectional restrictions on PP’s would keep these sentences from being
accepted.
(506) #survivors walked of the street .
(507) #The man about the earthquake survived .
(508) #The president arranged on a meeting .
3The behavior of own is suﬃciently unlike other determiners that it most likely needs a tree of its own,
adjoining onto the right-hand side of genitive determiners.
4This analysis may need to be extended to the Transitive Verb particle family as well.

240
APPENDIX A. FUTURE WORK
A.5
Thematic Roles
Elementary trees in TAGs capture several notions of locality, with the most primary of these
being locality of θ-role assignment. Each elementary tree has associated with it the θ-roles
assigned by the anchor of that elementary tree. In the current XTAG system, while the notion
of locality of θ-role assignment within an elementary tree has been implicit, the θ-roles assigned
by a head have not been explicitly represented in the elementary tree. Incorporating θ-role
information will make the elementary trees more informative and will enable eﬃcient pruning
of spurious derivations when embedded into a speciﬁc context. In the case of a Synchronous
TAG, θ-roles can also be used to automatically establish links between two elementary trees,
one in the object language and one in the target language.

Appendix B
Metarules
B.1
Introduction
XTAG has now a collection of functions accessible from the user interface that helps the user in
the construction and maintenance of a tag tree-grammar. This subsystem is based on the idea of
metarules ([Becker, 1993]). Here our primary purpose is to describe the facilities implemented
under this metarule-based subsystem. For a discussion of the metarules as a method for compact
representation of the Lexicon see [Becker, 1993] and [Srinivas et al., 1994].
The basic idea of using metarules is to take proﬁt of the similarities of the relations involving
related pairs of XTAG elementary trees. For example, in the English grammar described in
this technical report, comparing the XTAG trees for the basic form and the wh-subject moved
form, the relation between this two trees for transitive verbs (αnx0V nx1, αW0nx0V nx1) is
similar to the relation for the intransitive verbs (αnx0V , αW0nx0V ) and also to the relation for
the ditransitives (αnx0V nx1nx2, αW0nx0V nx1nx2). Hence, instead of generating by hand the
six trees mentioned above, a more natural and robust way would be generating by hand only
the basic trees for the intransitive, transitive and ditransitive cases, and letting the wh-subject
moved trees to be automatically generated by the application of a unique transformation rule
that would account exactly for the identical relation involved in each of the three pairs above.
Notice that the degree of generalization can be much higher than it might be thought in
principle from the above paragraph. For example, once a rule for passivization is applied to the
tree diﬀerent basic trees above, the wh-subject moved rule could be again applied to generate
the wh-moved subject versions for the passive form. Depending on the degree of regularity that
one can ﬁnd in the grammar being built, the reduction in the number of original trees can be
exponential.
We still make here a point that the reduction of eﬀort in grammar construction is not the
only advantage of the approach. Robustness, reliability and maintainability of the grammar
achieved by the use of metarules are equally or even more important.
In the next section we deﬁne a metarule in XTAG. Section 3 gives some linguistically
motivated examples of metarule for the English grammar described in this technical report and
their application. Section 4 describes the access through the user interface.
241

242
APPENDIX B. METARULES
B.2
The deﬁnition of a metarule in XTAG
A metarule speciﬁes a rule for transforming grammar rules into grammar rules. In XTAG the
grammar rules are lexicalized trees. Hence an XTAG metarule mr is a pair (lhs, rhs) of XTAG
trees, where:
• lhs, the left-hand side of the metarule, is a pattern tree, i.e., it is intended to present a
speciﬁc pattern of tree to look for in the trees submitted to the application of the metarule.
• When a metarule mr is applied to an input tree inp, the ﬁrst step is to verify if the input
tree matches the pattern speciﬁed by the lhs. If there is no match, the application fails.
• rhs, the right-hand side of the metarule, speciﬁes (together with lhs) the transformation
that will be done in inp, in case of successful matching, thus generating the output tree
of the metarule application1.
B.2.1
Node names, variable instantiation, and matches
We will use the terms (lhs, rhs and inp) as introduced above to refer to the parts of a generic
metarule being applied to an input tree.
The nodes at lhs can take three diﬀerent forms: a constant node, a typed variable node,
and a non-typed variable node. The naming conventions for these diﬀerent classes of nodes is
given below.
• Constant Node: Its name must not initiate by a question mark (‘?’ character). They
are like we expect for names to be in normal XTAG trees; for instance, inp is expected
to have only constant nodes. Some examples of constant nodes are NP, V , NP0, NP1,
Sr. We will call the two parts that compose such names the stem and the subscript. In
the examples above NP, V and S are stems and 0, 1, r are subscripts. Notice that the
subscript part can also be empty as in two of the above examples.
• Non-Typed Variable Node: Its name initiates by a question mark (‘?’), followed by a
sequence of digits (i.e. a number) which uniquely identiﬁes the variable. Examples: ?1,
?3, ?34522. We assume that there is no stem and no subscript in this names, i.e., ‘?’ is
just a meta-character to introduce a variable, and the number is the variable identiﬁer.
• Typed Variable Node: Its name initiates by a question mark (‘?’)
followed by a
sequence of digits, but is additionally followed by a type speciﬁers deﬁnition.
A type
speciﬁers deﬁnition is a sequence of one or more type speciﬁer separated by a slash (‘/’).
A type speciﬁer has the same form of a regular XTAG node name (like the constant nodes),
except that the subscript can be also a question mark. Examples of typed variables are:
?1V P (a single type speciﬁer with stem V P and no subscript), ?3NP1/PP (two type
speciﬁers, NP1 and PP), ?1NP? (one type speciﬁer, NP? with undetermined subscript).
1actually more than one output tree can be generated from the successful application of a rule to an input
tree, as will be seen soon
2Notice however that having the sole purpose of distinguishing between variables, a number like the one in
the last example is not very likely to occur, and a metarule with more than three thousand variables can give
you a place in the Guinness TagBook of Records.

B.2. THE DEFINITION OF A METARULE IN XTAG
243
We’ll see ahead that each type speciﬁer represents an alternative for matching, and the
presence of ‘?’ in subscript position of a type speciﬁer means that matching will only
check for the stem 3.
During the process of matching, variables are associated (we use the term instantiated) with
‘tree material’. According to its class a variable can be instantiated with diﬀerent kinds of tree
material:
• A typed variable will be instantiated with exactly one node of the input tree, which is in
accordance to one of its type speciﬁers (The full rule is in the following subsection).
• A non-typed variable will be instantiated with a range of subtrees. These subtrees will
be taken from one of the nodes of the input tree inp. Hence, there will a node n in inp,
with subtrees n.t1, n.t2, ..., n.tk, in this order, where the variable will be instantiated with
some subsequence of these subtrees (e.g., n.t2, n.t3, n.t4). Note however, that some of
these subtrees, may be incomplete, i.e., they may not go all the way to the bottom leaves.
Entire subtrees may be removed. Actually for each child of the non-typed variable node,
one subtree that matches this child subtree will be removed from some of the n.ti(maybe
an entire n.ti), leaving in place a mark for inserting material during the substitution of
occurences at rhs.
Notice still that the variable can be instantiated with a single tree and even with no tree.
We deﬁne a match to be a complete instantiation of all variables appearing in the metarule.
In the process of matching, there may be several possible ways of instantiating the set of
variables of the metarule, i.e., several possible matches. This is due to the presence of non-
typed variables.
Now, we are ready to deﬁne what we mean by a successful matching.
The process of
matching is successful if the number of possible matches is greater then 0. When there is no
possible match the process is said to fail. In addition to return success or failure, the process
also return the set of all possible matches, which will be used for generating the output.
B.2.2
Structural Matching
The process of matching lhs and inp can be seen as a recursive procedure for matching trees,
starting at their roots and proceeding in a top-down style along with their subtrees. In the
explanation of this process that follows we have used the term lhs not only to refer to the
whole tree that contains the pattern but to any of its subtrees that is being considered in a
given recursive step. The same applies to inp. By now we ignore feature equations, which will
be accounted for in the next subsection.
The process described below returns at the end the set of matches (where an empty set
means the same as failure). We ﬁrst give one auxiliary deﬁnition, of valid Mapping, and one
recursive function Match, that matches lists of trees instead of trees, and then deﬁne the process
of matching two trees as a special case of call to Match.
3This is diﬀerent from not having a subscript which is interpreted as checking that the input tree have no
subscript for matching

244
APPENDIX B. METARULES
Given a list listlhs = [lhs1, lhs2, ..., lhsl] of nodes of lhs and a list listinp = [inp1, inp2, ..., inpi]
of nodes of inp, we deﬁne a mapping from listlhs to listinp to be a function Mapping, that for
each element of listlhs assigns a list of elements of listinp, deﬁned by the following condition:
concatenation (Mapping(lhs1), Mapping(lhs2), ..., Mapping(lhsl)) = listinp
, i.e., the elements of listinp are split into sublists and assigned in order of appearance in the
list to the elements of listlhs.
We say that a mapping is a valid mapping if for all j, 1 ≤j ≤l (where l is the length of
listlhs), the following restrictions apply:
1. if lhsj is a constant node, then Mapping(lhsj) must have a single element, say, rhsg(j),
and the two nodes must have the same name and agree on the markers (foot, substitution,
head and NA), i.e., if lhsj is NA, then rhsg(j) must be NA, if lhsj has no markers, then
rhsg(j) must have no markers, etc.
2. if lhsj is a type variable node, then Mapping(lhsj) must have a single element, say,
rhsg(j), and rhsg(j) must be marker-compatible and type-compatible with lhsj.
rhsg(j) is marker-compatible with lhsj if any marker (foot, substitution, head and NA)
present in lhsj is also present in rhsg(j)4.
rhsg(j) is type-compatible with lhsj if there is at least one of the alternative type speciﬁers
for the typed variable that satisﬁes the conditions below.
• rhsg(j) has the stem deﬁned in the type speciﬁer.
• if the type speciﬁer doesn’t have subscript, then rhsg(j) must have no subscript.
• if the type speciﬁer has a subscript diﬀerent of ‘?’, then rhsg(j) must have the same
subscript as in the type speciﬁer 5.
3. if lhsj is a non-typed variable node, then there’s actually no requirement: Mapping(lhsj)
may have any length and even be empty.
The following algorithm, Match, takes as input a list of nodes of lhs and a list of nodes of
inp, and returns the set of possible matches generated in the attempt of match this two lists.
If the result is an empty set, this means that the matching failed.
Function Match (listlhs, listrhs)
Let MAPPINGS be the list of all valid mappings from listlhs to listrhs
Make MATCHES = ∅
For each mapping Mapping ∈MAPPINGS do:
Make Matches = {∅}
For each j, 1 ≤j ≤l, where l = length(listlhs), do:
if lhsj is a constant node, then
4Notice that, unlike the case for the constant node, the inverse is not required, i.e., if lhsj has no marker,
rhsg(j) is still allowed to have some.
5If the type speciﬁer has a ‘?’ subscript, there is no restriction, and that is exactly its function: to allow for
the matching to be independent of the subscript

B.2. THE DEFINITION OF A METARULE IN XTAG
245
let
childrenlhs be the list of children of lhsj
lhrg(j) be the single element in Mapping(lhsj)
childrenrhs be the list of children of lhrg(j)
Make Matches = {m ∪mj | m ∈Matches
and mj ∈Match(childrenlhs, childrenrhs)}
if lhsj is a typed variable node, then
let
childrenlhs be the list of children of lhsj
lhrg(j) be the single element in Mapping(lhsj)
childrenrhs be the list of children of lhrg(j)
Make Matches = {{(lhsj, lhrg(j))} ∪m ∪mj | m ∈Matches
and mj ∈Match(childrenlhs, childrenrhs)}
if lhsj is a non-typed variable node, then
let
childrenlhs be the list of children of lhsj
sl be the number of nodes in childrenlhs
DESCs be the set of s-size lists given by:
DESCs = {[dr1, dr2, ..., drs] |
for every 1 ≤k ≤s, drk is a descendant
of some node in Mapping(lhsj)}6
for every 1 < k ≤s, drl is to the right of drk−17.
For every list Desc = [dr1, dr2, ..., drs] ∈DESCs do:
Let Tree-Material be the list of subtrees dominated
by the nodes in Mapping(lhsj), but, with the
subtrees dominated by the nodes in DESCs
cut out from these trees
Make Matches = {{(lhsj, Tree −Struct)} ∪m ∪mj |
m ∈Matches and mj ∈Match(childrenlhs, Desc)}
Make MATCHES = MATCHES ∪Matches
Return MATCHES
Finally we can deﬁne the process of structurally matching lhs to inp as the evaluation of
Match([root(lhs)], [root(inp)]. If the result is an empty set, the matching failed, otherwise the
resulting set is the set of possible matches that will be used for generating the new trees (after
being pruned by the feature equation matching).
B.2.3
Output Generation
Although nothing has yet been said about the feature equations, which is the subject of the
next subsection, we assume that only matches that meet the additional constraints imposed by
feature equations are considered for output. If no structural match survives feature equations
checking, that matching has failed.
If the process of matching lhs to inp fails, there are two alternative behaviors according to
the value of a parameter8. If the parameter is set to false, which is the default value, no output
is generated. On the other hand, if it is set to true, then the own inp tree is copied to the
output.
8the parameter is accessible at the Lisp interface by the name XTAG::*metarules-copy-unmatched-trees*

246
APPENDIX B. METARULES
If the process of matching succeeds, as many trees will be generated in the output as the
number of possible matches obtained in the process. For a given match, the output tree is
generated by substituting in the rhs tree of the metarule the occurrences of variables by the
material to which they have been instantiated in the match. The case of the typed-variable
is simple. The name of the variable is just substituted by the name of the node to which it
has been instantiated from inp. A very important detail is that the marker (foot, substitution,
head, NA, or none) at the output tree node comes from what is speciﬁed in the rhs node, which
can be diﬀerent of the marker at the variable node in inp and of the associated node from inp.
The case of the non-typed variable, not surpringly, is not so simple. In the output tree, this
node will be substituted by the subtree list that was associated to this node, in the same other,
attaching to the parent of this non-typed variable node. But remember, that some subtrees may
have been removed from some of the trees in this list, maybe entire elements of this list, due
to the eﬀect of the children of the metavariable in lhs. It is a requirement that any occurence
of a non-typed variable node at the rhs tree has exactly the same number of children than the
unique occurence of this non-typed variable node in lhs. Hence, when generating the output
tree, the subtrees at rhs will be inserted exactly at the points where subtrees were removed
during matching, in a positional, one to one correspondance.
For feature equations in the output trees see the next subsection. The comments at the
output are the comments at the lhs tree of the metarule followed by the coments at inp, both
parts introduced by appropriate headers, allowing the user to have a complete history of each
tree.
B.2.4
Feature Matching
In the previous subsections we have considered only the aspects of a metarule involving the
structural part of the XTAG trees. In a feature based grammar as XTAG is, accounting for
features is essential. A metarule is not really worth if it doesn’t account for the proper change
of feature equations9 from the input to the output tree. The aspects that have to be considered
here are:
• Which feature equations should be required to be present in inp in order for the match
to succeed.
• Which feature equations should be generated in the output tree as a function of the feature
equations in the input tree.
Based on the possible combinations of these requirements we partition the feature equations
into the following ﬁve classes10:
• Require & Retain: Feature equations in this class are required to be in inp in order for
matching to succeed. Upon matching, these equations will be copied to the output tree.
9Notice that what is really important is not the features themselves, but the feature equations that relate the
feature values of nodes of the same tree
10This classiﬁcation is really a partition, i.e., no equation may be conceptually in more than one class at the
same time.

B.3. EXAMPLES
247
To achieve this behaviour, the equation must be placed in the lhs tree of the metarule
preceded by a plus character (e.g. +V.t :< trans >= +)11
• Require & Don’t Copy: The equation is required to be in inp for matching, but should
not be copied to the output tree. Those equations must be in lhs preceded by minus
character (e.g. −NP1 :< case >= acc).
• Optional & Don’t Copy: The equation is not required for matching, but we have to make
sure not to copy it to the output tree set of equations, regardless of it being present or
not in inp. Those equations must be in lhs in raw form, i.e. neither preceded by a plus
nor minus character (e.g. Sr.b :< perfect >= V P.t :< perfect >).
• Optional & Retain: The equation is not required for matching but, in case it is found
in inp it must be copied to the output tree. This is the default case, and hence these
equations should not be present in the metarule speciﬁcation.
• Add: The equation is not required for matching but we want it to be put in the output
tree anyway. These equations are placed in raw form in the rhs (notice in this case it is
the right hand side).
Typed variables can be used in feature equations in both lhs and rhs. They are intended to
represent the nodes of the input tree to which they have been instantiated. For each resulting
match from the structural matching process the following is done:
• The (typed) variables in the equations at lhs and rhs are substituted by the names of
the nodes they have been instantiated to.
• The requirements concerning feature equations are checked, according to the above rules.
• If the match survives feature equation checking, the proper output tree is generated,
according to Section B.2.3 and to the rules described above for the feature equations.
Finally, a new kind of metavariable, which is not used at the nodes, can be introduced in
the feature equations part. They have the same form of the non-typed variables, i.e. quotation
mark, followed by a number, and are used in the place of feature values and feature names.
Hence, if the equation ?NP?.b :<?2 >=?3 appears in lhs, this means, that all feature equations
of inp that match a bottom attribute of some NP to any feature value (but not to a feature
path) will not be copied to the output.
B.3
Examples
Figure B.1 shows a metarule for wh-movement of the subject. Among the trees to which it have
been applied are the basic trees of intransitive, transitive and ditransitive families (including
prepositional complements), passive trees of the same families, and ergative.
11Commutativity of equations is accounted for in the system. Hence an equation x = y can also be speciﬁed
as y = x. Associativity is not accounted for and its need by an user is viewed as indicating misspeciﬁcation at
the input trees.

248
APPENDIX B. METARULES
lhs
rhs
Figure B.1: Metarule for wh-movement of subject
Figure B.2 shows a metarule for wh-movement of an NP in object position. Among the
trees to which it have been applied are the basic and passive trees of transitive and ditransitive
families.
lhs
rhs
Figure B.2: Metarule for wh-movement of object
Figure B.3 shows a metarule for general wh-movement of an NP. It can be applied to
generate trees with either subject or object NP moved. We show in Figure B.4, the basic tree
for the family Tnx0Vnx1Pnx2 and the tree wh-trees generated by the application of the rule.
B.4
The Access to the Metarules through the XTAG Interface
We ﬁrst describe the access to the metarules subsystem using buﬀers with single metarule
applications. Then we proceed by describing the application of multiple metarules in what we
call the parallel, sequential, and cumulative modes to input tree ﬁles.
We have deﬁned conceptually a metarule as an ordered pair of trees. In the implementation
of the metarule subsystem it works the same: a metarule is a buﬀer with two trees. The name
of the metarule is the name of the buﬀer. The ﬁrst tree that appear in the main window under

B.4. THE ACCESS TO THE METARULES THROUGH THE XTAG INTERFACE
249
lhs
rhs
Figure B.3: Metarule for general wh movement of an NP
Tnx0Vnx1Pnx2
subject moved
NP object moved
NP object moved from PP
Figure B.4: Application of wh-movement rule to Tnx0Vnx1Pnx2
the metarule buﬀer is the left hand side, the next appearing below is the right hand side12. The
positional approach allows us to have naming freedom: the tree names are irrelevant13. Since
12Although a buﬀer is intended to implement the concept of a set (not a sequence) of trees we take proﬁt of
the actual organization of the system to realize the concept of (ordered) tree pair in the implementation.
13so that even if we want to have mnemonic names resembling their distinct character - left or right hand side,

250
APPENDIX B. METARULES
we can save buﬀers into text ﬁles, we can talk also about metarule ﬁles.
The available options for applying a metarule which is in a buﬀer are:
• For applying it to a single input tree, click in the name of the tree in the main window,
and choose the option apply metarule to tree.
You will be prompted for the name of
the metarule to apply to the tree which should be, as we mentioned before, the name of
the buﬀer that contains the metarule trees. The output trees will be generated at the
end of the buﬀer that contains the input tree. The names of the trees depend of a LISP
parameter *metarules-change-name* . If the value of the parameter is false — the default
value — then the new trees will have the same name as the input, otherwise, the name of
the input tree followed by a dash (‘-’) and the name of the right hand side of the tree14.
The value of the parameter can be changed by choosing Tools at the menu bar and then
either name mr output trees = input or append rhs name to mr output trees.
• For applying it to all the trees of a buﬀer, click in the name of the buﬀer that contains
the trees and proceed as above. The output will be a new buﬀer with all the output trees.
The name of the new buﬀer will be the same as the input buﬀer preﬁxed by ”MR-”. The
names of the trees follow the conventions above.
The other options concern application to ﬁles (instead of buﬀers).
Lets ﬁrst deﬁne the
concepts of parallel, sequential and cumulative application of metarules. One metarule ﬁle can
contain more than one metarule. The ﬁrst two trees, i.e., the ﬁrst tree pair, form one metarule
- lets call it mr0. Subsequent pairs in the sequence of trees deﬁne additional metarules — mr1,
mr2, ..., mrn.
• We say that a metarule ﬁle is applied in parallel to a tree (see Figure B.5) if each of the
metarules is applied independently to the input generating its particular output trees15.
We generalize the concept to the application in parallel of a metarule ﬁle to a tree ﬁle
(with possibly more than one tree), generating all the trees as if each metarule in the
metarule ﬁle was applied to each tree in the input ﬁle.
MR0
Input
Trees
MR1
MRn
Output
Trees
Figure B.5: Parallel application of metarules
- we have some naming ﬂexibility to call them e.g. lhs23 or lhs-passive, ...
14the reason why we do not use the name of the metarule, i.e. the name of the buﬀer, is because in some forms
of application the metarules do not carry individual names, as we’ll see soon is the case when a set of metarules
from a ﬁle is applied.
15remember a metarule application generates as many output trees as the number of matches

B.4. THE ACCESS TO THE METARULES THROUGH THE XTAG INTERFACE
251
• We say that a metarule ﬁle mr0, mr1, mr2, ..., mrn is applied in sequence to a input tree
ﬁle (see Figure B.6) if we apply mr0 to the trees of the input ﬁle, and for each 0 < i ≤n
apply metarule mri to the trees generated as a result of the application of mri−1.
Output
Trees
MR1
MRn
MR0
Input
Trees
Figure B.6: Sequential application of metarules
• Finally, the cumulative application is similar to the sequential, except that the input trees
at each stage are by-passed to the output together with the newly generated ones (see
Figure B.7).
Output
Trees
MR0
MR1
MRn
Input
Trees
Figure B.7: Cumulative application of metarules
Remember that in case of matching failure the output result is decided as explained in
subsection
B.2.3 either to be empty or to be the input tree. The reﬂex here of having the
parameter set for copying the input is that for the parallel application the output will have as
many copies of the input as matching failures. For the sequential case the decision apply at
each level, and setting the parameter for copying, in a certain sense, guarantees for the ’pipe’
not to break. Due to its nature and unlike the two other modes, the cumulative application is
not aﬀected by this parameter.
The options for application of metarules to ﬁles are available by clicking at the menu item
Tools and then choosing the appropriate function among:
• Apply metarule to ﬁles: You’ll be prompted for the metarule ﬁle name which should
contain one metarule16, and for input ﬁle names. Each input ﬁle name inpﬁle will be
independently submitted to the application of the metarule generating an output ﬁle with
the name MR-inpﬁle.
• Apply metarules in parallel to ﬁles: You’ll be prompted for the metarules ﬁle name with
one or more metarules and for input ﬁle names. Each input ﬁle name inpﬁle will be
independently submitted to the application of the metarules in parallel. For each parallel
application to a ﬁle inpﬁle an output ﬁle with the name MRP-inpﬁle will be generated.
• Apply metarules in sequence to ﬁles: The interaction is as described for the application in
parallel, except that the application of the metarules are in sequence and that the output
ﬁles are preﬁxed by MRS- instead of MRP-.
16if it contains more than 2 trees, the additional trees are ignored

252
APPENDIX B. METARULES
• Apply metarules cumulatively to ﬁles: The interaction is as described for the applications
in parallel and in sequence, except that the mode of application is cumulative and that
the output ﬁles are preﬁxed by MRC-.
Finally still under the Tools menu we can change the setting of the parameter that controls
the output result on matching failure (see Subsection B.2.3) by choosing either copy input on
mr matching failure or no output on mr matching failure.

Appendix C
Lexical Organization
C.1
Introduction
An important characteristic of an FB-LTAG is that it is lexicalized, i.e., each lexical item is
anchored to a tree structure that encodes subcategorization information. Trees with the same
canonical subcategorizations are grouped into tree families. The reuse of tree substructures,
such as wh-movement, in many diﬀerent trees creates redundancy, which poses a problem for
grammar development and maintenance [Vijay-Shanker and Schabes, 1992]. To consistently
implement a change in some general aspect of the design of the grammar, all the relevant
trees currently must be inspected and edited. Vijay Shanker and Schabes suggested the use of
hierarchical organization and of tree descriptions to specify substructures that would be present
in several elementary trees of a grammar. Since then, in addition to ourselves, Becker, [Becker,
1994], Evans et al. [Evans et al., 1995], and Candito[Candito, 1996] have developed systems for
organizing trees of a TAG which could be used for developing and maintaining grammars.
Our system is based on the ideas expressed in Vijay-Shanker and Schabes, [Vijay-Shanker
and Schabes, 1992], to use partial-tree descriptions in specifying a grammar by separately
deﬁning pieces of tree structures to encode independent syntactic principles. Various individual
speciﬁcations are then combined to form the elementary trees of the grammar. The chapter
begins with a description of our grammar development system, and its implementation. We
will then show the main results of using this tool to generate the Penn English grammar as
well as a Chinese TAG. We describe the signiﬁcant properties of both grammars, pointing out
the major diﬀerences between them, and the methods by which our system is informed about
these language-speciﬁc properties. The chapter ends with the conclusion and future work.
C.2
System Overview
In our approach, three types of components – subcategorization frames, blocks and lexical
redistribution rules – are used to describe lexical and syntactic information.
Actual trees
are generated automatically from these abstract descriptions, as shown in Figure C.1.
In
maintaining the grammar only the abstract descriptions need ever be manipulated; the tree
descriptions and the actual trees which they subsume are computed deterministically from
these high-level descriptions.
253

254
APPENDIX C. LEXICAL ORGANIZATION
Subcategorization
    frames
Transformation
blocks
Subcategorization
blocks
Lexical redistribution
rules(LRRs)
 Our System 
Sets of Trees
Figure C.1: Lexical Organization: System Overview
C.2.1
Subcategorization frames
Subcategorization frames specify the category of the main anchor, the number of arguments,
each argument’s category and position with respect to the anchor, and other information such
as feature equations or node expansions. Each tree family has one canonical subcategorization
frame.
C.2.2
Blocks
Blocks are used to represent the tree substructures that are reused in diﬀerent trees, i.e. blocks
subsume classes of trees. Each block includes a set of nodes, dominance relation, parent relation,
precedence relation between nodes, and feature equations. This follows the deﬁnition of the tree
descriptions speciﬁed in a logical language patterned after Rogers and Vijay-Shanker[Rogers and
Vijay-Shankar, 1994].
Blocks are divided into two types according to their functions: subcategorization blocks
and transformation blocks. The former describes structural conﬁgurations incorporating the
various information in a subcategorization frame. For example, some of the subcategorization
blocks used in the development of the English grammar are shown in Figure C.2.1
When the subcategorization frame for a verb is given by the grammar developer, the system
will automatically create a new block (of code) by essentially selecting the appropriate primi-
tive subcategorization blocks corresponding to the argument information speciﬁed in that verb
frame.
The transformation blocks are used for various transformations such as wh-movement.
These transformation blocks do not encode rules for modifying trees, but rather describe the
properties of a particular syntactic construction.
Figure C.3 depicts our representation of
phrasal extraction. This can be specialized to give the blocks for wh-movement, topicaliza-
tion, relative clause formation, etc. For example, the wh-movement block is deﬁned by further
1 In order to focus on the use of tree descriptions and to make the ﬁgures less cumbersome, we show only
the structural aspects and do not show the feature value speciﬁcation. The parent, (immediate dominance),
relationship is illustrated by a plain line and the dominance relationship by a dotted line. The arc between nodes
shows the precedence order of the nodes are unspeciﬁed. The nodes’ categories are enclosed in parentheses.

C.2. SYSTEM OVERVIEW
255
specifying that the ExtractionRoot is labeled S, the NewSite has a +wh feature, and so on.
Root
Pred
PredP
(a) is_main_frame
VP(’VP’)
Verb(’V’)
Root
Subject       
(b)pred_has_subject
VP
Subject(’NP’)
(c) subject_is_NP
PredP
Pred
Object
(e)pred_has_object
(f)object_is_NP
Object(’NP’)
V, Pred
(d)  main_pred_is_V
VP,PredP
Figure C.2: Some subcategorization blocks
Root(’S’)
NewSite
ε
(c) relative clause
(b) wh-movement
Root(’S’)
NewSite
ε
ε
Root(’S’)
NewSite
  SB(’S’)
COMP(’COMP’)
ε
NPf(’NP’)
NPr(’NP’)
ExtNode
ExtRoot
ExtNode 
ExtRoot(’S’)
ExtRoot(’S’)
ExtNode
(a) extraction
Figure C.3: Transformation blocks for extraction

256
APPENDIX C. LEXICAL ORGANIZATION
C.2.3
Lexical Redistribution Rules (LRRs)
The third type of machinery available for a grammar developer is the Lexical Redistribution
Rule (LRR). An LRR is a pair (rl, rr) of subcategorization frames, which produces a new frame
when applied to a subcategorization frame s, by ﬁrst matching2 the left frame rl of r to s, then
combining information in rr and s. LRRs are introduced to incorporate the connection between
subcategorization frames. For example, most transitive verbs have a frame for active(a subject
and an object) and another frame for passive, where the object in the former frame becomes
the subject in the latter. An LRR, denoted as passive LRR, is built to produce the passive
subcategorization frame from the active one. Similarly, applying dative-shift LRR to the frame
with one NP subject and two NP objects will produce a frame with an NP subject and an PP
object.
Besides the distinct content, LRRs and blocks also diﬀer in several aspects:
• They have diﬀerent functionalities: Blocks represent the substructures that are reused in
diﬀerent trees. They are used to reduce the redundancy among trees; LRRs are introduced
to incorporate the connections between the closely related subcategorization frames.
• Blocks are strictly additive and can be added in any order. LRRs, on the other hand,
produce diﬀerent results depending on the order they are applied in, and are allowed to
be non-additive, i.e., to remove information from the subcategorization frame they are
being applied to, as in the procedure of passive from active.
to
to
to
Sq
S
1
VP
NP
NP
V
(a)
(b) 
(c)
2
2
2
 PP
NP
P
ε
Sq
S
 0
VP
1
ε
2
2
2
NP
NP
V
NP
 PP
NP
P
Sq
S
 0
VP
1
2
2
2
NP
NP
V
NP
 PP
NP
P
ε
Figure C.4: Elementary trees generated from combining blocks
C.2.4
Tree generation
To generate elementary trees, we begin with a canonical subcategorization frame. The system
will ﬁrst generate related subcategorization frames by applying LRRs, then select subcate-
gorization blocks corresponding to the information in the subcategorization frames, next the
combinations of these blocks are further combined with the blocks corresponding to various
2Matching occurs successfully when frame s is compatible with rl in the type of anchors, the number of
arguments, their positions, categories and features. In other words, incompatible features etc. will block certain
LRRs from being applied.

C.3. IMPLEMENTATION
257
transformations, ﬁnally, a set of trees are generated from those combined blocks, and they are
the tree family for this subcategorization frame. Figure C.4 shows some of the trees produced
in this way. For instance, the last tree is obtained by incorporating information from the di-
transitive verb subcategorization frame, applying the dative-shift and passive LRRs, and then
combining them with the wh-non-subject extraction block. Besides, in our system the hierarchy
for subcategorization frames is implicit as shown in Figure C.5.
.
.
.
.
Transitive(buy)
Ditrans. with NP
(ask)
Intransitive(walk)
(force sb to do sth)
Ditrans. with S
(put)
Ditrans. with PP
object_is_AP
main_anchor_is_verb
object_is_NP
subject_is_NP
(take a walk)
Trans. light verb
(kick the bucket)
Trans. idioms
Intrans. particle(add up)
Intrans. with adj
(feel happy)
Trans. particle(pick up)
Figure C.5: Partial inheritance lattice in English
C.3
Implementation
The input of our system is the description of the language, which includes the subcategorization
frame list, LRR list, subcategorization block list and transformation lists. The output is a list
of trees generated automatically by the system, as shown in Figure C.6. The tree generation
module is written in Prolog, and the rest part is in C. We also have a graphic interface to input
the language description. Figure C.7 and C.8 are two snapshots of the interface.
C.4
Generating grammars
We have used our tool to specify a grammar for English in order to produce the trees used in
the current English XTAG grammar. We have also used our tool to generate a large grammar
for Chinese. In designing these grammars, we have tried to specify the grammars to reﬂect the
similarities and the diﬀerences between the languages. The major features of our speciﬁcation
of these two grammars3 are summarized in Table C.1 and C.2.
3Both grammars are still under development, so the contents of these two tables might change a lot in the
future according to the analyses we choose for certain phenomenon.
For example, the majority of work on
Chinese grammar treat ba-construction as some kind of object-fronting where the character ba is either an object
marker or a preposition. According to this analysis, an LRR rule for ba-construction is used in our grammar
to generate the preverbal-object frame from the postverbal frame. However, there has been some argument for
treating ba as a verb. If we later choose that analysis, the main verbs in the patterns “NP0 VP” and “NP0 ba
NP1 VP” will be diﬀerent, therefore no LRR will be needed for it. As a result, the numbers of LRRs, subcat
frames and tree generated will change accordingly.

258
APPENDIX C. LEXICAL ORGANIZATION
LRR list
subcat frame list
subcat block list
trans block list
Select
blocks
subcat
LRRs
generation
subcat blocks
subsets of 
subcat blocks and
trans. blocks
trees generated
elementary trees
for the language
Language description
Lexorg system
Apply
Tree
combinations of
derived frames
subsets of
Combine
w/ trans
blocks
Figure C.6: Implementation of the system
Figure C.7: Interface for creating a grammar
By focusing on the speciﬁcation of individual grammatical information, we have been able
to generate nearly all of the trees from the tree families used in the current English grammar

C.4. GENERATING GRAMMARS
259
Figure C.8: Part of the Interface for creating blocks
English
Chinese
examples
passive
bei-construction
of LRRs
dative-shift
object fronting
ergative
ba-construction
examples
wh-question
topicalization
of transformation
relativization
relativization
blocks
declarative
argument-drop
# LRRs
6
12
# subcat blocks
34
24
# trans blocks
8
15
# subcat frames
43
23
# trees generated
638
280
Table C.1: Major features of English and Chinese grammars
developed at Penn4. Our approach, has also exposed certain gaps in the Penn grammar. We
are encouraged with the utility of our tool and the ease with which this large-scale grammar
was developed.
We are currently working on expanding the contents of subcategorization frame to include
trees for other categories of words. For example, a frame which has no speciﬁer and one NP
complement and whose predicate is a preposition will correspond to PP →P NP tree. We’ll
also introduce a modiﬁer ﬁeld and semantic features, so that the head features will propagate
4We have not yet attempted to extend our coverage to include punctuation, it-clefts, and a few idiosyncratic
analyses.

260
APPENDIX C. LEXICAL ORGANIZATION
both grammars
English
Chinese
causative
long passive
VO-inversion
LRRs
short passive
ergative
ba-const
dative-shift
topicalization
trans blocks
relativization
gerund
argument-drop
declarative
NP/S subject
zero-subject
subcat blocks
S/NP/PP object
PL object
preverbal object
V predicate
prep predicate
Table C.2: Comparison of the two grammars
from modiﬁee to modiﬁed node, while non-head features from the predicate as the head of the
modiﬁer will be passed to the modiﬁed node.
C.5
Summary
We have described a tool for grammar development in which tree descriptions are used to pro-
vide an abstract speciﬁcation of the linguistic phenomena relevant to a particular language.
In grammar development and maintenance, only the abstract speciﬁcations need to be edited,
and any changes or corrections will automatically be proliferated throughout the grammar. In
addition to lightening the more tedious aspects of grammar maintenance, this approach also
allows a unique perspective on the general characteristics of a language. Deﬁning hierarchical
blocks for the grammar both necessitates and facilitates an examination of the linguistic as-
sumptions that have been made with regard to feature speciﬁcation and tree-family deﬁnition.
This can be very useful for gaining an overview of the theory that is being implemented and
exposing gaps that remain unmotivated and need to be investigated. The type of gaps that
can be exposed could include a missing subcategorization frame that might arise from the au-
tomatic combination of blocks and which would correspond to an entire tree family, a missing
tree which would represent a particular type of transformation for a subcategorization frame,
or inconsistent feature equations. By focusing on syntactic properties at a higher level, our
approach allows new opportunities for the investigation of how languages relate to themselves
and to each other.

Appendix D
Tree Naming conventions
The various trees within the XTAG grammar are named more or less according to the following
tree naming conventions. Although these naming conventions are generally followed, there are
occasional trees that do not strictly follow these conventions.
D.1
Tree Families
Tree families are named according to the basic declarative tree structure in the tree family (see
section D.2), but with a T as the ﬁrst character instead of an α or β.
D.2
Trees within tree families
Each tree begins with either an α (alpha) or a β (beta) symbol, indicating whether it is an
initial or auxiliary tree, respectively. Following an α or a β the name may additionally contain
one of:
I
imperative
E
ergative
N0,1,2
relative clause{position}
G
NP gerund
D
Determiner gerund
pW0,1,2
wh-PP extraction{position}
W0,1,2
wh-NP extraction{position}
X
ECM (eXceptional case marking)
Numbers are assigned according to the position of the argument in the declarative tree, as
follows:
0
subject position
1
ﬁrst argument (e.g. direct object)
2
second argument (e.g. indirect object)
The body of the name consists of a string of the following components, which corresponds to
the leaves of the tree. The anchor(s) of the trees is(are) indicated by capitalizing the part of
speech corresponding to the anchor.
261

262
APPENDIX D. TREE NAMING CONVENTIONS
s
sentence
a
adjective
arb
adverb
be
be
c
relative complementizer
x
phrasal category
d
determiner
v
verb
lv
light verb
conj
conjunction
comp
complementizer
it
it
n
noun
p
preposition
to
to
pl
particle
by
by
neg
negation
As an example, the transitive declarative tree consists of a subject NP, followed by a verb (which
is the anchor), followed by the object NP. This translates into αnx0Vnx1. If the subject NP
had been extracted, then the tree would be αW0nx0Vnx1. A passive tree with the by phrase in
the same tree family would be αnx1Vbynx0. Note that even though the object NP has moved
to the subject position, it retains the object encoding (nx1).
D.3
Assorted Initial Trees
Trees that are not part of the tree families are generally gathered into several ﬁles for conve-
nience. The various initial trees are located in lex.trees. All the trees in this ﬁle should begin
with an α, indicating that they are initial trees. This is followed by the root category which
follows the naming conventions in the previous section (e.g. n for noun, x for phrasal category).
The root category is in all capital letters. After the root category, the node leaves are named,
beginning from the left, with the anchor of the tree also being capitalized. As an example, the
αNXN tree is rooted by an NP node (NX) and anchored by a noun (N).
D.4
Assorted Auxiliary Trees
The auxiliary trees are mostly located in the buﬀers prepositions.trees, conjunctions.trees,
determiners.trees, advs-adjs.trees, and modifiers.trees, although a couple of other ﬁles
also contain auxiliary trees. The auxiliary trees follow a slightly diﬀerent naming convention
from the initial trees. Since the root and foot nodes must be the same for the auxiliary trees,
the root nodes are not explicitly mentioned in the names of auxiliary trees.
The trees are
named according to the leaf nodes, starting from the left, and capitalizing the anchor node. All
auxiliary trees begin with a β, of course. For example, βARBs, indicates a tree anchored by

D.4. ASSORTED AUXILIARY TREES
263
an adverb (ARB), that adjoins onto the left of an S node (Note that S must be the foot node,
and therefore also the root node).
D.4.1
Relative Clause Trees
For relative clause trees, the following naming conventions have been adopted: if the wh-
moved NP is overt, it is not explicitly represented. Instead the index of the site of movement
(0 for subject, 1 for object, 2 for indirect object) is appended to the N. So βN0nx0Vnx1
is a subject extraction relative clause with NPw substitution and βN1nx0Vnx1 is an object
extraction relative clause. If the wh-moved NP is covert and Comp substitutes in, the Comp
node is represented by c in the tree name and the index of the extraction site follows c. Thus
βNc0nx0Vnx1 is a subject extraction relative clause with Comp substitution. Adjunct trees
are similar, except that since the extracted material is not co-indexed to a trace, no index
is speciﬁed (cf. βNpxnx0Vnx1, which is an adjunct relative clause with PP pied-piping, and
βNcnx0Vnx1, which is an adjunct relative clause with Comp substitution).
Cases of pied-
piping, in which the pied-piped material is part of the anchor have the anchor capitalized or
spelled-out (cf. βNbynx0nx1Vbynx0 which is a relative clause with by-phrase pied-piping and
NPw substitution.).

Appendix E
Features
Table E.1 contains a comprehensive list of the features in the XTAG grammar and their possible
values.
This section consists of short ‘biographical’ sketches of the various features currently in use
in the XTAG English grammar.
E.1
Agreement
⟨agr⟩is a complex feature. It can have as its subfeatures:
⟨agr 3rdsing⟩, possible values: +/−
⟨agr num⟩, possible values: plur, sing
⟨agr pers⟩, possible values: 1, 2, 3
⟨agr gen⟩, possible values: masc, fem, neut
These features are used to ensure agreement between a verb and its subject.
Where does it occur:
Nouns comes speciﬁed from the lexicon with their ⟨agr⟩features. e.g. books is ⟨agr 3rdsing⟩: –,
⟨agr num⟩: plur, and ⟨agr pers⟩: 3. Only pronouns use the <gen> (gender) feature.
The ⟨agr⟩features of a noun are transmitted up the NP tree by the following equation:
NP.b:⟨agr⟩= N.t:⟨agr⟩
Agreement between a verb and its subject is mediated by the following feature equations:
(509) NPsubj:⟨agr⟩= VP.t:⟨agr⟩
(510) VP.b:⟨agr⟩= V.t:⟨agr⟩
Agreement has to be done as a two step process because whether the verb agrees with the
subject or not depends upon whether some auxiliary verb adjoins in and upon what the ⟨agr⟩
speciﬁcation of the verb is.
Verbs also come speciﬁed from the lexicon with their ⟨agr⟩features, e.g. the ⟨agr⟩features
of the verb sings are ⟨agr 3rdsing⟩: +, ⟨agr num⟩: sing, and ⟨agr pers⟩: 3; Non-ﬁnite forms
of the verb sing e.g. singing do not come with an ⟨agr⟩feature speciﬁcation.
264

E.1. AGREEMENT
265
Feature
Value
<agr 3rdsing>
+, −
<agr num>
plur,sing
<agr pers>
1,2,3
<agr gen>
fem,masc,neuter
<assign-case>
nom,acc,none
<assign-comp>
that,whether,if,for,ecm,rel,inf nil,ind nil,ppart nil,none
<card>
+, −
<case>
nom,acc,gen,none
<comp>
that,whether,if,for,rel,inf nil,ind nil,nil
<compar>
+, −
<compl>
+, −
<conditional>
+, −
<conj>
and,or,but,comma,scolon,to,disc,nil
<const>
+, −
<contr>
+, −
<control>
no value, indexing only
<decreas>
+, −
<deﬁnite>
+, −
<displ-const>
+, −
<equiv>
+, −
<extracted>
+, −
<gen>
+, −
<gerund>
+, −
<inv>
+, −
<invlink>
no value, indexing only
<irrealis>
+, −
<mainv>
+, −
<mode>
base,ger,ind,inf,imp,nom,ppart,prep,sbjunt
<neg>
+, −
<passive>
+, −
<perfect>
+, −
<pred>
+, −
<progressive>
+, −
<pron>
+, −
<punct bal>
dquote,squote,paren,nil
<punct contains colon>
+, −
<punct contains dash>
+, −
<punct contains dquote>
+, −
<punct contains scolon>
+, −
<punct contains squote>
+, −
<punct struct>
comma,dash,colon,scolon,nil
<punct term>
per,qmark,excl,nil
<quan>
+, −
<reﬂ>
+, −
<rel-clause>
+, −
<rel-pron>
ppart,ger,adj-clause
<select-mode>
ind,inf,ppart,ger
<super>
+, −
<tense>
pres,past
<trace>
no value, indexing only
<trans>
+, −
<weak>
+, −
<wh>
+, −
Table E.1: List of features and their possible values

266
APPENDIX E. FEATURES
E.1.1
Agreement and Movement
The ⟨agr⟩features of a moved NP and its trace are co-indexed. This captures the fact that
movement does not disrupt a pre-existing agreement relationship between an NP and a verb.
(511)
[Which boys]i does John think [ti are/*is intelligent]?
E.2
Case
There are two features responsible for case-assignment:
⟨case⟩, possible values: nom, acc, gen, none
⟨assign-case⟩, possible values: nom, acc, none
Case assigners (prepositions and verbs) as well as the VP, S and PP nodes that dominate
them have an ⟨assign-case⟩case feature. Phrases and lexical items that have case i.e. Ns and
NPs have a ⟨case⟩feature.
Case assignment by prepositions involves the following equations:
(512) PP.b:⟨assign-case⟩= P.t:⟨case⟩
(513) NP.t:⟨case⟩= P.t:⟨case⟩
Prepositions come speciﬁed from the lexicon with their ⟨assign-case⟩feature.
(514) P.b:⟨assign-case⟩= acc
Case assignment by verbs has two parts: assignment of case to the object(s) and assignment
of case to the subject. Assignment of case to the object is simpler. English verbs always assign
accusative case to their NP objects (direct or indirect). Hence this is built into the tree and
not put into the lexical entry of each individual verb.
(515) NPobject.t:⟨case⟩= acc
Assignment of case to the subject involves the following two equations.
(516) NPsubj:⟨case⟩= VP.t:⟨assign-case⟩
(517) VP.b:⟨assign-case⟩= V.t:⟨assign-case⟩
This is a two step process – the ﬁnal case assigned to the subject depends upon the ⟨assign-
case⟩feature of the verb as well as whether an auxiliary verb adjoins in.
Finite verbs like sings have nom as the value of their ⟨assign-case⟩feature. Non-ﬁnite
verbs have none as the value of their ⟨assign-case⟩feature. So if no auxiliary adjoins in, the
only subject they can have is PRO which is the only NP with none as the value its ⟨case⟩
feature.

E.3. EXTRACTION AND INVERSION
267
E.2.1
ECM
Certain verbs e.g. want, believe, consider etc. and one complementizer for are able to assign
case to the subject of their complement clause.
The complementizer for, like the preposition for, has the ⟨assign-case⟩feature of its com-
plement set to acc. Since the ⟨assign-case⟩feature of the root Sr of the complement tree and
the ⟨case⟩feature of its NP subject are co-indexed, this leads to the subject being assigned
accusative case.
ECM verbs have the ⟨assign-case⟩feature of their foot S node set to acc. The co-indexation
between the ⟨assign-case⟩feature of the root Sr and the ⟨case⟩feature of the NP subject leads
to the subject being assigned accusative case.
E.2.2
Agreement and Case
The ⟨case⟩features of a moved NP and its trace are co-indexed. This captures the fact that
movement does not disrupt a pre-existing relationship of case-assignment between a verb and
an NP.
(518) Heri/*Shei, I think that Odo like ti.
E.3
Extraction and Inversion
⟨extracted⟩, possible vales are +/−
All sentential trees with extracted components, with the exception of relative clauses are
marked S.b⟨extracted⟩= + at their top S node. The extracted element may be a wh-NP or
a topicalized NP. The ⟨extracted⟩feature is currently used to block embedded topicalizations
as exempliﬁed by the following example.
(519) * John wants [Billi [PRO to leave ti]]
⟨trace⟩: this feature is not assigned any value and is used to co-index moved NPs and their
traces which are marked by ǫ.
⟨wh⟩: possible values are +/−
NPs like who, what etc.
come marked from the lexicon with a value of + for the feature
⟨wh⟩. Non wh-NPs have −as the value of their ⟨wh⟩feature. Note that ⟨wh⟩= +
NPs
are not restricted to occurring in extracted positions, to allow for the correct treatment of echo
questions.
The ⟨wh⟩feature is propagated up by possessives – e.g. the + ⟨wh⟩feature of the determiner
which in which boy is propagated up to the level of the NP so that the value of the ⟨wh⟩feature
of the entire NP is +⟨wh⟩.
This process is recursive e.g.
which boy’s mother, which boy’s
mother’s sister.
The ⟨wh⟩feature is also propagated up PPs. Thus the PP to whom has + as the value of
its ⟨wh⟩feature.
In trees with extracted NPs, the ⟨wh⟩feature of the root node S node is equated with the
⟨wh⟩feature of the extracted NPs.
The ⟨wh⟩feature is used to impose subcategorizational constraints.
Certain verbs like
wonder can only take interrogative complements, other verbs such as know can take both

268
APPENDIX E. FEATURES
interrogative and non-interrogative complements, and yet other verbs like think can only take
non-interrogative complements (cf. the ⟨extracted⟩and ⟨mode⟩features also play a role in
imposing subcategorizational constraints).
The ⟨wh⟩feature is also used to get the correct inversion patterns.
E.3.1
Inversion, Part 1
The following three features are used to ensure the correct pattern of inversion:
⟨wh⟩: possible values are +/−
⟨inv⟩: possible values are +/−
⟨invlink⟩: possible values are +/−
Facts to be captured:
1. No inversion with topicalization
2. No inversion with matrix extracted subject wh-questions
3. Inversion with matrix extracted object wh-questions
4. Inversion with all matrix wh-questions involving extraction from an embedded clause
5. No inversion in embedded questions
6. No matrix subject topicalizations.
Consider a tree with object extraction, where NP is extracted. The following feature equa-
tions are used:
(520) Sq.b:⟨wh⟩= NP.t:⟨wh⟩
(521) Sq.b:⟨invlink⟩= Sq.b:⟨inv⟩
(522) Sq.b:⟨inv⟩= Sr.t:⟨inv⟩
(523) Sr.b:⟨inv⟩= −
Root restriction: A restriction is imposed on the ﬁnal root node of any XTAG derivation of
a tensed sentence which equates the ⟨wh⟩feature and the ⟨invlink⟩feature of the ﬁnal root
node.
If the extracted NP is not a wh-word i.e. its ⟨wh⟩feature has the value −, at the end of
the derivation, Sq.b:⟨wh⟩will also have the value −. Because of the root constraint Sq.b:⟨wh⟩
will be equated to Sq.b:⟨invlink⟩which will also come to have the value −. Then, by (522),
Sr.t:⟨inv⟩will acquire the value −. This will unify with Sr.b:⟨inv⟩which has the value −(cf.
523). Consequently, no auxiliary verb adjunction will be forced. Hence, there will never be
inversion in topicalization.
If the extracted NP is a wh-word i.e. its ⟨wh⟩feature has the value +, at the end of the
derivation, Sq.b:⟨wh⟩will also have the value +. Because of the root constraint Sq.b:⟨wh⟩
will be equated to Sq.b:⟨invlink⟩which will also come to have the value +. Then, by (522),
Sr.t:⟨inv⟩will acquire the value +. This will not unify with Sr.b:⟨inv⟩which has the value
+ (cf. 523). Consequently, the adjunction of an inverted auxiliary verb is required for the
derivation to succeed.
Inversion will still take place even if the extraction is from an embedded clause.

E.4. CLAUSE TYPE
269
(524) Whoi does Loida think [Miguel likes ti]
This is because the adjoined tree’s root node will also have its Sr.b:⟨inv⟩set to −.
Note that inversion is only forced upon us because Sq is the ﬁnal root node and the Root
restriction applies. In embedded environments, the root restriction would not apply and the
feature clash that forces adjunction would not take place.
The ⟨invlink⟩feature is not present in subject extractions. Consequently there is no inver-
sion in subject questions.
Subject topicalizations are blocked by setting the ⟨wh⟩feature of the extracted NP to +
i.e. only wh-phrases can go in this location.
E.3.2
Inversion, Part 2
⟨displ-const⟩:
Possible values: [set1: +], [set1: –]
In the previous section, we saw how inversion is triggered using the ⟨invlink⟩, ⟨inv⟩, ⟨wh⟩
features.
Inversion involves movement of the verb from V to C. This movement process is
represented using the ⟨displ-const⟩feature which is used to simulate Multi-Component TAGs.1
The sub-value set1 indicates the inversion multi-component set; while there are not currently
any other uses of this mechanism, it could be expanded with other sets receiving diﬀerent set
values.
The ⟨displ-const⟩feature is used to ensure adjunction of two trees, which in this case
are the auxiliary tree corresponding to the moved verb (S adjunct) and the auxiliary tree
corresponding to the trace of the moved verb (VP adjunct). The following equations are used:
(525) Sr.b:⟨displ-const set1⟩= −
(526) S.t:⟨displ-const set1⟩= +
(527) VP.b:⟨displ-const set1⟩= V.t:⟨displ-const set1⟩
(528) V.b:⟨displ-const set1⟩= +
(529) Sr.b:⟨displ-const set1⟩= VP.t:⟨displ-const set1⟩
E.4
Clause Type
There are several features that mark clause type.2 They are:
⟨mode⟩
⟨passive⟩: possible values are +/–
1The ⟨displ-const⟩feature is also used in the ECM analysis.
2We have already seen one instance of a feature that marks clause-type: ⟨extracted⟩, which marks whether
a certain S involves extraction or not.

270
APPENDIX E. FEATURES
⟨mode⟩: possible values are base, ger, ind, inf, imp, nom, ppart, prep, sbjnct
The ⟨mode⟩feature of a verb in its root form is base. The ⟨mode⟩feature of a verb in its
past participial form is ppart, the ⟨mode⟩feature of a verb in its progressive/gerundive form
is ger, the ⟨mode⟩feature of a tensed verb is ind, and the ⟨mode⟩feature of a verb in the
imperative is imp.
nom is the ⟨mode⟩value of AP/NP predicative trees headed by a null copula. prep is the
⟨mode⟩value of PP predicative trees headed by a null copula.
Only the copula auxiliary
tree, some sentential complement verbs (such as consider and raising verb auxiliary trees have
nom/prep as the ⟨mode⟩feature speciﬁcation of their foot node. This allow them, and only
them, to adjoin onto AP/NP/PP predicative trees with null copulas.
E.4.1
Auxiliary Selection
The ⟨mode⟩feature is also used to state the subcategorizational constraints between an aux-
iliary verb and its complement. We model the following constraints:
have takes past participial complements
passive be takes past participial complements
active be takes progressive complements
modal verbs, do, and to take VPs headed by verbs in their base form as their complements.
An auxiliary verb transmits its own mode to its root and imposes its subcategorizational
restrictions on its complement i.e. on its foot node. e.g. the auxiliary have in its inﬁnitival
form involves the following equations:
(530) VPr.b:⟨mode⟩= V.t:⟨mode⟩
(531) V.t:⟨mode⟩= base
(532) VP.b:⟨mode⟩= ppart
⟨passive⟩: This feature is used to ensure that passives only have be as their auxiliary. Passive
trees start out with their ⟨passive⟩feature as +. This feature starts out at the level of the
verb and is percolated up to the level of the VP. This ensures that only auxiliary verbs whose
foot node has + as their ⟨passive⟩feature can adjoin on a passive. Passive trees have ppart
as the value of their ⟨mode⟩feature. So the only auxiliary trees that we really have to worry
about blocking are trees whose foot nodes have ppart as the value of their ⟨mode⟩feature.
There are two such trees – the be tree and the have tree. The be tree is ﬁne because its foot
node has + as its ⟨passive⟩feature, so both the ⟨passive⟩and ⟨mode⟩values unify; the have
tree is blocked because its foot node has – as its ⟨passive⟩feature.
E.5
Relative Clauses
Features that are peculiar to the relative clause system are:
⟨select-mode⟩, possible values are ind, inf, ppart, ger

E.5. RELATIVE CLAUSES
271
⟨rel-pron⟩, possible values are ppart, ger, adj-clause
⟨rel-clause⟩, possible values are +/–
⟨select-mode⟩:
Comps are lexically speciﬁed for ⟨select-mode⟩. In addition, the ⟨select-mode⟩feature of a
Comp is equated to the ⟨mode⟩feature of its sister S node by the following equation:
(533) Comp.t:⟨select-mode⟩= St.t:⟨mode⟩
The lexical speciﬁcations of the Comps are shown below:
• ǫC, Comp.t:⟨select-mode⟩=ind/inf/ger/ppart
• that, Comp.t:⟨select-mode⟩=ind
• for, Comp.t:⟨select-mode⟩=inf
⟨rel-pron⟩:
There are additional constraints on where the null Comp ǫC can occur. The null Comp is not
permitted in cases of subject extraction unless there is an intervening clause or or the relative
clause is a reduced relative (mode = ppart/ger).
To model this paradigm, the feature ⟨rel-pron⟩is used in conjunction with the following
equations.
(534) Sr.t:⟨rel-pron⟩= Comp.t:⟨rel-pron⟩
(535) Sr.b:⟨rel-pron⟩= Sr.b:⟨mode⟩
(536) Comp.b:⟨rel-pron⟩=ppart/ger/adj-clause (for ǫC)
The full set of the equations above is only present in Comp substitution trees involving
subject extraction. So the following will not be ruled out.
(537) the toy [ǫi [ǫC [ Dafna likes ti ]]]
The feature mismatch induced by the above equations is not remedied by adjunction of just
any S-adjunct because all other S-adjuncts are transparent to the ⟨rel-pron⟩feature because
of the following equation:
(538) Sm.b:⟨rel-pron⟩= Sf.t:⟨rel-pron⟩
⟨rel-clause⟩:
The XTAG analysis forces the adjunction of the determiner below the relative clause. This is
done by using the ⟨rel-clause⟩feature. The relevant equations are:
(539) On the root of the RC: NPr.b:⟨rel-clause⟩= +
(540) On the foot node of the Determiner tree: NPf.t:⟨rel-clause⟩= −

272
APPENDIX E. FEATURES
E.6
Complementizer Selection
The following features are used to ensure the appropriate distribution of complementizers:
⟨comp⟩, possible values: that, if, whether, for, rel, inf nil, ind nil, nil
⟨assign-comp⟩, possible values: that, if, whether, for, ecm, rel, ind nil, inf nil, none
⟨mode⟩, possible values: ind, inf, sbjnct, ger, base, ppart, nom, prep
⟨wh⟩, possible values: +, –
The value of the ⟨comp⟩feature tells us what complementizer we are dealing with. The trees
which introduce complementizers come speciﬁed from the lexicon with their ⟨comp⟩feature
and ⟨assign-comp⟩feature. The ⟨comp⟩of the Comp tree regulates what kind of tree goes
above the Comp tree, while the ⟨assign-comp⟩feature regulates what kind of tree goes below.
e.g. the following equations are used for that:
(541) Sc.b:⟨comp⟩= Comp.t:⟨comp⟩
(542) Sc.b:⟨wh⟩= Comp.t:⟨wh⟩
(543) Sc.b:⟨mode⟩= ind/sbjnct
(544) Sr.t:⟨assign-comp⟩= Comp.t:⟨comp⟩
(545) Sr.b:⟨comp⟩= nil
By specifying Sr.b:⟨comp⟩= nil, we ensure that complementizers do not adjoin onto other
complementizers. The root node of a complementizer tree always has its ⟨comp⟩feature set to
a value other than nil.
Trees that take clausal complements specify with the ⟨comp⟩feature on their foot node
what kind of complementizer(s) they can take. The ⟨assign-comp⟩feature of an S node is
determined by the highest VP below the S node and the syntactic conﬁguration the S node is
in.
E.6.1
Verbs with object sentential complements
Finite sentential complements:
(546) S1.t:⟨comp⟩= that/whether/if/nil
(547) S1.t:⟨mode⟩= ind/sbjnct or S1.t:⟨mode⟩= ind
(548) S1.t:⟨assign-comp⟩= ind nil/inf nil
The presence of an overt complementizer is optional.
Non-ﬁnite sentential complements, do not permit for:

E.6. COMPLEMENTIZER SELECTION
273
(549) S1.t:⟨comp⟩= nil
(550) S1.t:⟨mode⟩= inf
(551) S1.t:⟨assign-comp⟩= ind nil/inf nil
Non-ﬁnite sentential complements, permit for:
(552) S1.t:⟨comp⟩= for/nil
(553) S1.t:⟨mode⟩= inf
(554) S1.t:⟨assign-comp⟩= ind nil/inf nil
Cases like ‘*I want for to win’ are independently ruled out due to a case feature clash
between the acc assigned by for and the intrinsic case feature none on the PRO.
Non-ﬁnite sentential complements, ECM:
(555) S1.t:⟨comp⟩= nil
(556) S1.t:⟨mode⟩= inf
(557) S1.t:⟨assign-comp⟩= ecm
E.6.2
Verbs with sentential subjects
The following contrast involving complementizers surfaces with sentential subjects:
(558) *(That) John is crazy is likely.
Indicative sentential subjects obligatorily have complementizers while inﬁnitival sentential
subjects may or may not have a complementizer. Also if is possible as the complementizer of
an object clause but not as the complementizer of a sentential subject.
(559) S0.t:⟨comp⟩= that/whether/for/nil
(560) S0.t:⟨mode⟩= inf/ind
(561) S0.t:⟨assign-comp⟩= inf nil
If the sentential subject is ﬁnite and a complementizer does not adjoin in, the ⟨assign-
comp⟩feature of the S0 node of the embedding clause and the root node of the embedded
clause will fail to unify.
If a complementizer adjoins in, there will be no feature-mismatch
because the root of the complementizer tree is not speciﬁed for the ⟨assign-comp⟩feature.
The ⟨comp⟩feature nil is split into two ⟨assign-comp⟩features ind nil and inf nil to
capture the fact that there are certain conﬁgurations in which it is acceptable for an inﬁnitival
clause to lack a complementizer but not acceptable for an indicative clause to lack a comple-
mentizer.

274
APPENDIX E. FEATURES
E.6.3
That-trace and for-trace eﬀects
(562) Whoi do you think (*that) ti ate the apple?
That trace violations are blocked by the presence of the following equation:
(563) Sr.b:⟨assign-comp⟩= inf nil/ind nil/ecm
on the bottom of the Sr nodes of trees with extracted subjects (W0). The ind nil feature
speciﬁcation permits the above example while the inf nil/ecm feature speciﬁcation allows the
following examples to be derived:
(564) Whoi do you want [ ti to win the World Cup]?
(565) Whoi do you consider [ ti intelligent]?
The feature equation that ruled out the that-trace ﬁlter violations will also serve to rule out
the for-trace violations above.
E.7
Determiner ordering
⟨card⟩, possible values are +, –
⟨compl⟩, possible values are +, –
⟨const⟩, possible values are +, –
⟨decreas⟩, possible values are +, –
⟨deﬁnite⟩, possible values are +, –
⟨gen⟩, possible values are +, –
⟨quan⟩, possible values are +, –
For detailed discussion see Chapter 18.
E.8
Punctuation
⟨punct⟩is a complex feature. It has the following as its subfeatures:
⟨punct bal⟩, possible values are dquote, squote, paren, nil
⟨punct contains colon⟩, possible values are +, –
⟨punct contains dash⟩, possible values are +, –
⟨punct contains dquote⟩, possible values are +, –
⟨punct contains scolon⟩, possible values are +, –
⟨punct contains squote⟩, possible values are +, –
⟨punct struct⟩, possible values are comma, dash, colon, scolon, none, nil
⟨punct term⟩, possible values are per, qmark, excl, none, nil
For detailed discussion see Chapter 23.

E.9. CONJUNCTION
275
E.9
Conjunction
⟨conj⟩, possible values are but, and, or, comma, scolon, to, disc, nil
The ⟨conj⟩feature is speciﬁed in the lexicon for each conjunction and is passed up to the root
node of the conjunction tree. If the conjunction is and, the root ⟨agr num⟩is ⟨plural⟩, no
matter what the number of the two conjuncts. With or, the the root ⟨agr num⟩is equated to
the ⟨agr num⟩feature of the right conjunct.
The ⟨conj⟩=disc feature is only used at the root of the βCONJs tree.
It blocks the
adjunction of one βCONJs tree on another. The following equations are used, where Sr is
the substitution node and Sc is the root node:
(566) Sr.t:⟨conj⟩= disc
(567) Sc.b:⟨conj⟩= and/or/but/nil
E.10
Comparatives
⟨compar⟩, possible values are +, –
⟨equiv⟩, possible values are +, –
⟨super⟩, possible values are +, –
For detailed discussion see Chapter 22.
E.11
Control
⟨control⟩has no value and is used only for indexing purposes. The root node of every clausal
tree has its ⟨control⟩feature coindexed with the control feature of its subject. This allows
adjunct control to take place. In addition, clauses that take inﬁnitival clausal complements
have the control feature of their subject/object coindexed with the control feature of their
complement clause S, depending upon whether they are subject control verbs or object control
verbs respectively.
E.12
Other Features
⟨neg⟩, possible values are +, –
Used for controlling the interaction of negation and auxiliary verbs.
⟨pred⟩, possible values are +, –
The ⟨pred⟩feature is used in the following tree families: Tnx0N1.trees and Tnx0nx1ARB.trees.
In the Tnx0N1.trees family, the following equations are used:
for αW1nx0N1:
(568) NP1.t:⟨pred⟩= +
(569) NP1.b:⟨pred⟩= +

276
APPENDIX E. FEATURES
(570) NP.t:⟨pred⟩= +
(571) N.t:⟨pred⟩= NP.b:⟨pred⟩
This is the only tree in this tree family to use the ⟨pred⟩feature.
The other tree family where the ⟨pred⟩feature is used is Tnx0nx1ARB.trees. Within this
family, this feature (and the following equations) are used only in the αW1nx0nx1ARB tree.
(572) AdvP1.t:⟨pred⟩= +
(573) AdvP1.b:⟨pred⟩= +
(574) NP.t:⟨pred⟩= +
(575) AdvP.b:⟨pred⟩= NP.t:⟨pred⟩
⟨pron⟩, possible values are +, –
This feature indicates whether a particular NP is a pronoun or not. Certain constructions which
do not permit pronouns use this feature to block pronouns.
⟨tense⟩, possible values are pres, past
It does not seem to be the case that the ⟨tense⟩feature interacts with other features/syntactic
processes. It comes from the lexicon with the verb and is transmitted up the tree in such a
way that the root S node ends up with the tense feature of the highest verb in the tree. The
equations used for this purpose are:
(576) Sr.b:⟨tense⟩= VP.t:⟨tense⟩
(577) VP.b:⟨tense⟩= V.t:⟨tense⟩
⟨trans⟩, possible values are +, –
Many but not all English verbs can anchor both transitive and intransitive trees.
(578) The sun melted the ice cream.
(579) The ice cream melted.
(580) Elmo borrowed a book.
(581) * A book borrowed.
Transitive trees have the ⟨trans⟩feature of their anchor set to
+ and intransitive trees
have the ⟨trans⟩feature of their anchor set to
–.
Verbs such as melt which can occur in
both transitive and intransitive trees come unspeciﬁed for the ⟨trans⟩feature from the lexicon.
Verbs which can only occur in transitive trees e.g. borrow have their ⟨trans⟩feature speciﬁed
in the lexicon as + thus blocking their anchoring of an intransitive tree.

Appendix F
Evaluation and Results
In this appendix we describe various evaluations done of the XTAG grammar. Some of these
evaluations were done on an earlier version of the XTAG grammar (the 1995 release), while
other were done more recently. We will try to indicate in each section which version was used.
F.1
Parsing Corpora
In the XTAG project, we have used corpus analysis in two main ways: (1) to measure the
performance of the English grammar on a given genre and (2) to identify gaps in the grammar.
The second type of evaluation involves performing detailed error analysis on the sentences
rejected by the parser, and we have done this several times on WSJ and Brown data.
Based on the results of such analysis, we prioritize upcoming grammar development eﬀorts.
The results of a recent error analysis are shown in Table F.1. The table does not show errors
in parsing due to mistakes made by the POS tagger which contributed the largest number of
errors: 32. At this point, we have added a treatment of punctuation to handle #1, an analysis of
time NPs (#2), a large number of multi-word prepositions (part of #3), gapless relative clauses
(#7), bare inﬁnitives (#14) and have added the missing subcategorization (#3) and missing
lexical entry (#12). We are in the process of extending the parser to handle VP coordination
(#9) (See Section 21 on recent work to handle VP and other predicative coordination). We
ﬁnd that this method of error analysis is very useful in focusing grammar development in a
productive direction.
To ensure that we are not losing coverage of certain phenomena as we extend the gram-
mar, we have a benchmark set of grammatical and ungrammatical sentences from this technical
report. We parse these sentences periodically to ensure that in adding new features and con-
structions to the grammar, we are not blocking previous analyses. There are approximately
590 example sentences in this set.
F.2
TSNLP
In addition to corpus-based evaluation, we have also run the English Grammar on the Test
Suites for Natural Language Processing (TSNLP) English corpus [Lehmann et al., 1996]. The
corpus is intended to be a systematic collection of English grammatical phenomena, including
277

278
APPENDIX F. EVALUATION AND RESULTS
Rank
No of errors
Category of error
#1
11
Parentheticals and appositives
#2
8
Time NP
#3
8
Missing subcat
#4
7
Multi-word construction
#5
6
Ellipsis
#6
6
Not sentences
#7
3
Relative clause with no gap
#8
2
Funny coordination
#9
2
VP coordination
#10
2
Inverted predication
#11
2
Who knows
#12
1
Missing entry
#13
1
Comparative?
#14
1
Bare inﬁnitive
Table F.1: Results of Corpus Based Error Analysis
complementation, agreement, modiﬁcation, diathesis, modality, tense and aspect, sentence and
clause types, coordination, and negation. It contains 1409 grammatical sentences and phrases
and 3036 ungrammatical ones.
Error Class
%
Example
POS Tag
19.7%
She adds to/V it , He noises/N him abroad
Missing lex item
43.3%
used as an auxiliary V, calm NP down
Missing tree
21.2%
should’ve, bet NP NP S, regard NP as Adj
Feature clashes
3%
My every ﬁrm, All money
Rest
12.8%
approx, e.g.
Table F.2: Breakdown of TSNLP Errors
There were 42 examples which we judged ungrammatical, and removed from the test corpus.
These were sentences with conjoined subject pronouns, where one or both were accusative,
e.g.
Her and him succeed.
Overall, we parsed 61.4% of the 1367 remaining sentences and
phrases. The errors were of various types, broken down in Table F.2. As with the error analysis
described above, we used this information to help direct our grammar development eﬀorts. It
also highlighted the fact that our grammar is heavily slanted toward American English—our
grammar did not handle dare or need as auxiliary verbs, and there were a number of very British
particle constructions, e.g. She misses him out.
One general problem with the test-suite is that it uses a very restricted lexicon, and if
there is one problematic lexical item it is likely to appear a large number of times and cause a
disproportionate amount of grief. Used to appears 33 times and we got all 33 wrong. However,
it must be noted that the XTAG grammar has analyses for syntactic phenomena that were not
represented in the TSNLP test suite such as sentential subjects and subordinating clauses among
others. This eﬀort was, therefore, useful in highlighting some deﬁciencies in our grammar, but

F.3. CHUNKING AND DEPENDENCIES IN XTAG DERIVATIONS
279
did not provide the same sort of general evaluation as parsing corpus data.
F.3
Chunking and Dependencies in XTAG Derivations
We evaluated the XTAG parser for the text chunking task [Abney, 1991]. In particular, we
compared NP chunks and verb group (VG) chunks1 produced by the XTAG parser with the
NP and VG chunks from the Penn Treebank [Marcus et al., 1993].
The test involved 940
sentences of length 15 words or less from sections 17 to 23 of the Penn Treebank, parsed using
the XTAG English grammar. The results are given in Table F.3.
NP Chunking
VG Chunking
Recall
82.15%
74.51%
Precision
83.94%
76.43%
Table F.3: Text Chunking performance of the XTAG parser
System
Training Size
Recall
Precision
Ramshaw & Marcus
Baseline
81.9%
78.2%
Ramshaw & Marcus
200,000
90.7%
90.5%
(without lexical information)
Ramshaw & Marcus
200,000
92.3%
91.8%
(with lexical information)
Supertags
Baseline
74.0%
58.4%
Supertags
200,000
93.0%
91.8%
Supertags
1,000,000
93.8%
92.5%
Table F.4: Performance comparison of the transformation based noun chunker and the supertag
based noun chunker
As described earlier, the results cannot be directly compared with other results in chunking
such as in [Ramshaw and Marcus, 1995] since we do not train from the Treebank before testing.
However, in earlier work, text chunking was done using a technique called supertagging [Srinivas,
1997b] (which uses the XTAG English grammar) which can be used to train from the Treebank.
The comparative results of text chunking between supertagging and other methods of chunking
is shown in Figure F.4.2
We also performed experiments to determine the accuracy of the derivation structures pro-
duced by XTAG on WSJ text, where the derivation tree produced after parsing XTAG is
interpreted as a dependency parse. We took sentences that were 15 words or less from the Penn
Treebank [Marcus et al., 1993]. The sentences were collected from sections 17–23 of the Tree-
bank. 9891 of these sentences were given at least one parse by the XTAG system. Since XTAG
typically produces several derivations for each sentence we simply picked a single derivation
1We treat a sequence of verbs and verbal modiﬁers, including auxiliaries, adverbs, modals as constituting a
verb group.
2It is important to note in this comparison that the supertagger uses lexical information on a per word basis
only to pick an initial set of supertags for a given word.

280
APPENDIX F. EVALUATION AND RESULTS
from the list for this evaluation. Better results might be achieved by ranking the output of the
parser using the sort of approach described in [Srinivas et al., 1995].
There were some striking diﬀerences in the dependencies implicit in the Treebank and those
given by XTAG derivations. For instance, often a subject NP in the Treebank is linked with the
ﬁrst auxiliary verb in the tree, either a modal or a copular verb, whereas in the XTAG derivation,
the same NP will be linked to the main verb. Also XTAG produces some dependencies within
an NP, while a large number of words in NPs in the Treebank are directly dependent on the
verb. To normalize for these facts, we took the output of the NP and VG chunker described
above and accepted as correct any dependencies that were completely contained within a single
chunk.
For example, for the sentence Borrowed shares on the Amex rose to another record, the
XTAG and Treebank chunks are shown below.
XTAG chunks:
[Borrowed shares] [on the Amex] [rose]
[to another record]
Treebank chunks:
[Borrowed shares on the Amex] [rose]
[to another record]
Using these chunks, we can normalize for the fact that in the dependencies produced by
XTAG borrowed is dependent on shares (i.e. in the same chunk) while in the Treebank borrowed
is directly dependent on the verb rose. That is to say, we are looking at links between chunks,
not between words. The dependencies for the sentence are given below.
XTAG dependency
Treebank dependency
Borrowed::shares
Borrowed::rose
shares::rose
shares::rose
on::shares
on::shares
the::Amex
the::Amex
Amex::on
Amex::on
rose::NIL
rose::NIL
to::rose
to::rose
another::record
another::record
record::to
record::to
After this normalization, testing simply consisted of counting how many of the dependency
links produced by XTAG matched the Treebank dependency links. Due to some tokenization
and subsequent alignment problems we could only test on 835 of the original 9891 parsed
sentences. There were a total of 6135 dependency links extracted from the Treebank. The
XTAG parses also produced 6135 dependency links for the same sentences. Of the dependencies
produced by the XTAG parser, 5165 were correct giving us an accuracy of 84.2%.

F.4. COMPARISON WITH IBM
281
F.4
Comparison with IBM
The evaluation in this section was done with the earlier 1995 release of the grammar. This
section describes an experiment to measure the crossing bracket accuracy of the XTAG-parsed
IBM-manual sentences. In this experiment, XTAG parses of 1100 IBM-manual sentences have
been ranked using certain heuristics.
The ranked parses have been compared3 against the
bracketing given in the Lancaster Treebank of IBM-manual sentences4. Table F.5 shows the
results of XTAG obtained in this experiment, which used the highest ranked parse for each
system. It also shows the results of the latest IBM statistical grammar ([Jelinek et al., 1994])
on the same genre of sentences. Only the highest-ranked parse of both systems was used for this
evaluation. Crossing Brackets is the percentage of sentences with no pairs of brackets crossing
the Treebank bracketing (i.e. ( ( a b ) c ) has a crossing bracket measure of one if compared
to ( a ( b c ) ) ). Recall is the ratio of the number of constituents in the XTAG parse to the
number of constituents in the corresponding Treebank sentence. Precision is the ratio of the
number of correct constituents to the total number of constituents in the XTAG parse.
System
# of
Crossing Bracket
Recall
Precision
sentences
Accuracy
XTAG
1100
81.29%
82.34%
55.37%
IBM Statistical
1100
86.20%
86.00%
85.00%
grammar
Table F.5: Performance of XTAG on IBM-manual sentences
As can be seen from Table F.5, the precision ﬁgure for the XTAG system is considerably
lower than that for IBM. For the purposes of comparative evaluation against other systems,
we had to use the same crossing-brackets metric though we believe that the crossing-brackets
measure is inadequate for evaluating a grammar like XTAG. There are two reasons for the
inadequacy. First, the parse generated by XTAG is much richer in its representation of the
internal structure of certain phrases than those present in manually created treebanks (e.g.
IBM: [N your personal computer], XTAG: [NP [G your] [N [N personal] [N computer]]]). This
is reﬂected in the number of constituents per sentence, shown in the last column of Table F.6.5
System
Sent.
# of
Av. # of
Av. # of
Length
sent
words/sent
Constituents/sent
XTAG
1-10
654
7.45
22.03
1-15
978
9.13
30.56
IBM Stat.
1-10
447
7.50
4.60
Grammar
1-15
883
10.30
6.40
Table F.6: Constituents in XTAG parse and IBM parse
A second reason for considering the crossing bracket measure inadequate for evaluating
3We used the parseval program written by Phil Harison (phil@atc.boeing.com).
4The Treebank was obtained through Salim Roukos (roukos@watson.ibm.com) at IBM.
5We are aware of the fact that increasing the number of constituents also increases the recall percentage.
However we believe that this a legitimate gain.

282
APPENDIX F. EVALUATION AND RESULTS
XTAG is that the primary structure in XTAG is the derivation tree from which the bracketed
tree is derived. Two identical bracketings for a sentence can have completely diﬀerent derivation
trees (e.g. kick the bucket as an idiom vs. a compositional use). A more direct measure of the
performance of XTAG would evaluate the derivation structure, which captures the dependencies
between words.
F.5
Comparison with Alvey
The evaluation in this section was done with the earlier 1995 release of the grammar. This
section compares XTAG to the Alvey Natural Language Tools (ANLT) Grammar. We parsed
the set of LDOCE Noun Phrases presented in Appendix B of the technical report ([Carroll,
1993]) using XTAG. Table F.7 summarizes the results of this experiment. A total of 143 noun
phrases were parsed. The NPs which did not have a correct parse in the top three derivations
were considered failures for either system. The maximum and average number of derivations
columns show the highest and the average number of derivations produced for the NPs that
have a correct derivation in the top three. We show the performance of XTAG both with and
without the tagger since the performance of the POS tagger is signiﬁcantly degraded on the
NPs because the NPs are usually shorter than the sentences on which it was trained. It would
be interesting to see if the two systems performed similarly on a wider range of data.
System
# of
# parsed
% parsed
Maximum
Average
NPs
derivations
derivations
ANLT Parser
143
127
88.81%
32
4.57
XTAG Parser with
143
93
65.03%
28
3.45
POS tagger
XTAG Parser without
143
120
83.91%
28
4.14
POS tagger
Table F.7: Comparison of XTAG and ANLT Parser
F.6
Comparison with CLARE
The evaluation in this section was done with the earlier 1995 release of the grammar. This
section compares the performance of XTAG against that of the CLARE-2 system ([Alshawi
et al., 1992]) on the ATIS corpus. Table F.8 shows the performance results. The percentage
parsed column for both systems represents the percentage of sentences that produced any parse.
It must be noted that the performance result shown for CLARE-2 is without any tuning of the
grammar for the ATIS domain. The performance of CLARE-3, a later version of the CLARE
system, is estimated to be 10% higher than that of the CLARE-2 system.6
In an attempt to compare the performance of the two systems on a wider range of sentences
(from similar genres), we provide in Table F.9 the performance of CLARE-2 on LOB corpus and
6When CLARE-3 is tuned to the ATIS domain, performance increases to 90%. However XTAG has not been
tuned to the ATIS domain.

F.6. COMPARISON WITH CLARE
283
System
Mean length
% parsed
CLARE-2
6.53
68.50%
XTAG
7.62
88.35%
Table F.8: Performance of CLARE-2 and XTAG on the ATIS corpus
the performance of XTAG on the WSJ corpus. The performance was measured on sentences of
up to 10 words for both systems.
System
Corpus
Mean length
% parsed
CLARE-2
LOB
5.95
53.40%
XTAG
WSJ
6.00
55.58%
Table F.9: Performance of CLARE-2 and XTAG on LOB and WSJ corpus respectively

Bibliography
[Abeill´e and Schabes, 1989] Anne Abeill´e and Yves Schabes.
Parsing Idioms in Lexicalized
TAGs. In Proceedings of EACL ’89, pages 161–65, 1989.
[Abeill´e, 1990] Anne Abeill´e.
French and english determiners:
Interaction of morphology,
syntax, and semantics in lexicalized tree adjoining grammars.
In Tree Adjoining Gram-
mar,First International Workshop on TAGs: Formal Theory and Applications (abstracts),
Shloss Dagstuhl, Sarrbr¨ucken, 1990.
[Abney, 1987] Steven Abney. The English Noun Phrase in its Sentential Aspects. PhD thesis,
MIT, 1987.
[Abney, 1991] Steven Abney. Parsing by chunks. In Robert Berwick, Steven Abney, and Carol
Tenny, editors, Principle-based parsing. Kluwer Academic Publishers, 1991.
[Akmajian, 1970] A. Akmajian. On deriving cleft sentences from pseudo-cleft sentences. Lin-
guistic Inquiry, 1:149–168, 1970.
[Alshawi et al., 1992] Hiyan Alshawi, David Carter, Richard Crouch, Steve Pullman, Manny
Rayner, and Arnold Smith. CLARE – A Contextual Reasoning and Cooperative Response
Framework for the Core Language Engine. SRI International, Cambridge, England, 1992.
[Ball, 1991] Catherine N. Ball. The historical development of the it-cleft. PhD thesis, University
of Pennsylvania, 1991.
[Baltin, 1989] Mark Baltin. Heads and projections. In Mark Baltin and Anthony S. Kroch,
editors, Alternative conceptions of phrase structure, pages 1–16. University of Chicago Press,
Chicago, Illinois, 1989.
[Barwise and Cooper, 1981] John Barwise and Robin Cooper.
Generalized Quantiﬁers and
Natural Language. Linguistics and Philosophy, 4, 1981.
[Becker, 1993] Tilman Becker. HyTAG: A new Type of Tree Adjoining Grammars for Hybrid
Syntactic Representation of Free Word Order Languages. PhD thesis, Universit¨at des Saar-
landes, 1993.
[Becker, 1994] Tilman Becker. Patterns in metarules. In Proceedings of the 3rd TAG+ Confer-
ence, Paris, France, 1994.
[Bhatt, 1994] Rajesh Bhatt. Pro-control in tags. Unpublished paper, University of Pennsylva-
nia, 1994.
284

BIBLIOGRAPHY
285
[Browning, 1987] Marguerite Browning. Null Operator Constructions. PhD thesis, MIT, 1987.
[Burzio, 1986] Luigi Burzio. Italian syntax. A Government-Binding approach. Studies in nat-
ural language and linguistic theory. Reidel, Dordrecht, 1986.
[Candito, 1996] Marie-Helene Candito. A Principle-Based Hierarchical Representation of LT-
AGs. In Proceedings of COLING-96, Copenhagen, Denmark, 1996.
[Carroll, 1993] John Carroll. Practical Uniﬁcation-based Parsing of Natural Language. Univer-
sity of Cambridge, Computer Laboratory, Cambridge, England, 1993.
[Chomsky and Lasnik, 1993] Noam Chomsky and Howard Lasnik. The minimalist program.
manuscript, 1993.
[Chomsky, 1965] Noam Chomsky. Aspects of the Theory of Syntax. MIT Press, Cambridge,
Massachusetts, 1965.
[Chomsky, 1970] Noam Chomsky. Remarks on Nominalization. In Readings in English Trans-
formational Grammar, pages 184–221. Ginn and Company, Waltham, Massachusetts, 1970.
[Chomsky, 1986] Noam Chomsky. Barriers. MIT Press, Cambridge, Massachusetts, 1986.
[Chomsky, 1992] Noam Chomsky. A Minimalist Approach to Linguistic Theory. MIT Working
Papers in Linguistics, Occasional Papers in Linguistics No. 1, 1992.
[Church, 1988] Kenneth Ward Church. A Stochastic Parts Program and Noun Phrase Parser for
Unrestricted Text. In 2nd Applied Natural Language Processing Conference, Austin, Texas,
1988.
[Cinque, 1990] G. Cinque.
Types of A-bar-Dependencies.
MIT Press, Cambridge, Mas-
sachusetts; London, England, 1990.
[Cowie and Mackin, 1975] A. P. Cowie and R. Mackin, editors. Oxford Dictionary of Current
Idiomatic English, volume 1. Oxford University Press, London, England, 1975.
[Delahunty, 1984] Gerald P. Delahunty. The Analysis of English Cleft Sentences. Linguistic
Analysis, 13(2):63–113, 1984.
[Delin, 1989] Judy L. Delin. Cleft Constructions in Discourse. PhD thesis, University of Edin-
burgh, 1989.
[Doran, 1998] Christine Doran.
Incorporating Punctuation into the Sentence Grammar: A
Lexicalized Tree Adjoining Grammar Perspective. PhD thesis, University of Pennsylvania,
1998.
[Egedi and Martin, 1994] Dania Egedi and Patrick Martin. A Freely Available Syntactic Lexi-
con for English. In Proceedings of the International Workshop on Sharable Natural Language
Resources, Nara, Japan, August 1994.
[Emonds, 1970] J. Emonds. Root and structure-preserving transformations. PhD thesis, Mas-
sachusetts Institute of Technology, 1970.

286
BIBLIOGRAPHY
[Ernst, 1983] T. Ernst. More on Adverbs and Stressed Auxiliaries. Linguistic Inquiry 13, pages
542–48, 1983.
[Evans et al., 1995] Roger Evans, Gerald Gazdar, and David Weir. Encoding Lexicalized Tree
Adjoining Grammars with a Nonmonotonic Inheritance Hierarchy. In Proceedings of the 33rd
Annual Meeting of the Association for Computational Linguistics, Cambridge, MA, 1995.
[Gazdar et al., 1985] G. Gazdar, E. Klein, G. Pullum, and I. Sag. Generalized Phrase Structure
Grammar. Harvard University Press, Cambridge, Massachusetts, 1985.
[Grimshaw, 1990] Jane Grimshaw. Argument Structure. MIT Press, Cambridge, Massachusetts,
1990.
[Haegeman, 1991] Liliane Haegeman. Introduction to Government and Binding Theory. Black-
well Publishers, Cambridge, Massachusetts, Oxford, U.K., 1991.
[Hale and Keyser, 1986] Ken Hale and Samuel Jay Keyser. Some transitivity alternations in
English. Technical Report #7, MITCCS, July 1986.
[Hale and Keyser, 1987] Ken Hale and Samuel Jay Keyser. A view from the middle. Technical
Report #10, MITCCS, January 1987.
[Hanks, 1979] Patrick Hanks, editor.
Collins Dictionary of the English Language.
Collins,
London, England, 1979.
[Heycock and Kroch, 1993] Caroline Heycock and Anthony S. Kroch. Verb movement and the
status of subjects: implications for the theory of licensing. GAGL, 36:75–102, 1993.
[Heycock, 1991] Caroline Heycock. Progress Report: The English Copula in a LTAG. Internal
XTAG project report, University of Pennsylvania, Summer 1991.
[Hockey and Mateyak, 1998] Beth Ann Hockey and Heather Mateyak. Determining determiner
sequencing: A syntactic analysis for english. Technical Report 98-10, Institute for Research
in Cognitive Science, University of Pennsylvania, 1998.
[Hockey and Srinivas, 1993] Beth Ann Hockey and B. Srinivas. Feature-Based TAG in Place
of Multi-component Adjunction: Computational Implications. In Proceedings of the Natural
Language Processing Paciﬁc Rim Symposium (NLPRS), Fukuoka, Japan, December 1993.
[Hockey, 1994] Beth Ann Hockey. Echo questions, intonation and focus. In Proceedings of the
Interdisciplinary Conference on Focus and Natural Language Processing in Celebration of the
10th anniversary of the Journal of Semantics, Eschwege, Germany, 1994.
[Hornby, 1974] A. S. Hornby, editor. Oxford Advanced Learner’s Dictionary of Current English.
Oxford University Press, London, England, third edition, 1974.
[Iatridou, 1991] Sabine Iatridou. Topics in Conditionals. PhD thesis, MIT, 1991.
[Jackendoﬀ, 1972] R. Jackendoﬀ. Semantic Interpretation in Generative Grammar. MIT Press,
Cambridge, Massachusetts, 1972.

BIBLIOGRAPHY
287
[Jackendoﬀ, 1990] R. Jackendoﬀ. On Larson’s Analysis of the Double Object Construction.
Linguistic Inquiry, 21:427–456, 1990.
[Jelinek et al., 1994] Fred Jelinek, John Laﬀerty, David M. Magerman, Robert Mercer, Adwait
Ratnaparkhi, and Salim Roukos. Decision Tree Parsing using a Hidden Derivation Model.
In Proceedings from the ARPA Workshop on Human Language Technology Workshop, March
1994.
[Joshi et al., 1975] Aravind K. Joshi, L. Levy, and M. Takahashi. Tree Adjunct Grammars.
Journal of Computer and System Sciences, 1975.
[Joshi, 1985] Aravind K. Joshi. Tree Adjoining Grammars: How much context Sensitivity is
required to provide a reasonable structural description.
In D. Dowty, I. Karttunen, and
A. Zwicky, editors, Natural Language Parsing, pages 206–250. Cambridge University Press,
Cambridge, U.K., 1985.
[Kaplan and Bresnan, 1983] Ronald Kaplan and Joan Bresnan. Lexical-functional Grammar:
A Formal System for Grammatical Representation. In J. Bresnan, editor, The Mental Rep-
resentation of Grammatical Relations. MIT Press, Cambridge, Massachusetts, 1983.
[Karp et al., 1992] Daniel Karp, Yves Schabes, Martin Zaidel, and Dania Egedi.
A Freely
Available Wide Coverage Morphological Analyzer for English. In Proceedings of the 15th
International Conference on Computational Linguistics (COLING ’92), Nantes, France, Au-
gust 1992.
[Keenan and Stavi, 1986] E. L. Keenan and J. Stavi. A Semantic Characterization of Natural
Language Determiners. Linguistics and Philosophy, 9, August 1986.
[Knowles, 1986] John Knowles. The Cleft Sentence: A Base-Generated Perspective. Lingua:
International Review of General Linguistics, 69(4):295–317, August 1986.
[Kroch and Joshi, 1985] Anthony S. Kroch and Aravind K. Joshi. The Linguistic Relevance of
Tree Adjoining Grammars. Technical Report MS-CIS-85-16, Department of Computer and
Information Science, University of Pennsylvania, 1985.
[Kroch and Joshi, 1987] Anthony S. Kroch and Aravind K. Joshi. Analyzing Extraposition in
a Tree Adjoining Grammar. In G. Huck and A. Ojeda, editors, Discontinuous Constituents,
Syntax and Semantics, volume 20. Academic Press, 1987.
[Lapointe, 1980] S. Lapointe.
A lexical analysis of the English auxiliary verb system.
In
T. Hoekstra et al, editor, Lexical Grammar, pages 215–254. Foris, Dordrecht, 1980.
[Larson, 1988] R. Larson. On the Double Object construction. Linguistic Inquiry, 19:335–391,
1988.
[Larson, 1990] R. Larson. Double Objects Revisited: Reply to Jackendoﬀ. Linguistic Inquiry,
21:589–612, 1990.
[Lasnik and Saito, 1984] H. Lasnik and M. Saito. On the Nature of Proper Government. Lin-
guistic Inquiry, 15:235–289, 1984.

288
BIBLIOGRAPHY
[Lasnik and Uriagereka, 1988] H. Lasnik and J. Uriagereka. A Course in GB Syntax. MIT
Press, Cambridge, Massachusetts, 1988.
[Lees, 1960] Robert B. Lees. The Grammar of English Nominalizations. Indiana University
Research Center in Anthropology, Folklore, and Linguistics, Indiana University, Bloomington,
Indiana, 1960.
[Lehmann et al., 1996] Sabine Lehmann, Stephan Oepen, Sylvie Regnier-Prost, Klaus Netter,
Veronika Lux, Judith Klein, Kirsten Falkedal, Frederik Fouvry, Dominique Estival, Eva
Dauphin, Herv´e Compagnion, Judith Baur, Lorna Balkan, and Doug Arnold.
tsnlp —
Test Suites for Natural Language Processing. In Proceedings of COLING 1996, Kopenhagen,
1996.
[Liberman, 1989] Mark Liberman. Tex on tap: the ACL Data Collection Initiative. In Proceed-
ings of the DARPA Workshop on Speech and Natural Language Processing. Morgan Kaufman,
1989.
[Marcus et al., 1993] Mitchell M. Marcus, Beatrice Santorini, and Mary Ann Marcinkiewicz.
Building a Large Annotated Corpus of English: The Penn Treebank. Computational Lin-
guistics, 19.2:313–330, June 1993.
[Mateyak, 1997] Heather Mateyak. Negation of noun phrases with not. Technical Report 97-18,
UPENN-IRCS, October 1997.
[McCawley, 1988] James D. McCawley. The Syntactic Phenomena of English. The University
of Chicago Press, Chicago, Illinois, 1988.
[Moro, 1990] A. Moro. There as a Raised Predicate. Paper presented at GLOW, 1990.
[Napoli, 1988] Donna Jo Napoli. Ergative Verbs in English. Journal of the Linguistic Society
of America (Language), 64:1(1):130–142, March 1988.
[Obernauer, 1984] H. Obernauer. On the Identiﬁcation of Empty Categories. Linguistic Review
4, 2:153–202, 1984.
[Paroubek et al., 1992] Patrick Paroubek, Yves Schabes, and Aravind K. Joshi. Xtag – a graph-
ical workbench for developing tree-adjoining grammars.
In Third Conference on Applied
Natural Language Processing, Trento, Italy, 1992.
[Partee et al., 1990] Barbara Partee, Alice ter Meulen, and Robert E. Wall.
Mathematical
Methods in Linguistics. Kluwer Academic Publishers, 1990.
[Pollard and Sag, 1994] Carl Pollard and Ivan A. Sag. Head-Driven Phrase Structure Grammar.
CSLI, 1994.
[Pollock, 1989] J-Y. Pollock. Verb Movement, UG, and the Structure of IP. Linguistic Inquiry,
20.3:365–424, 1989.
[Quirk et al., 1985] Randolph Quirk, Sidney Greenbaum, Geoﬀrey Leech, and Jan Svartvik. A
Comprehensive Grammar of the English Language. Longman, London, 1985.

BIBLIOGRAPHY
289
[Ramshaw and Marcus, 1995] Lance Ramshaw and Mitchell P. Marcus. Text chunking using
transformation-based learning. In Proceedings of the Third Workshop on Very Large Corpora,
MIT, Cambridge, Boston, 1995.
[Rizzi, 1990] Luigi Rizzi. Relativized Minimality. MIT Press, Cambridge, Massachusetts; Lon-
don, England, 1990.
[Rogers and Vijay-Shankar, 1994] James Rogers and K. Vijay-Shankar. Obtaining Trees from
their Descriptions: An Application to Tree Adjoining Grammars. Computational Intelligence,
10(4), 1994.
[Rosenbaum, 1967] Peter S. Rosenbaum. The grammar of English predicate complement con-
structions. MIT press, Cambridge, Massachusetts, 1967.
[Sag et al., 1985] I. Sag, G. Gazdar, T. Wasow, and S. Weisler.
Coordination and How to
distinguish categories. Natural Language and Linguistic Theory, 3:117–171, 1985.
[Sarkar and Joshi, 1996] Anoop Sarkar and Aravind Joshi.
Coordination in Tree Adjoining
Grammars: Formalization and Implementation.
In Proceedings of the 18th International
Conference on Computational Linguistics (COLING ’94), Copenhagen, Denmark, August
1996.
[Schabes and Joshi, 1988] Yves Schabes and Aravind K. Joshi. An Early-Type Parsing Algo-
rithm for Tree Adjoining Grammars. In Proceedings of the 26th Meeting of the Association
for Computational Linguistics, Buﬀalo, June 1988.
[Schabes et al., 1988] Yves Schabes, Anne Abeill´e, and Aravind K. Joshi. Parsing strategies
with ‘lexicalized’ grammars: Application to Tree Adjoining Grammars. In Proceedings of
the 12th International Conference on Computational Linguistics (COLING’88), Budapest,
Hungary, August 1988.
[Schabes, 1990] Yves Schabes. Mathematical and Computational Aspects of Lexicalized Gram-
mars. PhD thesis, Computer Science Department, University of Pennsylvania, 1990.
[Seuss, 1971] Dr. Seuss. The Lorax. Random House, New York, New York, 1971.
[Soong and Huang, 1990] Frank K. Soong and Eng-Fong Huang. Fast Tree-Trellis Search for
Finding the N-Best Sentence Hypothesis in Continuous Speech Recognition.
Journal of
Acoustic Society, AM., May 1990.
[Sornicola, 1988] R. Sornicola. IT-clefts and WH-clefts: two awkward sentence types. Journal
of Linguistics, 24:343–379, 1988.
[Srinivas et al., 1994] B. Srinivas, D. Egedi, C. Doran, and T. Becker. Lexicalization and gram-
mar development. In Proceedings of KONVENS ’94, pages 310–9, Vienna, Austria, 1994.
[Srinivas et al., 1995] B. Srinivas, Christine Doran, and Seth Kulick. Heuristics and parse rank-
ing.
In Proceedings of the 4th Annual International Workshop on Parsing Technologies,
Prague, September 1995.

290
BIBLIOGRAPHY
[Srinivas, 1997a] B. Srinivas. Complexity of Lexical Descriptions and its Relevance to Partial
Parsing. PhD thesis, University of Pennsylvania, Philadelphia, PA, August 1997.
[Srinivas, 1997b] B. Srinivas. Performance Evaluation of Supertagging for Partial Parsing. In
Proceedings of Fifth International Workshop on Parsing Technology, Boston, USA, September
1997.
[Vijay-Shanker and Joshi, 1991] K. Vijay-Shanker and Aravind K. Joshi.
Uniﬁcation Based
Tree Adjoining Grammars. In J. Wedekind, editor, Uniﬁcation-based Grammars. MIT Press,
Cambridge, Massachusetts, 1991.
[Vijay-Shanker and Schabes, 1992] K. Vijay-Shanker and Yves Schabes. Structure sharing in
lexicalized tree adjoining grammar. In Proceedings of the 15th International Conference on
Computational Linguistics (COLING ’92), Nantes, France, August 1992.
[Watanabe, 1993] Akira Watanabe. The Notion of Finite Clauses in AGR-Based Case Theory.
MIT Working Papers in Linguistics, 18:281–296, 1993.
[XTAG-Group, 1995] The XTAG-Group. A Lexicalized Tree Adjoining Grammar for English.
Technical Report IRCS 95-03, University of Pennsylvania, 1995.
