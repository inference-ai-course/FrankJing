arXiv:cs/9809028v1  [cs.CL]  18 Sep 1998
Separating Dependency from Constituency in a Tree Rewriting
System∗
Anoop Sarkar
Department of Computer and Information Science
University of Pennsylvania
200 South 33rd St, Philadelphia PA 19104
anoop@linc.cis.upenn.edu
1
Introduction
We deﬁne a new grammar formalism called Link-
Sharing Tree Adjoining Grammar (LSTAG) which
arises directly out of a concern for distinguishing the
notion of constituency from the notion of relating lex-
ical items in terms of linguistic dependency1(Mel’ˆcuk,
1988; Rambow and Joshi, 1992).
This work de-
rives directly from work on Tree Adjoining Gram-
mars (TAG) (Joshi, Levy, and Takahashi, 1975) where
these two notions are conﬂated. The set of derived
trees for a TAG correspond to the traditional notions
of constituency while the derivation trees of a TAG
are closely related to dependency structure (Rambow
and Joshi, 1992). A salient feature of TAG is the ex-
tended domain of locality it provides for stating these
dependencies. Each elementary tree can be associ-
ated with a lexical item giving us a lexicalized TAG
(LTAG)(Joshi and Schabes, 1991). Properties related
to the lexical item such as subcategorization, agree-
ment, and certain types of word-order variation can
be expressed directly in the elementary tree (Kroch,
1987; Frank, 1992). Thus, in an LTAG all of these
linguistic dependencies are expressed locally in the
elementary trees of the grammar. This means that
∗Thanks to Christy Doran, Aravind Joshi, Nobo Komagata,
Owen Rambow, and B. Srinivas for their helpful comments and
discussion.
1 The term dependency is used here broadly to include for-
mal relationships such as case and agreement and other rela-
tionships such as ﬁller-gap.
the predicate and its arguments are always topologi-
cally situated in the same elementary tree.
However, in coordination of predicates, e.g.
(1),
the dependencies between predicate and argument
cannot be represented in a TAG elementary tree di-
rectly, since several elementary trees seem to be ‘shar-
ing’ their arguments.
(1)
a. Kiki frolics, sings and plays all day.
b. Kiki likes and Bill thinks Janet likes soccer.
The idea behind LSTAG is that the non-local na-
ture of coordination as in (1) (for TAG-like gram-
mar formalisms) can be captured by introducing a
restricted degree of synchronized parallelism into the
TAG rewriting system while retaining the existing
independent parallelism2(Engelfriet, Rozenberg, and
Slutzki, 1980; Rambow and Satta, to appear). We
believe that an approach towards coordination that
explicitly distinguishes the dependencies from the
constituency gives a better formal understanding of
its representation when compared to previous ap-
proaches that use tree-rewriting systems which con-
ﬂate the two issues, as in (Joshi, 1990; Joshi and
Schabes, 1991; Sarkar and Joshi, 1996) which have
2It is important to note that while the adjunction opera-
tion in TAGs is “context-free”, synchronized parallelism could
be attributed to the TAG formalism due to the string wrap-
ping capabilities of adjunction, since synchronized parallelism
is concerned with how strings are derived in a rewriting sys-
tem.
We note this as a conjecture but will not attempt to
prove it here.
1

to represent sentences such as (1) with either un-
rooted trees or by performing structure merging on
the derived tree. Other formalisms for coordination
have similar motivations: however their approaches
diﬀer, e.g. CCG (Steedman, 1985; Steedman, 1997b)
extends the notion of constituency, while generative
syntacticians (Moltmann, 1992; Muadz, 1991) work
with three-dimensional syntactic trees.
2
Synchronized Parallelism
The terms synchronized parallelism and independent
parallelism arise from work done on a family of
formalisms termed parallel rewriting systems that
extend context-free grammars (CFG) by the addi-
tion of various restrictive devices (see (Engelfriet,
Rozenberg, and Slutzki, 1980))). Synchronized par-
allelism allows derivations which include substrings
which have been generated by a common (or shared)
underlying derivation process3. Independent paral-
lelism corresponds to the instantiations of indepen-
dent derivation processes which are then combined
to give the entire derivation of a string4. What we
are exploring in this paper is an example of a mixed
system with both independent and synchronous par-
allelism.
In (Rambow and Satta, to appear) it is shown
that by allowing an unbounded degree of synchro-
nized parallelism we get systems that are too uncon-
strained. However, interesting subfamilies arise when
the synchronous parallelism is bounded to a ﬁnite de-
gree, i.e. only a bounded number of subderivations
can be synchronized in a given grammar. The system
we deﬁne has this property.
3
LSTAG
We ﬁrst look at the formalism of Synchronous TAG
(STAG)(Shieber and Schabes, 1990) since it is an ex-
3 The Lindenmayer systems are examples of systems with
only synchronous parallelism and it is interesting to note that
these L systems have the anti-AFL property (where none of
the standard closures apply).
4 CFG is a formalism that only has independent parallelism.
ample of a tree-rewriting system that has synchro-
nized parallelism.
As a preliminary we ﬁrst informally deﬁne Tree
Adjoining Grammars (TAG). For example, Figure 1
shows an example of a tree for a transitive verb
cooked. Each node in the tree has a unique address
obtained by applying a Gorn tree addressing scheme.
For instance, the object NP has address 2.2.
In
the TAG formalism, trees can be composed using the
two operations of substitution (corresponds to string
concatenation) and adjunction (corresponds to string
wrapping). A history of these operations on elemen-
tary trees in the form of a derivation tree can be used
to reconstruct the derivation of a string recognized
by a TAG. Figure 2 shows an example of a deriva-
tion tree and the corresponding parse tree for the de-
rived structure obtained when α(John) and α(beans)
substitute into α(cooked) and β(dried) adjoins into
α(beans) giving us a derivation tree for John cooked
dried beans. Trees that adjoin are termed as auxiliary
trees, trees that are not auxiliary are called initial.
Each node in the derivation tree is the name of an
elementary tree. The labels on the edges denote the
address in the parent node where a substitution or
adjunction has occured.
Deﬁnition 1 In a TAG G = {γ | γ is either an ini-
tial tree or an auxiliary tree }, we will notate adjunc-
tion (similarly substitution) of trees γ1 . . . γk into tree
γ at addresses a1 . . . ak giving a derived tree γ′ as
γ′ = γ[a1, γ1] . . . [ak, γk]
Deﬁnition 2 Given two standard TAGs GL and
GR we deﬁne (from (Shieber, 1994)) a STAG as
{⟨γ, γ′, ⌢⟩| γ ∈GL, γ′ ∈GR}, where ⌢is a set
of links from a node address in γ to a node address
in γ′. A derivation proceeds as follows:
• for γ = ⟨γL, γR, ⌢⟩, pick a link member aL ⌢i
aR, where the a’s are node addresses and ⌢i ∈
⌢. For simplicity, we refer to ⌢as link and its
elements ⌢i as link members.
• adjunction
(similarly
substitution)
of
⟨βL, βR, ⌢′⟩into γ is given by
⟨γ′
L, γ′
R, ⌢′′⟩= ⟨γL[aL, βL], γR[aR, βR], ⌢′′⟩
2

α (cooked)
S
VP
NP
V
NP
1
0
2.1
2.2
2
cooked
α (John)
NP
N
John
α(beans)
N
NP
beans
(dried)
β
N
ADJ
dried
N*
Figure 1: Example of a TAG
S
NP
VP
N
V
NP
John cooked
N
ADJ
N
dried
beans
1
2.2
(beans)
1
α
β
α(John)
α
(cooked)
(dried)
Derivation Tree
Figure 2: Example of a derivation tree and corresponding parse tree
where all links in ⌢and ⌢′ are included in ⌢′′
except ⌢i.
• ⟨γ′
L, γ′
R, ⌢′′⟩is now a derived structure which
can be further operated upon.
In (Abeill´e, 1992; Abeill´e, 1994) STAGs have been
used in handling non-local dependencies and to seper-
ate syntactic attachment from semantic roles. How-
ever, STAG cannot be used to seperate the dependen-
cies created in (pairs of) derivation trees for coordi-
nate structures from the constituency represented in
these derivation trees. In this particular sense, STAG
has the same shortcomings of a TAG. Also the above
deﬁnition of the inheritance of links in derived struc-
tures allows STAG to derive strings not generable by
TAG (Shieber, 1994).
We look at a modiﬁed ver-
sion of STAGs which is weaker in power than STAGs
as deﬁned in Defn 2. We call this formalism Link-
Sharing TAG (LSTAG).
Deﬁnition 3 An LSTAG G is deﬁned as a 4-tuple
⟨GL, GR, ∆, Φ⟩where GL, GR are standard TAGs, ∆
and Φ are disjoint sets of sets of links and for each
pair γ = ⟨γL, γR⟩, where γL ∈GL and γR ∈GR,
δγ ∈∆is a subset of links in γ and φγR ∈Φ is a
distinguished subset of links with the following prop-
erties:
• for each link ⌢∈φγR, η ⌢η, where η is a node
address in γR. i.e. φγR is a set of reﬂexive links.
• δR and φγR have some canonical order ≺.
• adjunction (similarly substitution) of ⟨βL, βR⟩
into γ is given by
⟨γ′
L, γ′
R⟩= ⟨γL[aL, βL], γR[aR, βR]⟩
and for all γi ∈δγ, βi ∈φβR(1 ≤i ≤n)
(card(δγ) ≥card(βR))
δγ ⊔φβR
def
= ⌢γ1 ⊔⌢β1 ∪. . . ∪⌢γn ⊔⌢βn
3

where
⌢γ1≺⌢γ2, . . . , ⌢γn−1≺⌢γn
and
⌢βR1≺⌢βR2, . . . , ⌢βRn−1≺⌢βRn
• ⌢i ⊔⌢j is a set of links deﬁned as follows. If
aLi ⌢i aRi and aRj ⌢j aRj, then
⌢i ⊔⌢j
def
= {aLi ⌢aRi} ∪{aLi ⌢aRj}
• ⟨γ′
L, γ′
R⟩is the new derived structure with new
set of links δγ ⊔φβR.
Φ is used to derive synchronized parallelism in GR.
The ordering ≺is simply used to match up the links
being shared via the (non-local) sharing operation ⊔.
This ordering ≺can be deﬁned in terms of node
addresses or “ﬁrst argument ≺second argument”, i.e.
ordering the arguments of the two predicates being
coordinated.
It is important to note that only the links in Φ are
used non-locally and they are always exhausted in
a single adjunction (or substitution) operation. No
links from ∆are ever inherited unlike STAGs. Hence,
non-locality is only used in a restricted fashion for
the notion of ’sharing’.
4
Linguistic Relevance
To explain how the formalism works consider sen-
tence (2).
(2)
John cooks and eats beans.
Consider a LSTAG G = {γ, β, α, υ} partially shown
in Fig. 3(a) and Fig. 3(b). α and υ are analogously
deﬁned for John and beans respectively (see Fig. 1).
In Fig. 3(a) δγ = {1, 2}5and φγR = {}, while for
Fig. 3(b) δγ = {} and φγR = {1, 2}.
5 We are just using numbers 1, 2, . . . to denote the links
rather than use the Gorn notation to make the trees easier to
read. Here, link number 1 stands for 1 ⌢1 and 2 stands for
2.2 ⌢2.2
It is important to note that our initial motivation
about seperating dependency from the constituency
information is highlighted in β (see Fig. 3(b)) where
the ﬁrst projection will only contribute information
about constituency in a derivation tree while the sec-
ond projection will contribute only dependency infor-
mation in a derivation tree. We conjecture that this
is true for all the structures deﬁned in an LSTAG.
the kind of questions addressed in (Rambow, Vijay-
Shanker, and Weir, 1995) can perhaps be answered
within the framework of LSTAG6.
(a)

:
*
S
NP#

VP
V
co
oks
NP#

S
NP#

VP
V
co
oks'
NP#

+
(b)

:
*
V
V
and
V
eats
S
S
and'
S
NP#

VP
V
eats
NP#

+
Figure 3: Trees γ and β from LSTAG G
The derived structure after β adjoins onto γ is
shown in Fig. 7(a). Fig. 5(a) shows the derived tree
after the tree α (for John) substitutes into γ. Notice
that due to link sharing, substitution is shared, eﬀec-
tively forming a “tangled” derived tree7. In Figs. 7
6 In (Rambow, Vijay-Shanker, and Weir, 1995) a new for-
malism called D-Tree Grammars was introduced in order to
bring together the notion of derivation tree in a TAG with the
notion of dependency grammar (Mel’ˆcuk, 1988). Perhaps the
kind of questions addressed in (Rambow, Vijay-Shanker, and
Weir, 1995) can also be handled using the current framework.
Such an application of the formalism would motivate the need
for trees like γ in Fig. 3 independent of the coordination facts
since they would be required to get the dependencies right.
7 While this notion of sharing bears some resemblance to
the notion of joining node in the three-dimensional trees used
in (Moltmann, 1992; Muadz, 1991) the rules for semantic in-
terpretation of the derivations produced in a LSTAG is con-
4

and 5 the derivation trees are also given (associated
with each element).
The derivation structure for
the second element in Fig. 5(b) is a directed acyclic
derivation graph which gives us information about
dependency we expect.
The derivation tree of the
ﬁrst element in Fig. 5(b), on the other hand, gives us
information about constituency.
The notion of link sharing is closely related to the
schematization of the coordination rule in (Steedman,
1997b) shown below in combinatory notation.
bxy
≡
bxy
bfg
≡
λx.b(fx)(gx)
bfg
≡
λx.λy.b(fxy)(gxy)
· · ·
Link sharing is used to combine the interpretation
of the predicate arguments f and g (e.g. cooks, eats)
of the conjunction b with the interpretation of the
arguments of those predicates x, y, . . .. However, it
does this within a tree-rewriting system, unlike the
use of combinators in (Steedman, 1997b).
5
Restrictions
Having deﬁned the formalism of LSTAG, we now de-
ﬁne certain restrictions on the grammar that can be
written in this formalism in order to capture correctly
certain facts about coordinate structures in English.
For instance, we need to prohibit elementary struc-
tures like the one in Fig. 6 because they give rise to
ungrammatical sentences like (3).
(3)
*Peanuts John likes and almonds hates.
(Joshi, 1990)
However, such restrictions in the context of TAGs
have been discussed before. (Joshi, 1990) rules out
(3) by stating a requirement on the lexical string
spelled out by the elementary tree.
If the lexical
string spelled out is not contiguous then it cannot
siderably less obscure than the rules needed to interpret 3D
trees; crucially because elementary structures in a TAG-like
formalisms are taken to be semantically minimal without be-
ing semantically void.
coordinate. This requirement is stated to be a phono-
logical condition and relates the notion of an intona-
tional phrase (IP) to the notion of appropriate frag-
ments for coordination (in the spirit of (Steedman,
1997a)).
It is important to note that the notions
of phrase structure for coordination and intonational
phrases deﬁned in (Joshi, 1990) for TAG are not iden-
tical, whereas they are identical for CCG (Steedman,
1997a).
We can state an analogous restriction on the for-
mation of elementary structures in a LSTAG, one
that is motivated by the notion of link sharing. The
left element of an elementary structure in a LSTAG
cannot be composed of discontinuous parts of the
right element. For example, in Fig. 6 the segment
[S[NP↓][V P ]] from the right element has been excised
in the left element. This restriction corresponds to
the notion that the left element of a structure in a
LSTAG represents constituency.
6
Conclusion
We have presented a new tree-rewriting formal-
ism called Link-Sharing Tree Adjoining Grammar
(LSTAG) which is a variant of synchronous TAGs
(STAG). Using LSTAG we deﬁned an approach to-
wards coordination where linguistic dependency is
distinguished from the notion of constituency. Ap-
propriate restrictions on the nature of elementary
structures in a LSTAG were also deﬁned.
Such an
approach towards coordination that explicitly distin-
guishes dependencies from constituency gives a better
formal understanding of its representation when com-
pared to previous approaches that use tree-rewriting
systems which conﬂate the two issues (see (Joshi and
Schabes, 1991; Sarkar and Joshi, 1996)). The pre-
vious approaches had to represent coordinate struc-
tures either with unrooted trees or by performing
structure merging on the parse tree. Moreover, the
linguistic analyses presented in (Joshi and Schabes,
1991; Sarkar and Joshi, 1996) can be easily adopted
in the current formalism.
5

(a)
*
S
NP#

VP
V
V
co
oks
and
V
eats
NP#

S
S
NP#

VP
V
co
oks'
NP#

and'
S
NP#

VP
V
eats'
NP#

+
(b)
*


.


0
+
Figure 4: Derived and derivation structures after β adjoins into γ.
(a)
*
S
NP
John
VP
V
V
co
oks
and
V
eats
NP#

S
S
NP
John'
VP
V
co
oks'
NP#

and'
S
VP
V
eats'
NP#

+
(b)
*




.




0

+
Figure 5: Substitution of α
(a)
*
S
S*
and
S
NP
almonds
VP
V
hates
NP

S
S*
and
S
NP
almonds
S
NP#

VP
V
hates
NP

+
Figure 6: Discontiguous elementary structure
6

References
[Abeill´e1992] Abeill´e, Anne.
1992.
Synchronous TAGs
and French Pronominal Clitics. In Proc. of COLING-
92, pages 60–66, Nantes, Aug 23–28.
[Abeill´e1994] Abeill´e, Anne.
1994.
Syntax or Seman-
tics? Handling Nonlocal Dependencies with MCTAGs
or Synchronous TAGs.
Computational Intelligence,
10(4):471–485.
[Engelfriet, Rozenberg, and Slutzki1980] Engelfriet,
J.,
G. Rozenberg, and G. Slutzki. 1980. Tree transduc-
ers, L systems, and two-way machines.
Journal of
Computer and System Science, 43:328–360.
[Frank1992] Frank, Robert. 1992. Syntactic locality and
Tree Adjoining Grammar:
grammatical, acquisition
and processing perspectives.
Ph.D. thesis, University
of Pennsylvania,IRCS-92-47.
[Joshi and Schabes1991] Joshi, A. and Y. Schabes. 1991.
Tree adjoining grammars and lexicalized grammars. In
M. Nivat and A. Podelski, editors, Tree automata and
languages. North-Holland.
[Joshi1990] Joshi, Aravind. 1990. Phrase Structure and
Intonational Phrases:
Comments on the papers by
Marcus and Steedman. In G. Altmann, editor, Com-
putational and Cognitive Models of Speech. MIT Press.
[Joshi and Schabes1991] Joshi, Aravind and Yves Sch-
abes. 1991. Fixed and ﬂexible phrase structure: Coor-
dination in Tree Adjoining Grammar. In Presented at
the DARPA Workshop on Spoken Language Systems,
Asilomar, CA.
[Joshi, Levy, and Takahashi1975] Joshi,
Aravind
K.,
L. Levy, and M. Takahashi.
1975.
Tree Adjunct
Grammars.
Journal of Computer and System Sci-
ences.
[Kroch1987] Kroch, A. 1987. Subjacency in a tree adjoin-
ing grammar. In A. Manaster-Ramer, editor, Mathe-
matics of Language. J. Benjamins Pub. Co., pages 143–
172.
[Mel’ˆcuk1988] Mel’ˆcuk, I. 1988. Dependency Syntax: The-
ory and Practice. State University of New York Press,
Albany.
[Moltmann1992] Moltmann, Friederike. 1992. On the In-
terpretation of Three-Dimensonal Syntactic Trees. In
Chris Barker and David Dowty, editors, Proc. of SALT-
2, pages 261–281, May 1-3.
[Muadz1991] Muadz, H. 1991. A Planar Theory of Coor-
dination. Ph.D. thesis, University of Arizona, Tucson,
Arizona.
[Rambow and Joshi1992] Rambow, O. and A. Joshi. 1992.
A formal look at dependency grammars and phrase-
structure grammars,
with special consideration to
word-order phenomena.
In Intern. Workshop on the
Meaning-Text Theory, pages 47–66, Arbeitspapiere der
GMD 671. Darmstadt.
[Rambow and Sattato appear] Rambow, O. and G. Satta.
to appear.
Independent parallelism in ﬁnite copying
parallel rewriting systems. Theor. Comput. Sc.
[Rambow, Vijay-Shanker, and Weir1995] Rambow,
O.,
K. Vijay-Shanker, and D. Weir.
1995.
D-Tree
Grammars. In Proceedings of the 33rd Meeting of the
ACL.
[Sarkar and Joshi1996] Sarkar, Anoop and Aravind Joshi.
1996.
Coordination in TAG: Formalization and im-
plementation.
In Proceedings of the 16th Interna-
tional Conference on Computational Linguistics (COL-
ING’96), Copenhagen.
[Shieber1994] Shieber, S.
1994.
Restricting the weak
generative
capacity of synchronous tree adjoining
grammars. Computational Intelligence, 10(4):371–385,
November.
[Shieber and Schabes1990] Shieber, Stuart and Yves Sch-
abes. 1990. Synchronous Tree Adjoining Grammars.
In Proceedings of the 13th International Conference
on Computational Linguistics (COLING’90), Helsinki,
Finland.
[Steedman1985] Steedman, Mark. 1985. Dependency and
coordination in the grammar of Dutch and English.
Language, 61:523–568.
[Steedman1997a] Steedman, Mark.
1997a.
Informa-
tion Structure and the Syntax-Phonology Interface.
manuscript. Univ. of Pennsylvania.
[Steedman1997b] Steedman, Mark. 1997b. Surface Struc-
ture and Interpretation: Unbounded and Bounded De-
pendency in Combinatory Grammar.
Linguistic In-
quiry monograph. MIT Press.
7
